[
  {
    "_tag": "Interface",
    "module": {
      "name": "Alternative.ts",
      "path": "src/Alternative.ts"
    },
    "project": "@effect/typeclass",
    "name": "Alternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Alternative<F extends TypeLambda> extends SemiAlternative<F>, Coproduct<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Alternative.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Applicative.ts",
      "path": "src/Applicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoid",
    "description": "Lift a `Monoid` into `F`, combining the inner values using the provided `Monoid`:\n\n- `combine` is provided by {@link semiApplicative.getSemigroup}.\n- `empty` is `F.of(M.empty)`",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const getMonoid: <F extends TypeLambda>(F: Applicative<F>) => <A, R, O, E>(M: Monoid<A>) => Monoid<Kind<F, R, O, E, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Applicative.ts#L25"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Applicative.ts",
      "path": "src/Applicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "Applicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Applicative<F extends TypeLambda> extends SemiApplicative<F>, Product<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Applicative.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bicovariant.ts",
      "path": "src/Bicovariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "bimapComposition",
    "description": "Returns a default ternary `bimap` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const bimapComposition: <F extends TypeLambda, G extends TypeLambda>(CovariantF: Covariant<F>, BicovariantG: Bicovariant<G>) => <FR, FO, FE, GR, GO, E1, A, E2, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, E1, A>>, f: (e: E1) => E2, g: (a: A) => B) => Kind<F, FR, FO, FE, Kind<G, GR, GO, E2, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bicovariant.ts#L31"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bicovariant.ts",
      "path": "src/Bicovariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "mapLeft",
    "description": "Returns a default `mapLeft` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const mapLeft: <F extends TypeLambda>(F: Bicovariant<F>) => { <E, G>(f: (e: E) => G): <R, O, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, G, A>; <R, O, E, A, G>(self: Kind<F, R, O, E, A>, f: (e: E) => G): Kind<F, R, O, G, A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bicovariant.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bicovariant.ts",
      "path": "src/Bicovariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "map",
    "description": "Returns a default `map` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const map: <F extends TypeLambda>(F: Bicovariant<F>) => Covariant<F>[\"map\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bicovariant.ts#L62"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Bicovariant.ts",
      "path": "src/Bicovariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bicovariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Bicovariant<F extends TypeLambda> extends TypeClass<F> {\n  readonly bimap: {\n    <E1, E2, A, B>(\n      f: (e: E1) => E2,\n      g: (a: A) => B\n    ): <R, O>(self: Kind<F, R, O, E1, A>) => Kind<F, R, O, E2, B>\n    <R, O, E1, A, E2, B>(\n      self: Kind<F, R, O, E1, A>,\n      f: (e: E1) => E2,\n      g: (a: A) => B\n    ): Kind<F, R, O, E2, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bicovariant.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "min",
    "description": "`Monoid` that returns last minimum of elements.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const min: <A>(B: Bounded<A>) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "max",
    "description": "`Monoid` that returns last maximum of elements.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const max: <A>(B: Bounded<A>) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L43"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "between",
    "description": "Checks if a value is between the lower and upper limit of a bound.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "predicates",
    "signature": "declare const between: <A>(B: Bounded<A>) => (a: A) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L51"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "clamp",
    "description": "Clamp a value between `minBound` and `maxBound` values.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "utils",
    "signature": "declare const clamp: <A>(B: Bounded<A>) => (a: A) => A",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L60"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "reverse",
    "description": "Reverses the `Order` of a `Bounded` and flips `maxBound` and `minBound` values.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "utils",
    "signature": "declare const reverse: <A>(B: Bounded<A>) => Bounded<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L69"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bounded",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Bounded<A> {\n  readonly compare: Order<A>\n  readonly maxBound: A\n  readonly minBound: A\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L15"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Bounded.ts",
      "path": "src/Bounded.ts"
    },
    "project": "@effect/typeclass",
    "name": "BoundedTypeLambda",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type lambdas",
    "signature": "export interface BoundedTypeLambda extends TypeLambda {\n  readonly type: Bounded<this[\"Target\"]>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Bounded.ts#L25"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Chainable.ts",
      "path": "src/Chainable.ts"
    },
    "project": "@effect/typeclass",
    "name": "zipLeft",
    "description": "Sequences the specified effect after this effect, but ignores the value\nproduced by the effect.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combining",
    "signature": "declare const zipLeft: <F extends TypeLambda>(F: Chainable<F>) => { <R2, O2, E2, _>(that: Kind<F, R2, O2, E2, _>): <R1, O1, E1, A>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, A>; <R1, O1, E1, A, R2, O2, E2, _>(self: Kind<F, R1, O1, E1, A>, that: Kind<F, R2, O2, E2, _>): Kind<F, R1 & R2, O1 | O2, E1 | E2, A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Chainable.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Chainable.ts",
      "path": "src/Chainable.ts"
    },
    "project": "@effect/typeclass",
    "name": "tap",
    "description": "Returns an effect that effectfully \"peeks\" at the success of this effect.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const tap: <F extends TypeLambda>(F: Chainable<F>) => { <A, R2, O2, E2, _>(f: (a: A) => Kind<F, R2, O2, E2, _>): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, A>; <R1, O1, E1, A, R2, O2, E2, _>(self: Kind<F, R1, O1, E1, A>, f: (a: A) => Kind<F, R2, O2, E2, _>): Kind<F, R1 & R2, O1 | O2, E1 | E2, A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Chainable.ts#L42"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Chainable.ts",
      "path": "src/Chainable.ts"
    },
    "project": "@effect/typeclass",
    "name": "bind",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "do notation",
    "signature": "declare const bind: <F extends TypeLambda>(F: Chainable<F>) => { <N extends string, A extends object, R2, O2, E2, B>(name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Kind<F, R2, O2, E2, B>): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B; }>; <R1, O1, E1, A extends object, N extends string, R2, O2, E2, B>(self: Kind<F, R1, O1, E1, A>, name: Exclude<N, keyof A>, f: (a: NoInfer<A>) => Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Chainable.ts#L63"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Chainable.ts",
      "path": "src/Chainable.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Chainable<F extends TypeLambda> extends FlatMap<F>, Covariant<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Chainable.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Contravariant.ts",
      "path": "src/Contravariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "contramapComposition",
    "description": "Composing two contravariant functors yields a Covariant functor.\n\nReturns a default binary `map` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const contramapComposition: <F extends TypeLambda, G extends TypeLambda>(F: Contravariant<F>, G: Contravariant<G>) => <FR, FO, FE, GR, GO, GE, A, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, f: (a: A) => B) => Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Contravariant.ts#L26"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Contravariant.ts",
      "path": "src/Contravariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "imap",
    "description": "Returns a default `imap` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const imap: <F extends TypeLambda>(contramap: <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (b: B) => A) => Kind<F, R, O, E, B>) => Invariant<F>[\"imap\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Contravariant.ts#L40"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Contravariant.ts",
      "path": "src/Contravariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "Contravariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Contravariant<F extends TypeLambda> extends Invariant<F> {\n  readonly contramap: {\n    <B, A>(f: (b: B) => A): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n    <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (b: B) => A): Kind<F, R, O, E, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Contravariant.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Coproduct.ts",
      "path": "src/Coproduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoid",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const getMonoid: <F extends TypeLambda>(F: Coproduct<F>) => <R, O, E, A>() => Monoid<Kind<F, R, O, E, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Coproduct.ts#L24"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Coproduct.ts",
      "path": "src/Coproduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "Coproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Coproduct<F extends TypeLambda> extends SemiCoproduct<F> {\n  readonly zero: <A>() => Kind<F, unknown, never, never, A>\n\n  readonly coproductAll: <R, O, E, A>(\n    collection: Iterable<Kind<F, R, O, E, A>>\n  ) => Kind<F, R, O, E, A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Coproduct.ts#L13"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "mapComposition",
    "description": "Returns a default `map` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const mapComposition: <F extends TypeLambda, G extends TypeLambda>(F: Covariant<F>, G: Covariant<G>) => <FR, FO, FE, GR, GO, GE, A, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, f: (a: A) => B) => Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L24"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "imap",
    "description": "Returns a default `imap` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const imap: <F extends TypeLambda>(map: <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B) => Kind<F, R, O, E, B>) => Invariant<F>[\"imap\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L38"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "flap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "mapping",
    "signature": "declare const flap: <F extends TypeLambda>(F: Covariant<F>) => { <R, O, E, A, B>(self: Kind<F, R, O, E, (a: A) => B>): (a: A) => Kind<F, R, O, E, B>; <A, R, O, E, B>(a: A, self: Kind<F, R, O, E, (a: A) => B>): Kind<F, R, O, E, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "as",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "mapping",
    "signature": "declare const as: <F extends TypeLambda>(F: Covariant<F>) => { <B>(b: B): <R, O, E, _>(self: Kind<F, R, O, E, _>) => Kind<F, R, O, E, B>; <R, O, E, _, B>(self: Kind<F, R, O, E, _>, b: B): Kind<F, R, O, E, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L59"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "asVoid",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "mapping",
    "signature": "declare const asVoid: <F extends TypeLambda>(F: Covariant<F>) => <R, O, E, _>(self: Kind<F, R, O, E, _>) => Kind<F, R, O, E, void>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L72"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Covariant.ts",
      "path": "src/Covariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Covariant<F extends TypeLambda> extends Invariant<F> {\n  readonly map: {\n    <A, B>(f: (a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n    <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B): Kind<F, R, O, E, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Covariant.ts#L12"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Of: of_.Of<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L109"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L126"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L134"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L144"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L152"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Filterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Filterable: filterable.Filterable<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L162"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Traversable: traversable.Traversable<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L171"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L179"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiApplicative: semiApplicative.SemiApplicative<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L189"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L202"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Applicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Applicative: applicative.Applicative<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L219"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L232"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "Foldable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Foldable: foldable.Foldable<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L243"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "TraversableFilterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const TraversableFilterable: traversableFilterable.TraversableFilterable<ArrayInstances.ReadonlyArrayTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L251"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroup",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemigroup: <A>() => Semigroup<ReadonlyArray<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L262"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Array.ts",
      "path": "src/data/Array.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoid",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getMonoid: <A>() => Monoid<ReadonlyArray<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Array.ts#L268"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupSum",
    "description": "`bigint` semigroup under addition.\n\n**Example**\n\n```ts\nimport { SemigroupSum } from \"@effect/typeclass/data/BigInt\"\n\nconsole.log(SemigroupSum.combine(2n, 3n))\n// 5n\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupSum: semigroup.Semigroup<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L24"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMultiply",
    "description": "`bigint` semigroup under multiplication.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMultiply: semigroup.Semigroup<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L34"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMin",
    "description": "A `Semigroup` that uses the minimum between two values.\n\n**Example**\n\n```ts\nimport { SemigroupMin } from \"@effect/typeclass/data/BigInt\"\n\nconsole.log(SemigroupMin.combine(2n, 3n))\n// 2n\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMin: semigroup.Semigroup<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L66"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMax",
    "description": "A `Semigroup` that uses the maximum between two values.\n\n**Example**\n\n```ts\nimport { SemigroupMax } from \"@effect/typeclass/data/BigInt\"\n\nconsole.log(SemigroupMax.combine(2n, 3n))\n// 3n\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMax: semigroup.Semigroup<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L83"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidSum",
    "description": "`bigint` monoid under addition.\n\nThe `empty` value is `0n`.\n\n**Example**\n\n```ts\nimport { MonoidSum } from \"@effect/typeclass/data/BigInt\"\n\nconsole.log(MonoidSum.combine(2n, 3n))\n// 5n\nconsole.log(MonoidSum.combine(2n, MonoidSum.empty))\n// 2n\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidSum: monoid.Monoid<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L104"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "BigInt.ts",
      "path": "src/data/BigInt.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMultiply",
    "description": "`bigint` monoid under multiplication.\n\nThe `empty` value is `1n`.\n\n**Example**\n\n```ts\nimport { MonoidMultiply } from \"@effect/typeclass/data/BigInt\"\n\nconsole.log(MonoidMultiply.combine(2n, 3n))\n// 6n\nconsole.log(MonoidMultiply.combine(2n, MonoidMultiply.empty))\n// 2n\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMultiply: monoid.Monoid<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/BigInt.ts#L128"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupEvery",
    "description": "`boolean` semigroup under conjunction.\n\n**Example**\n\n```ts\nimport { SemigroupEvery } from \"@effect/typeclass/data/Boolean\"\n\nconsole.log(SemigroupEvery.combine(true, true))\n// true\nconsole.log(SemigroupEvery.combine(true, false))\n// false\nconsole.log(SemigroupEvery.combine(false, true))\n// false\nconsole.log(SemigroupEvery.combine(false, false))\n// false\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupEvery: semigroup.Semigroup<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupSome",
    "description": "`boolean` semigroup under disjunction.\n\n**Example**\n\n```ts\nimport { SemigroupSome } from \"@effect/typeclass/data/Boolean\"\n\nconsole.log(SemigroupSome.combine(true, true))\n// true\nconsole.log(SemigroupSome.combine(true, false))\n// true\nconsole.log(SemigroupSome.combine(false, true))\n// true\nconsole.log(SemigroupSome.combine(false, false))\n// false\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupSome: semigroup.Semigroup<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L64"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupXor",
    "description": "`boolean` semigroup under exclusive disjunction.\n\n**Example**\n\n```ts\nimport { SemigroupXor } from \"@effect/typeclass/data/Boolean\"\n\nconsole.log(SemigroupXor.combine(true, true))\n// false\nconsole.log(SemigroupXor.combine(true, false))\n// true\nconsole.log(SemigroupXor.combine(false, true))\n// true\nconsole.log(SemigroupXor.combine(false, false))\n// false\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupXor: semigroup.Semigroup<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L100"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupEqv",
    "description": "`boolean` semigroup under equivalence.\n\n**Example**\n\n```ts\nimport { SemigroupEqv } from \"@effect/typeclass/data/Boolean\"\n\nconsole.log(SemigroupEqv.combine(true, true))\n// true\nconsole.log(SemigroupEqv.combine(true, false))\n// false\nconsole.log(SemigroupEqv.combine(false, true))\n// false\nconsole.log(SemigroupEqv.combine(false, false))\n// true\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupEqv: semigroup.Semigroup<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidEvery",
    "description": "`boolean` monoid under conjunction, see also {@link SemigroupEvery}.\n\nThe `empty` value is `true`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidEvery: monoid.Monoid<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L133"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidSome",
    "description": "`boolean` monoid under disjunction, see also {@link SemigroupSome}.\n\nThe `empty` value is `false`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidSome: monoid.Monoid<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L143"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidXor",
    "description": "`boolean` monoid under exclusive disjunction, see also {@link SemigroupXor}.\n\nThe `empty` value is `false`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidXor: monoid.Monoid<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L153"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Boolean.ts",
      "path": "src/data/Boolean.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidEqv",
    "description": "`boolean` monoid under equivalence.\n\nThe `empty` value is `true`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidEqv: monoid.Monoid<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Boolean.ts#L163"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bounded",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Bounded: bounded.Bounded<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L13"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupSum",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupSum: semigroup.Semigroup<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L23"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidSum",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidSum: monoid.Monoid<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L29"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMax",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMax: semigroup.Semigroup<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L38"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMax",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMax: monoid.Monoid<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L44"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMin",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMin: semigroup.Semigroup<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L53"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Duration.ts",
      "path": "src/data/Duration.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMin",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMin: monoid.Monoid<Duration.Duration>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Duration.ts#L59"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L51"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L60"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Of: of_.Of<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L68"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L76"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L86"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L94"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L104"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getSemiProduct: (options?: ConcurrencyOptions) => semiProduct.SemiProduct<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L115"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "getProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getProduct: (options?: ConcurrencyOptions) => product_.Product<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L125"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getSemiApplicative: (options?: ConcurrencyOptions) => semiApplicative.SemiApplicative<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L137"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "getApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getApplicative: (options?: ConcurrencyOptions) => applicative.Applicative<Effect.EffectTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L150"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Effect.ts",
      "path": "src/data/Effect.ts"
    },
    "project": "@effect/typeclass",
    "name": "ConcurrencyOptions",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "type ConcurrencyOptions = {\n  readonly concurrency?: Concurrency | undefined\n  readonly batching?: boolean | \"inherit\" | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Effect.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bicovariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Bicovariant: bicovariant.Bicovariant<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L134"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L142"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L151"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Of: of_.Of<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L159"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L167"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L177"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L185"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L195"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L206"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L216"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiApplicative: semiApplicative.SemiApplicative<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L228"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Applicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Applicative: applicative.Applicative<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L239"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiCoproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiCoproduct: semiCoproduct.SemiCoproduct<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L252"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiAlternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiAlternative: semiAlternative.SemiAlternative<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L262"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Foldable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Foldable: foldable.Foldable<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L273"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Either.ts",
      "path": "src/data/Either.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Traversable: traversable.Traversable<Either.EitherTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Either.ts#L284"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L82"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L91"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Of: of_.Of<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L99"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L107"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L125"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L135"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L146"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L156"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiApplicative: semiApplicative.SemiApplicative<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L168"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Applicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Applicative: applicative.Applicative<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L179"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Foldable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Foldable: foldable.Foldable<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L215"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Traversable: traversable.Traversable<IdentityTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L223"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiCoproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemiCoproduct: <A>(S: Semigroup<A>) => semiCoproduct.SemiCoproduct<IdentityTypeLambdaFix<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L192"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiAlternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemiAlternative: <A>(S: Semigroup<A>) => semiAlternative.SemiAlternative<IdentityTypeLambdaFix<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L204"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "IdentityTypeLambda",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type lambdas",
    "signature": "export interface IdentityTypeLambda extends TypeLambda {\n  readonly type: Identity<this[\"Target\"]>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L66"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "IdentityTypeLambdaFix",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type lambdas",
    "signature": "export interface IdentityTypeLambdaFix<A> extends TypeLambda {\n  readonly type: Identity<A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L74"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Identity.ts",
      "path": "src/data/Identity.ts"
    },
    "project": "@effect/typeclass",
    "name": "Identity",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "models",
    "signature": "type A = A",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Identity.ts#L60"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L50"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L59"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Of: of_.Of<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L67"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L75"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L85"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L103"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getSemiProduct: (options?: ConcurrencyOptions) => semiProduct.SemiProduct<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L114"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "getProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getProduct: (options?: ConcurrencyOptions) => product_.Product<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L124"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getSemiApplicative: (options?: ConcurrencyOptions) => semiApplicative.SemiApplicative<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L136"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "getApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "declare const getApplicative: (options?: ConcurrencyOptions) => applicative.Applicative<Micro.MicroTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L149"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Micro.ts",
      "path": "src/data/Micro.ts"
    },
    "project": "@effect/typeclass",
    "name": "ConcurrencyOptions",
    "deprecated": false,
    "examples": [],
    "since": "0.24.40",
    "category": "instances",
    "signature": "type ConcurrencyOptions = {\n  readonly concurrency?: Concurrency | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Micro.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bounded",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Bounded: bounded.Bounded<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L13"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupSum",
    "description": "`number` semigroup under addition.\n\n**Example**\n\n```ts\nimport { SemigroupSum } from \"@effect/typeclass/data/Number\"\n\nconsole.log(SemigroupSum.combine(2, 3))\n// 5\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupSum: semigroup.Semigroup<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L34"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMultiply",
    "description": "`number` semigroup under multiplication.\n\n**Example**\n\n```ts\nimport { SemigroupMultiply } from \"@effect/typeclass/data/Number\"\n\nconsole.log(SemigroupMultiply.combine(2, 3))\n// 6\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMultiply: semigroup.Semigroup<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L51"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMin",
    "description": "A `Semigroup` that uses the minimum between two values.\n\n**Example**\n\n```ts\nimport { SemigroupMin } from \"@effect/typeclass/data/Number\"\n\nconsole.log(SemigroupMin.combine(2, 3))\n// 2\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMin: semigroup.Semigroup<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L83"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupMax",
    "description": "A `Semigroup` that uses the maximum between two values.\n\n**Example**\n\n```ts\nimport { SemigroupMax } from \"@effect/typeclass/data/Number\"\n\nconsole.log(SemigroupMax.combine(2, 3))\n// 3\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemigroupMax: semigroup.Semigroup<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L100"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidSum",
    "description": "`number` monoid under addition.\n\nThe `empty` value is `0`.\n\n**Example**\n\n```ts\nimport { MonoidSum } from \"@effect/typeclass/data/Number\"\n\nconsole.log(MonoidSum.combine(2, 3))\n// 5\nconsole.log(MonoidSum.combine(2, MonoidSum.empty))\n// 2\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidSum: monoid.Monoid<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L121"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMultiply",
    "description": "`number` monoid under multiplication.\n\nThe `empty` value is `1`.\n\n**Example**\n\n```ts\nimport { MonoidMultiply } from \"@effect/typeclass/data/Number\"\n\nconsole.log(MonoidMultiply.combine(2, 3))\n// 6\nconsole.log(MonoidMultiply.combine(2, MonoidMultiply.empty))\n// 2\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMultiply: monoid.Monoid<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L142"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMin",
    "description": "A `Monoid` that uses the minimum between two values.\n\nThe `empty` value is `-Infinity`.\n\n**Example**\n\n```ts\nimport { MonoidMin } from \"@effect/typeclass/data/Number\"\n\nconsole.log(MonoidMin.combine(2, 3))\n// 2\nconsole.log(MonoidMin.combine(2, MonoidMin.empty))\n// 2\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMin: monoid.Monoid<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L163"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Number.ts",
      "path": "src/data/Number.ts"
    },
    "project": "@effect/typeclass",
    "name": "MonoidMax",
    "description": "A `Monoid` that uses the maximum between two values.\n\nThe `empty` value is `Infinity`.\n\n**Example**\n\n```ts\nimport { MonoidMax } from \"@effect/typeclass/data/Number\"\n\nconsole.log(MonoidMax.combine(2, 3))\n// 3\nconsole.log(MonoidMax.combine(2, MonoidMax.empty))\n// 2\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const MonoidMax: monoid.Monoid<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Number.ts#L184"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L81"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L90"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Of: of_.Of<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L98"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Pointed: pointed.Pointed<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L106"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const FlatMap: flatMap_.FlatMap<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L116"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Chainable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Chainable: chainable.Chainable<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L124"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monad: monad.Monad<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L134"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L145"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L155"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiApplicative: semiApplicative.SemiApplicative<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L167"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Applicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Applicative: applicative.Applicative<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L178"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiCoproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiCoproduct: semiCoproduct.SemiCoproduct<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L191"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Coproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Coproduct: coproduct_.Coproduct<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L201"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiAlternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiAlternative: semiAlternative.SemiAlternative<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L213"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Alternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Alternative: alternative.Alternative<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L224"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Foldable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Foldable: foldable.Foldable<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L237"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Filterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Filterable: filterable.Filterable<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L248"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Traversable: traversable.Traversable<Option.OptionTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L257"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Option.ts",
      "path": "src/data/Option.ts"
    },
    "project": "@effect/typeclass",
    "name": "getOptionalMonoid",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getOptionalMonoid: <A>(Semigroup: Semigroup<A>) => Monoid<Option.Option<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Option.ts#L265"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ordering.ts",
      "path": "src/data/Ordering.ts"
    },
    "project": "@effect/typeclass",
    "name": "Semigroup",
    "description": "`Semigroup` instance for `Ordering`, returns the left-most non-zero `Ordering`.\n\n**Example**\n\n```ts\nimport { Semigroup } from \"@effect/typeclass/data/Ordering\"\n\nconsole.log(Semigroup.combine(0, -1))\n// -1\nconsole.log(Semigroup.combine(0, 1))\n// 1\nconsole.log(Semigroup.combine(1, -1))\n// 1\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Semigroup: semigroup.Semigroup<Ordering>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Ordering.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ordering.ts",
      "path": "src/data/Ordering.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monoid",
    "description": "`Monoid` instance for `Ordering`, returns the left-most non-zero `Ordering`.\n\nThe `empty` value is `0`.\n\n**Example**\n\n```ts\nimport { Monoid } from \"@effect/typeclass/data/Ordering\"\n\nconsole.log(Monoid.combine(Monoid.empty, -1))\n// -1\nconsole.log(Monoid.combine(Monoid.empty, 1))\n// 1\nconsole.log(Monoid.combine(1, -1))\n// 1\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monoid: monoid.Monoid<Ordering>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Ordering.ts#L64"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "Contravariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Contravariant: contravariant.Contravariant<Predicate.PredicateTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L57"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Predicate.PredicateTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L66"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Of: of_.Of<Predicate.PredicateTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L74"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<Predicate.PredicateTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L82"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<Predicate.PredicateTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L92"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupEqv",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemigroupEqv: <A>() => Semigroup<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L104"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoidEqv",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getMonoidEqv: <A>() => monoid.Monoid<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L111"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupXor",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemigroupXor: <A>() => Semigroup<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L118"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoidXor",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getMonoidXor: <A>() => monoid.Monoid<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L125"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupSome",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemigroupSome: <A>() => Semigroup<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L132"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoidSome",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getMonoidSome: <A>() => monoid.Monoid<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L152"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupEvery",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getSemigroupEvery: <A>() => Semigroup<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L159"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Predicate.ts",
      "path": "src/data/Predicate.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoidEvery",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getMonoidEvery: <A>() => monoid.Monoid<Predicate.Predicate<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Predicate.ts#L179"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "Covariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Covariant: covariant.Covariant<Record.ReadonlyRecordTypeLambda<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L139"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<Record.ReadonlyRecordTypeLambda<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L155"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "Filterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Filterable: filterable.Filterable<Record.ReadonlyRecordTypeLambda<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L172"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Traversable: traversable.Traversable<Record.ReadonlyRecordTypeLambda<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L188"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "TraversableFilterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const TraversableFilterable: traversableFilterable.TraversableFilterable<Record.ReadonlyRecordTypeLambda<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L205"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getCovariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getCovariant: <K extends string>() => covariant.Covariant<Record.ReadonlyRecordTypeLambda<K>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L128"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getInvariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getInvariant: <K extends string>() => invariant.Invariant<Record.ReadonlyRecordTypeLambda<K>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L145"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getFilterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getFilterable: <K extends string>() => filterable.Filterable<Record.ReadonlyRecordTypeLambda<K>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L161"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getTraversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getTraversable: <K extends string>() => traversable.Traversable<Record.ReadonlyRecordTypeLambda<K>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L178"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getTraversableFilterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const getTraversableFilterable: <K extends string>() => traversableFilterable.TraversableFilterable<Record.ReadonlyRecordTypeLambda<K>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L194"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupUnion",
    "description": "A `Semigroup` that creates a union of two records.\n\nThis `Semigroup` takes two records and combines them into a single record.\nIf a key exists in both records, the provided `Semigroup` instance is used to combine the values for that key.\nIf a key exists in only one of the records, that key-value pair is included as is in the resulting record.\n\nFor example, when using the `MonoidSum`, values for matching keys will be summed.\n\n**Example**\n\n```ts\nimport * as NumberInstances from \"@effect/typeclass/data/Number\"\nimport { getSemigroupUnion } from \"@effect/typeclass/data/Record\"\n\nconsole.log(getSemigroupUnion(NumberInstances.MonoidSum).combine({ a: 1 }, { a: 1, b: 3 }))\n// { a: 2, b: 3 }\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.29.4",
    "category": "instances",
    "signature": "declare const getSemigroupUnion: <A>(value: semigroup.Semigroup<A>) => semigroup.Semigroup<Record.ReadonlyRecord<string, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L229"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getMonoidUnion",
    "description": "A `Monoid` that creates a union of two records.\n\nIt allows combining two records where values for matching keys are combined using the provided `Monoid` instance.\nIf a key exists in only one of the records, that key-value pair is included as is in the resulting record.\n\nThe `empty` value for this `Monoid` is an empty record `{}`.\n\n**Example**\n\n```ts\nimport * as NumberInstances from \"@effect/typeclass/data/Number\"\nimport { getMonoidUnion } from \"@effect/typeclass/data/Record\"\n\nconst monoid = getMonoidUnion(NumberInstances.MonoidSum)\n\nconsole.log(monoid.combine({ a: 1 }, { a: 1, b: 3 }))\n// { a: 2, b: 3 }\n\nconsole.log(monoid.combine({ a: 1 }, monoid.empty))\n// { a: 1 }\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.29.4",
    "category": "instances",
    "signature": "declare const getMonoidUnion: <A>(value: monoid.Monoid<A>) => monoid.Monoid<Record.ReadonlyRecord<string, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L260"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Record.ts",
      "path": "src/data/Record.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroupIntersection",
    "description": "A `Semigroup` that creates an intersection of two records.\n\nThis `Semigroup` takes two records and combines them into a new record containing only the keys that are present in both records.\nThe values for matching keys are combined using the provided `Semigroup` instance.\n\n**Example**\n\n```ts\nimport * as NumberInstances from \"@effect/typeclass/data/Number\"\nimport { getSemigroupIntersection } from \"@effect/typeclass/data/Record\"\n\nconsole.log(getSemigroupIntersection(NumberInstances.MonoidSum).combine({ a: 1 }, { a: 1, b: 3 }))\n// { a: 2 }\n```",
    "deprecated": false,
    "examples": [],
    "since": "0.29.4",
    "category": "instances",
    "signature": "declare const getSemigroupIntersection: <A>(value: semigroup.Semigroup<A>) => semigroup.Semigroup<Record.ReadonlyRecord<string, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Record.ts#L284"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "String.ts",
      "path": "src/data/String.ts"
    },
    "project": "@effect/typeclass",
    "name": "Semigroup",
    "description": "`string` semigroup under concatenation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Semigroup: semigroup.Semigroup<string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/String.ts#L13"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "String.ts",
      "path": "src/data/String.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monoid",
    "description": "`string` monoid under concatenation.\n\nThe `empty` value is `''`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Monoid: monoid.Monoid<string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/String.ts#L23"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Tuple.ts",
      "path": "src/data/Tuple.ts"
    },
    "project": "@effect/typeclass",
    "name": "Bicovariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Bicovariant: bicovariant.Bicovariant<Tuple.TupleTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Tuple.ts#L24"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "partitionMapComposition",
    "description": "Returns a default binary `partitionMap` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const partitionMapComposition: <F extends TypeLambda, G extends TypeLambda>(F: Covariant<F>, G: Filterable<G>) => <FR, FO, FE, GR, GO, GE, A, B, C>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, f: (a: A) => Either.Either<C, B>) => [Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, B>>, Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, C>>]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L40"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "filterMapComposition",
    "description": "Returns a default binary `filterMap` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const filterMapComposition: <F extends TypeLambda, G extends TypeLambda>(F: Covariant<F>, G: Filterable<G>) => <FR, FO, FE, GR, GO, GE, A, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, f: (a: A) => Option.Option<B>) => Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L60"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "compact",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const compact: <F extends TypeLambda>(F: Filterable<F>) => <R, O, E, A>(self: Kind<F, R, O, E, Option.Option<A>>) => Kind<F, R, O, E, A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L72"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "separate",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const separate: <F extends TypeLambda>(F: Filterable<F>) => <R, O, E, A, B>(self: Kind<F, R, O, E, Either.Either<B, A>>) => [Kind<F, R, O, E, A>, Kind<F, R, O, E, B>]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L79"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "filter",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const filter: <F extends TypeLambda>(F: Filterable<F>) => { <C extends A, B extends A, A = C>(refinement: (a: A) => a is B): <R, O, E>(self: Kind<F, R, O, E, C>) => Kind<F, R, O, E, B>; <B extends A, A = B>(predicate: (a: A) => boolean): <R, O, E>(self: Kind<F, R, O, E, B>) => Kind<F, R, O, E, B>; <R, O, E, C extends A, B extends A, A = C>(self: Kind<F, R, O, E, C>, refinement: (a: A) => a is B): Kind<F, R, O, E, B>; <R, O, E, B extends A, A = B>(self: Kind<F, R, O, E, B>, predicate: (a: A) => boolean): Kind<F, R, O, E, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L88"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "partition",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const partition: <F extends TypeLambda>(F: Filterable<F>) => { <C extends A, B extends A, A = C>(refinement: (a: A) => a is B): <R, O, E>(self: Kind<F, R, O, E, C>) => [Kind<F, R, O, E, C>, Kind<F, R, O, E, B>]; <B extends A, A = B>(predicate: (a: A) => boolean): <R, O, E>(self: Kind<F, R, O, E, B>) => [Kind<F, R, O, E, B>, Kind<F, R, O, E, B>]; <R, O, E, C extends A, B extends A, A = C>(self: Kind<F, R, O, E, C>, refinement: (a: A) => a is B): [Kind<F, R, O, E, C>, Kind<F, R, O, E, B>]; <R, O, E, B extends A, A = B>(self: Kind<F, R, O, E, B>, predicate: (a: A) => boolean): [Kind<F, R, O, E, B>, Kind<F, R, O, E, B>]; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L115"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Filterable.ts",
      "path": "src/Filterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "Filterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "models",
    "signature": "export interface Filterable<F extends TypeLambda> extends TypeClass<F> {\n  readonly partitionMap: {\n    <A, B, C>(\n      f: (a: A) => Either.Either<C, B>\n    ): <R, O, E>(self: Kind<F, R, O, E, A>) => [Kind<F, R, O, E, B>, Kind<F, R, O, E, C>]\n    <R, O, E, A, B, C>(\n      self: Kind<F, R, O, E, A>,\n      f: (a: A) => Either.Either<C, B>\n    ): [Kind<F, R, O, E, B>, Kind<F, R, O, E, C>]\n  }\n\n  readonly filterMap: {\n    <A, B>(\n      f: (a: A) => Option.Option<B>\n    ): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n    <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => Option.Option<B>): Kind<F, R, O, E, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Filterable.ts#L16"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FlatMap.ts",
      "path": "src/FlatMap.ts"
    },
    "project": "@effect/typeclass",
    "name": "flatten",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const flatten: <F extends TypeLambda>(F: FlatMap<F>) => <R2, O2, E2, R1, O1, E1, A>(self: Kind<F, R2, O2, E2, Kind<F, R1, O1, E1, A>>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/FlatMap.ts#L26"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FlatMap.ts",
      "path": "src/FlatMap.ts"
    },
    "project": "@effect/typeclass",
    "name": "zipRight",
    "description": "A variant of `flatMap` that ignores the value produced by this effect.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const zipRight: <F extends TypeLambda>(F: FlatMap<F>) => { <R2, O2, E2, B>(that: Kind<F, R2, O2, E2, B>): <R1, O1, E1, _>(self: Kind<F, R1, O1, E1, _>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, B>; <R1, O1, E1, _, R2, O2, E2, B>(self: Kind<F, R1, O1, E1, _>, that: Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/FlatMap.ts#L36"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FlatMap.ts",
      "path": "src/FlatMap.ts"
    },
    "project": "@effect/typeclass",
    "name": "composeK",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const composeK: <F extends TypeLambda>(F: FlatMap<F>) => { <B, R2, O2, E2, C>(bfc: (b: B) => Kind<F, R2, O2, E2, C>): <A, R1, O1, E1>(afb: (a: A) => Kind<F, R1, O1, E1, B>) => (a: A) => Kind<F, R1 & R2, O2 | O1, E2 | E1, C>; <A, R1, O1, E1, B, R2, O2, E2, C>(afb: (a: A) => Kind<F, R1, O1, E1, B>, bfc: (b: B) => Kind<F, R2, O2, E2, C>): (a: A) => Kind<F, R1 & R2, O1 | O2, E1 | E2, C>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/FlatMap.ts#L53"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FlatMap.ts",
      "path": "src/FlatMap.ts"
    },
    "project": "@effect/typeclass",
    "name": "FlatMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface FlatMap<F extends TypeLambda> extends TypeClass<F> {\n  readonly flatMap: {\n    <A, R2, O2, E2, B>(\n      f: (a: A) => Kind<F, R2, O2, E2, B>\n    ): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n    <R1, O1, E1, A, R2, O2, E2, B>(\n      self: Kind<F, R1, O1, E1, A>,\n      f: (a: A) => Kind<F, R2, O2, E2, B>\n    ): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/FlatMap.ts#L11"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "reduceComposition",
    "description": "Returns a default ternary `reduce` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const reduceComposition: <F extends TypeLambda, G extends TypeLambda>(F: Foldable<F>, G: Foldable<G>) => <FR, FO, FE, GR, GO, GE, A, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, b: B, f: (b: B, a: A) => B) => B",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L27"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "toArrayMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const toArrayMap: <F extends TypeLambda>(F: Foldable<F>) => { <A, B>(f: (a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => Array<B>; <R, O, E, A, B>(self: Kind<F, R, O, E, A>, f: (a: A) => B): Array<B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L40"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "toArray",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const toArray: <F extends TypeLambda>(F: Foldable<F>) => <R, O, E, A>(self: Kind<F, R, O, E, A>) => Array<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L55"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "combineMap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const combineMap: <F extends TypeLambda>(F: Foldable<F>) => <M>(M: Monoid<M>) => { <A>(f: (a: A) => M): <R, O, E>(self: Kind<F, R, O, E, A>) => M; <R, O, E, A>(self: Kind<F, R, O, E, A>, f: (a: A) => M): M; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L62"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "reduceKind",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const reduceKind: <F extends TypeLambda>(F: Foldable<F>) => <G extends TypeLambda>(G: Monad<G>) => { <B, A, R, O, E>(b: B, f: (b: B, a: A) => Kind<G, R, O, E, B>): <FR, FO, FE>(self: Kind<F, FR, FO, FE, A>) => Kind<G, R, O, E, B>; <FR, FO, FE, A, B, R, O, E>(self: Kind<F, FR, FO, FE, A>, b: B, f: (b: B, a: A) => Kind<G, R, O, E, B>): Kind<G, R, O, E, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L75"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "coproductMapKind",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const coproductMapKind: <F extends TypeLambda>(F: Foldable<F>) => <G extends TypeLambda>(G: Coproduct<G>) => { <A, R, O, E, B>(f: (a: A) => Kind<G, R, O, E, B>): <FR, FO, FE>(self: Kind<F, FR, FO, FE, A>) => Kind<G, R, O, E, B>; <FR, FO, FE, A, R, O, E, B>(self: Kind<F, FR, FO, FE, A>, f: (a: A) => Kind<G, R, O, E, B>): Kind<G, R, O, E, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L101"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Foldable.ts",
      "path": "src/Foldable.ts"
    },
    "project": "@effect/typeclass",
    "name": "Foldable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Foldable<F extends TypeLambda> extends TypeClass<F> {\n  readonly reduce: {\n    <A, B>(b: B, f: (b: B, a: A) => B): <R, O, E>(self: Kind<F, R, O, E, A>) => B\n    <R, O, E, A, B>(self: Kind<F, R, O, E, A>, b: B, f: (b: B, a: A) => B): B\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Foldable.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Invariant.ts",
      "path": "src/Invariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "imapComposition",
    "description": "Returns a default ternary `imap` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const imapComposition: <F extends TypeLambda, G extends TypeLambda>(F: Invariant<F>, G: Invariant<G>) => <FR, FO, FE, GR, GO, GE, A, B>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, to: (a: A) => B, from: (b: B) => A) => Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Invariant.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Invariant.ts",
      "path": "src/Invariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "bindTo",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "do notation",
    "signature": "declare const bindTo: <F extends TypeLambda>(F: Invariant<F>) => { <N extends string>(name: N): <R, O, E, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, { [K in N]: A; }>; <R, O, E, A, N extends string>(self: Kind<F, R, O, E, A>, name: N): Kind<F, R, O, E, { [K in N]: A; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Invariant.ts#L49"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Invariant.ts",
      "path": "src/Invariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "tupled",
    "description": "Convert a value in a singleton array in a given effect.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const tupled: <F extends TypeLambda>(F: Invariant<F>) => <R, O, E, A>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, [A]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Invariant.ts#L68"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Invariant.ts",
      "path": "src/Invariant.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Invariant<F extends TypeLambda> extends TypeClass<F> {\n  readonly imap: {\n    <A, B>(\n      to: (a: A) => B,\n      from: (b: B) => A\n    ): <R, O, E>(self: Kind<F, R, O, E, A>) => Kind<F, R, O, E, B>\n    <R, O, E, A, B>(\n      self: Kind<F, R, O, E, A>,\n      to: (a: A) => B,\n      from: (b: B) => A\n    ): Kind<F, R, O, E, B>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Invariant.ts#L16"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Monad.ts",
      "path": "src/Monad.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monad",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Monad<F extends TypeLambda> extends FlatMap<F>, Pointed<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monad.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "fromSemigroup",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const fromSemigroup: <A>(S: Semigroup<A>, empty: Monoid<A>[\"empty\"]) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L21"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "min",
    "description": "Get a monoid where `combine` will return the minimum, based on the provided bounded order.\n\nThe `empty` value is the `maxBound` value.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const min: <A>(B: Bounded<A>) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L36"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "max",
    "description": "Get a monoid where `combine` will return the maximum, based on the provided bounded order.\n\nThe `empty` value is the `minimum` value.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const max: <A>(B: Bounded<A>) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "reverse",
    "description": "The dual of a `Monoid`, obtained by swapping the arguments of `combine`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const reverse: <A>(M: Monoid<A>) => Monoid<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L54"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "tuple",
    "description": "Similar to `Promise.all` but operates on `Monoid`s.\n\n```\n[Monoid<A>, Monoid<B>, ...] -> Monoid<[A, B, ...]>\n```\n\nThis function creates and returns a new `Monoid` for a tuple of values based on the given `Monoid`s for each element in the tuple.\nThe returned `Monoid` combines two tuples of the same type by applying the corresponding `Monoid` passed as arguments to each element in the tuple.\n\nThe `empty` value of the returned `Monoid` is the tuple of `empty` values of the input `Monoid`s.\n\nIt is useful when you need to combine two tuples of the same type and you have a specific way of combining each element of the tuple.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const tuple: <T extends ReadonlyArray<Monoid<any>>>(...elements: T) => Monoid<{ readonly [I in keyof T]: [T[I]] extends [Monoid<infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L73"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "array",
    "description": "Given a type `A`, this function creates and returns a `Semigroup` for `ReadonlyArray<A>`.\n\nThe `empty` value is the empty array.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const array: <A>() => Monoid<ReadonlyArray<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L88"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "struct",
    "description": "This function creates and returns a new `Monoid` for a struct of values based on the given `Monoid`s for each property in the struct.\nThe returned `Monoid` combines two structs of the same type by applying the corresponding `Monoid` passed as arguments to each property in the struct.\n\nThe `empty` value of the returned `Monoid` is a struct where each property is the `empty` value of the corresponding `Monoid` in the input `monoids` object.\n\nIt is useful when you need to combine two structs of the same type and you have a specific way of combining each property of the struct.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const struct: <R extends { readonly [x: string]: Monoid<any>; }>(fields: R) => Monoid<{ readonly [K in keyof R]: [R[K]] extends [Monoid<infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L101"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Monoid.ts",
      "path": "src/Monoid.ts"
    },
    "project": "@effect/typeclass",
    "name": "Monoid",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Monoid<A> extends Semigroup<A> {\n  readonly empty: A\n  readonly combineAll: (collection: Iterable<A>) => A\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Monoid.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Of.ts",
      "path": "src/Of.ts"
    },
    "project": "@effect/typeclass",
    "name": "ofComposition",
    "description": "Returns a default `of` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const ofComposition: <F extends TypeLambda, G extends TypeLambda>(F: Of<F>, G: Of<G>) => <A>(a: A) => Kind<F, unknown, never, never, Kind<G, unknown, never, never, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Of.ts#L19"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Of.ts",
      "path": "src/Of.ts"
    },
    "project": "@effect/typeclass",
    "name": "Do",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "do notation",
    "signature": "declare const Do: <F extends TypeLambda>(F: Of<F>) => <R = unknown, O = never, E = never>() => Kind<F, R, O, E, {}>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Of.ts#L40"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Of.ts",
      "path": "src/Of.ts"
    },
    "project": "@effect/typeclass",
    "name": "Of",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Of<F extends TypeLambda> extends TypeClass<F> {\n  readonly of: <A>(a: A) => Kind<F, unknown, never, never, A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Of.ts#L10"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Pointed.ts",
      "path": "src/Pointed.ts"
    },
    "project": "@effect/typeclass",
    "name": "Pointed",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Pointed<F extends TypeLambda> extends Covariant<F>, Of<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Pointed.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Product.ts",
      "path": "src/Product.ts"
    },
    "project": "@effect/typeclass",
    "name": "tuple",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const tuple: <F extends TypeLambda>(F: Product<F>) => <T extends ReadonlyArray<Kind<F, any, any, any, any>>>(...elements: T) => Kind<F, ([T[number]] extends [Kind<F, infer R, any, any, any>] ? R : never), (T[number] extends never ? never : [T[number]] extends [Kind<F, any, infer O, any, any>] ? O : never), (T[number] extends never ? never : [T[number]] extends [Kind<F, any, any, infer E, any>] ? E : never), { [I in keyof T]: [T[I]] extends [Kind<F, any, any, any, infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Product.ts#L22"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Product.ts",
      "path": "src/Product.ts"
    },
    "project": "@effect/typeclass",
    "name": "struct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const struct: <F extends TypeLambda>(F: Product<F>) => <R extends { readonly [x: string]: Kind<F, any, any, any, any>; }>(fields: R) => Kind<F, ([R[keyof R]] extends [Kind<F, infer R, any, any, any>] ? R : never), (R[keyof R] extends never ? never : [R[keyof R]] extends [Kind<F, any, infer O, any, any>] ? O : never), (R[keyof R] extends never ? never : [R[keyof R]] extends [Kind<F, any, any, infer E, any>] ? E : never), { [K in keyof R]: [R[K]] extends [Kind<F, any, any, any, infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Product.ts#L43"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Product.ts",
      "path": "src/Product.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Product<F extends TypeLambda> extends SemiProduct<F>, Of<F> {\n  readonly productAll: <R, O, E, A>(\n    collection: Iterable<Kind<F, R, O, E, A>>\n  ) => Kind<F, R, O, E, Array<A>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Product.ts#L13"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SemiAlternative.ts",
      "path": "src/SemiAlternative.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiAlternative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface SemiAlternative<F extends TypeLambda> extends SemiCoproduct<F>, Covariant<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiAlternative.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroup",
    "description": "Lift a `Semigroup` into 'F', the inner values are combined using the provided `Semigroup`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "lifting",
    "signature": "declare const getSemigroup: <F extends TypeLambda>(F: SemiApplicative<F>) => <A, R, O, E>(S: Semigroup<A>) => Semigroup<Kind<F, R, O, E, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "zipWith",
    "description": "Zips two `F` values together using a provided function, returning a new `F` of the result.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const zipWith: <F extends TypeLambda>(F: SemiApplicative<F>) => { <R2, O2, E2, B, A, C>(that: Kind<F, R2, O2, E2, B>, f: (a: A, b: B) => C): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, C>; <R1, O1, E1, A, R2, O2, E2, B, C>(self: Kind<F, R1, O1, E1, A>, that: Kind<F, R2, O2, E2, B>, f: (a: A, b: B) => C): Kind<F, R1 & R2, O1 | O2, E1 | E2, C>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "ap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const ap: <F extends TypeLambda>(F: SemiApplicative<F>) => { <R2, O2, E2, A>(that: Kind<F, R2, O2, E2, A>): <R1, O1, E1, B>(self: Kind<F, R1, O1, E1, (a: A) => B>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, B>; <R1, O1, E1, A, B, R2, O2, E2>(self: Kind<F, R1, O1, E1, (a: A) => B>, that: Kind<F, R2, O2, E2, A>): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L58"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "zipLeft",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const zipLeft: <F extends TypeLambda>(F: SemiApplicative<F>) => { <R2, O2, E2, _>(that: Kind<F, R2, O2, E2, _>): <R1, O1, E1, A>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, A>; <R1, O1, E1, A, R2, O2, E2, _>(self: Kind<F, R1, O1, E1, A>, that: Kind<F, R2, O2, E2, _>): Kind<F, R1 & R2, O1 | O2, E1 | E2, A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L77"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "zipRight",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const zipRight: <F extends TypeLambda>(F: SemiApplicative<F>) => { <R2, O2, E2, B>(that: Kind<F, R2, O2, E2, B>): <R1, O1, E1, _>(self: Kind<F, R1, O1, E1, _>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, B>; <R1, O1, E1, _, R2, O2, E2, B>(self: Kind<F, R1, O1, E1, _>, that: Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L94"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "lift2",
    "description": "Lifts a binary function into `F`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "lifting",
    "signature": "declare const lift2: <F extends TypeLambda>(F: SemiApplicative<F>) => <A, B, C>(f: (a: A, b: B) => C) => { <R2, O2, E2>(that: Kind<F, R2, O2, E2, B>): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, C>; <R1, O1, E1, R2, O2, E2>(self: Kind<F, R1, O1, E1, A>, that: Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, C>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L114"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SemiApplicative.ts",
      "path": "src/SemiApplicative.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiApplicative",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface SemiApplicative<F extends TypeLambda> extends SemiProduct<F>, Covariant<F> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiApplicative.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiCoproduct.ts",
      "path": "src/SemiCoproduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "getSemigroup",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const getSemigroup: <F extends TypeLambda>(F: SemiCoproduct<F>) => <R, O, E, A>() => Semigroup<Kind<F, R, O, E, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiCoproduct.ts#L28"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SemiCoproduct.ts",
      "path": "src/SemiCoproduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiCoproduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface SemiCoproduct<F extends TypeLambda> extends Invariant<F> {\n  readonly coproduct: <R1, O1, E1, A, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    that: Kind<F, R2, O2, E2, B>\n  ) => Kind<F, R1 & R2, O1 | O2, E1 | E2, A | B>\n\n  readonly coproductMany: <R, O, E, A>(\n    self: Kind<F, R, O, E, A>,\n    collection: Iterable<Kind<F, R, O, E, A>>\n  ) => Kind<F, R, O, E, A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiCoproduct.ts#L13"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "intercalate",
    "description": "The `intercalate` API returns a function that takes a `Semigroup` instance and a separator value, and returns a new\n`Semigroup` instance that combines values with the given separator.\n\nThis API is useful when you want to combine values with a specific separator. For example, when you want to concatenate\nan array of strings with a separator string in between.\n\nIt is interesting to note that there is no equivalent API in the `Monoid` module. This is because the value `empty`,\nwhich is required for the `Monoid` interface, cannot exist.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const intercalate: { <A>(separator: A): (S: Semigroup<A>) => Semigroup<A>; <A>(S: Semigroup<A>, separator: A): Semigroup<A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L95"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "imap",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const imap: { <A, B>(to: (a: A) => B, from: (b: B) => A): (self: Semigroup<A>) => Semigroup<B>; <A, B>(self: Semigroup<A>, to: (a: A) => B, from: (b: B) => A): Semigroup<B>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L131"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "Invariant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Invariant: invariant.Invariant<SemigroupTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L144"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const SemiProduct: semiProduct.SemiProduct<SemigroupTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L179"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "Product",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const Product: product_.Product<SemigroupTypeLambda>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L191"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "tuple",
    "description": "Similar to `Promise.all` but operates on `Semigroup`s.\n\n```\n[Semigroup<A>, Semigroup<B>, ...] -> Semigroup<[A, B, ...]>\n```\n\nThis function creates and returns a new `Semigroup` for a tuple of values based on the given `Semigroup`s for each element in the tuple.\nThe returned `Semigroup` combines two tuples of the same type by applying the corresponding `Semigroup` passed as arguments to each element in the tuple.\n\nIt is useful when you need to combine two tuples of the same type and you have a specific way of combining each element of the tuple.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const tuple: <T extends ReadonlyArray<Semigroup<any>>>(...elements: T) => Semigroup<{ readonly [I in keyof T]: [T[I]] extends [Semigroup<infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L214"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "struct",
    "description": "This function creates and returns a new `Semigroup` for a struct of values based on the given `Semigroup`s for each property in the struct.\nThe returned `Semigroup` combines two structs of the same type by applying the corresponding `Semigroup` passed as arguments to each property in the struct.\n\nIt is useful when you need to combine two structs of the same type and you have a specific way of combining each property of the struct.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const struct: <R extends { readonly [x: string]: Semigroup<any>; }>(fields: R) => Semigroup<{ readonly [K in keyof R]: [R[K]] extends [Semigroup<infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L236"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "make",
    "description": "The `combineMany` parameter is optional and defaults to a standard\nimplementation. You can provide a custom implementation when performance\noptimizations are possible.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const make: <A>(combine: Semigroup<A>[\"combine\"], combineMany?: Semigroup<A>[\"combineMany\"]) => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "min",
    "description": "`Semigroup` that returns last minimum of elements.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const min: <A>(O: Order<A>) => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L51"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "max",
    "description": "`Semigroup` that returns last maximum of elements.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const max: <A>(O: Order<A>) => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L59"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "constant",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const constant: <A>(a: A) => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L65"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "reverse",
    "description": "The dual of a `Semigroup`, obtained by flipping the arguments of `combine`.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const reverse: <A>(S: Semigroup<A>) => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L72"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "first",
    "description": "Always return the first argument.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const first: <A = never>() => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L109"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "last",
    "description": "Always return the last argument.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "instances",
    "signature": "declare const last: <A = never>() => Semigroup<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L117"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "array",
    "description": "Given a type `A`, this function creates and returns a `Semigroup` for `ReadonlyArray<A>`.\nThe returned `Semigroup` combines two arrays by concatenating them.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "combinators",
    "signature": "declare const array: <A>() => Semigroup<ReadonlyArray<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L225"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "Semigroup",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Semigroup<A> {\n  readonly combine: (self: A, that: A) => A\n  readonly combineMany: (self: A, collection: Iterable<A>) => A\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L16"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Semigroup.ts",
      "path": "src/Semigroup.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemigroupTypeLambda",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type lambdas",
    "signature": "export interface SemigroupTypeLambda extends TypeLambda {\n  readonly type: Semigroup<this[\"Target\"]>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Semigroup.ts#L25"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "productMany",
    "description": "Returns a default `productMany` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "constructors",
    "signature": "declare const productMany: <F extends TypeLambda>(map: Covariant<F>[\"map\"], product: SemiProduct<F>[\"product\"]) => SemiProduct<F>[\"productMany\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L32"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "productComposition",
    "description": "Returns a default `product` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const productComposition: <F extends TypeLambda, G extends TypeLambda>(F: SemiApplicative<F>, G: SemiProduct<G>) => <FR1, FO1, FE1, GR1, GO1, GE1, A, FR2, FO2, FE2, GR2, GO2, GE2, B>(self: Kind<F, FR1, FO1, FE1, Kind<G, GR1, GO1, GE1, A>>, that: Kind<F, FR2, FO2, FE2, Kind<G, GR2, GO2, GE2, B>>) => Kind<F, FR1 & FR2, FO1 | FO2, FE1 | FE2, Kind<G, GR1 & GR2, GO1 | GO2, GE1 | GE2, [A, B]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L55"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "productManyComposition",
    "description": "Returns a default `productMany` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const productManyComposition: <F extends TypeLambda, G extends TypeLambda>(F: SemiApplicative<F>, G: SemiProduct<G>) => <FR, FO, FE, GR, GO, GE, A>(self: Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>, collection: Iterable<Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, A>>>) => Kind<F, FR, FO, FE, Kind<G, GR, GO, GE, [A, ...Array<A>]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L75"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "andThenBind",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "do notation",
    "signature": "declare const andThenBind: <F extends TypeLambda>(F: SemiProduct<F>) => { <N extends string, A extends object, R2, O2, E2, B>(name: Exclude<N, keyof A>, that: Kind<F, R2, O2, E2, B>): <R1, O1, E1>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B; }>; <R1, O1, E1, A extends object, N extends string, R2, O2, E2, B>(self: Kind<F, R1, O1, E1, A>, name: Exclude<N, keyof A>, that: Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, { [K in keyof A | N]: K extends keyof A ? A[K] : B; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L89"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "appendElement",
    "description": "Appends an element to the end of a tuple.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const appendElement: <F extends TypeLambda>(F: SemiProduct<F>) => { <R2, O2, E2, B>(that: Kind<F, R2, O2, E2, B>): <R1, O1, E1, A extends ReadonlyArray<any>>(self: Kind<F, R1, O1, E1, A>) => Kind<F, R1 & R2, O2 | O1, E2 | E1, [...A, B]>; <R1, O1, E1, A extends ReadonlyArray<any>, R2, O2, E2, B>(self: Kind<F, R1, O1, E1, A>, that: Kind<F, R2, O2, E2, B>): Kind<F, R1 & R2, O1 | O2, E1 | E2, [...A, B]>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L118"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "nonEmptyTuple",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const nonEmptyTuple: <F extends TypeLambda>(F: SemiProduct<F>) => <T extends readonly [Kind<F, any, any, any, any>, ...Array<Kind<F, any, any, any, any>>]>(...elements: T) => Kind<F, ([T[number]] extends [Kind<F, infer R, any, any, any>] ? R : never), ([T[number]] extends [Kind<F, any, infer O, any, any>] ? O : never), ([T[number]] extends [Kind<F, any, any, infer E, any>] ? E : never), { [I in keyof T]: [T[I]] extends [Kind<F, any, any, any, infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L138"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "nonEmptyStruct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const nonEmptyStruct: <F extends TypeLambda>(F: SemiProduct<F>) => <R extends { readonly [x: string]: Kind<F, any, any, any, any>; }>(fields: EnforceNonEmptyRecord<R> & { readonly [x: string]: Kind<F, any, any, any, any>; }) => Kind<F, ([R[keyof R]] extends [Kind<F, infer R, any, any, any>] ? R : never), ([R[keyof R]] extends [Kind<F, any, infer O, any, any>] ? O : never), ([R[keyof R]] extends [Kind<F, any, any, infer E, any>] ? E : never), { [K in keyof R]: [R[K]] extends [Kind<F, any, any, any, infer A>] ? A : never; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L161"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SemiProduct.ts",
      "path": "src/SemiProduct.ts"
    },
    "project": "@effect/typeclass",
    "name": "SemiProduct",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface SemiProduct<F extends TypeLambda> extends Invariant<F> {\n  readonly product: <R1, O1, E1, A, R2, O2, E2, B>(\n    self: Kind<F, R1, O1, E1, A>,\n    that: Kind<F, R2, O2, E2, B>\n  ) => Kind<F, R1 & R2, O1 | O2, E1 | E2, [A, B]>\n\n  readonly productMany: <R, O, E, A>(\n    self: Kind<F, R, O, E, A>,\n    collection: Iterable<Kind<F, R, O, E, A>>\n  ) => Kind<F, R, O, E, [A, ...Array<A>]>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/SemiProduct.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Traversable.ts",
      "path": "src/Traversable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traverseComposition",
    "description": "Returns a default binary `traverse` composition.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traverseComposition: <T extends TypeLambda, G extends TypeLambda>(T: Traversable<T>, G: Traversable<G>) => <F extends TypeLambda>(F: Applicative<F>) => <TR, TO, TE, GR, GO, GE, A, R, O, E, B>(self: Kind<T, TR, TO, TE, Kind<G, GR, GO, GE, A>>, f: (a: A) => Kind<F, R, O, E, B>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, Kind<G, GR, GO, GE, B>>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Traversable.ts#L31"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Traversable.ts",
      "path": "src/Traversable.ts"
    },
    "project": "@effect/typeclass",
    "name": "sequence",
    "description": "Returns a default `sequence` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const sequence: <T extends TypeLambda>(T: Traversable<T>) => <F extends TypeLambda>(F: Applicative<F>) => <TR, TO, TE, R, O, E, A>(self: Kind<T, TR, TO, TE, Kind<F, R, O, E, A>>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Traversable.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Traversable.ts",
      "path": "src/Traversable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traverseTap",
    "description": "Given a function which returns a `F` effect, thread this effect\nthrough the running of this function on all the values in `T`,\nreturning an `T<A>` in a `F` context, ignoring the values\nreturned by the provided function.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traverseTap: <T extends TypeLambda>(T: Traversable<T>) => <F extends TypeLambda>(F: Applicative<F>) => { <A, R, O, E, B>(f: (a: A) => Kind<F, R, O, E, B>): <TR, TO, TE>(self: Kind<T, TR, TO, TE, A>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, A>>; <TR, TO, TE, A, R, O, E, B>(self: Kind<T, TR, TO, TE, A>, f: (a: A) => Kind<F, R, O, E, B>): Kind<F, R, O, E, Kind<T, TR, TO, TE, A>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Traversable.ts#L61"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Traversable.ts",
      "path": "src/Traversable.ts"
    },
    "project": "@effect/typeclass",
    "name": "Traversable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "type class",
    "signature": "export interface Traversable<T extends TypeLambda> extends TypeClass<T> {\n  readonly traverse: <F extends TypeLambda>(\n    F: Applicative<F>\n  ) => {\n    <A, R, O, E, B>(\n      f: (a: A) => Kind<F, R, O, E, B>\n    ): <TR, TO, TE>(self: Kind<T, TR, TO, TE, A>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>\n    <TR, TO, TE, A, R, O, E, B>(\n      self: Kind<T, TR, TO, TE, A>,\n      f: (a: A) => Kind<F, R, O, E, B>\n    ): Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/Traversable.ts#L12"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "TraversableFilterable.ts",
      "path": "src/TraversableFilterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traversePartitionMap",
    "description": "Returns a default binary `traversePartitionMap` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traversePartitionMap: <T extends TypeLambda>(T: Traversable<T> & Covariant<T> & Filterable<T>) => <F extends TypeLambda>(F: Applicative<F>) => <TR, TO, TE, A, R, O, E, B, C>(self: Kind<T, TR, TO, TE, A>, f: (a: A) => Kind<F, R, O, E, Either<C, B>>) => Kind<F, R, O, E, [Kind<T, TR, TO, TE, B>, Kind<T, TR, TO, TE, C>]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/TraversableFilterable.ts#L55"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "TraversableFilterable.ts",
      "path": "src/TraversableFilterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traverseFilterMap",
    "description": "Returns a default binary `traverseFilterMap` implementation.",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traverseFilterMap: <T extends TypeLambda>(T: Traversable<T> & Filterable<T>) => <F extends TypeLambda>(F: Applicative<F>) => <TR, TO, TE, A, R, O, E, B>(self: Kind<T, TR, TO, TE, A>, f: (a: A) => Kind<F, R, O, E, Option<B>>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/TraversableFilterable.ts#L71"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "TraversableFilterable.ts",
      "path": "src/TraversableFilterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traverseFilter",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traverseFilter: <T extends TypeLambda>(T: TraversableFilterable<T>) => <F extends TypeLambda>(F: Applicative<F>) => { <B extends A, R, O, E, A = B>(predicate: (a: A) => Kind<F, R, O, E, boolean>): <TR, TO, TE>(self: Kind<T, TR, TO, TE, B>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>; <TR, TO, TE, B extends A, R, O, E, A = B>(self: Kind<T, TR, TO, TE, B>, predicate: (a: A) => Kind<F, R, O, E, boolean>): Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/TraversableFilterable.ts#L85"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "TraversableFilterable.ts",
      "path": "src/TraversableFilterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "traversePartition",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": null,
    "signature": "declare const traversePartition: <T extends TypeLambda>(T: TraversableFilterable<T>) => <F extends TypeLambda>(F: Applicative<F>) => { <B extends A, R, O, E, A = B>(predicate: (a: A) => Kind<F, R, O, E, boolean>): <TR, TO, TE>(self: Kind<T, TR, TO, TE, B>) => Kind<F, R, O, E, [Kind<T, TR, TO, TE, B>, Kind<T, TR, TO, TE, B>]>; <TR, TO, TE, B extends A, R, O, E, A = B>(self: Kind<T, TR, TO, TE, B>, predicate: (a: A) => Kind<F, R, O, E, boolean>): Kind<F, R, O, E, [Kind<T, TR, TO, TE, B>, Kind<T, TR, TO, TE, B>]>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/TraversableFilterable.ts#L113"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "TraversableFilterable.ts",
      "path": "src/TraversableFilterable.ts"
    },
    "project": "@effect/typeclass",
    "name": "TraversableFilterable",
    "deprecated": false,
    "examples": [],
    "since": "0.24.0",
    "category": "models",
    "signature": "export interface TraversableFilterable<T extends TypeLambda> extends TypeClass<T> {\n  readonly traversePartitionMap: <F extends TypeLambda>(\n    F: Applicative<F>\n  ) => {\n    <A, R, O, E, B, C>(\n      f: (a: A) => Kind<F, R, O, E, Either<C, B>>\n    ): <TR, TO, TE>(\n      self: Kind<T, TR, TO, TE, A>\n    ) => Kind<F, R, O, E, [Kind<T, TR, TO, TE, B>, Kind<T, TR, TO, TE, C>]>\n    <TR, TO, TE, A, R, O, E, B, C>(\n      self: Kind<T, TR, TO, TE, A>,\n      f: (a: A) => Kind<F, R, O, E, Either<C, B>>\n    ): Kind<F, R, O, E, [Kind<T, TR, TO, TE, B>, Kind<T, TR, TO, TE, C>]>\n  }\n\n  readonly traverseFilterMap: <F extends TypeLambda>(\n    F: Applicative<F>\n  ) => {\n    <A, R, O, E, B>(\n      f: (a: A) => Kind<F, R, O, E, Option<B>>\n    ): <TR, TO, TE>(self: Kind<T, TR, TO, TE, A>) => Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>\n    <TR, TO, TE, A, R, O, E, B>(\n      self: Kind<T, TR, TO, TE, A>,\n      f: (a: A) => Kind<F, R, O, E, Option<B>>\n    ): Kind<F, R, O, E, Kind<T, TR, TO, TE, B>>\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/typeclass/src/TraversableFilterable.ts#L22"
  }
]