[
  {
    "_tag": "Constant",
    "module": {
      "name": "Activity.ts",
      "path": "src/Activity.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "currentAttempt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const currentAttempt: Effect.Effect<number, never, ActivityContext.ActivityContext>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Activity.ts",
      "path": "src/Activity.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "persistenceId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const persistenceId: Effect.Effect<string, never, ActivityContext.ActivityContext>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Activity.ts",
      "path": "src/Activity.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const make: <A, IA, E, IE>(activityId: string, successSchema: Schema.Schema<A, IA>, failureSchema: Schema.Schema<E, IE>) => <R>(execute: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, ActivityContext.ActivityContext> | WorkflowContext.WorkflowContext>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ActivityContext.ts",
      "path": "src/ActivityContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "ActivityContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const ActivityContextTypeId: unique symbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ActivityContext.ts",
      "path": "src/ActivityContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "ActivityContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const ActivityContext: Context.Tag<ActivityContext, ActivityContext>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "ActivityContext.ts",
      "path": "src/ActivityContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "ActivityContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface ActivityContext {\n  persistenceId: string\n  currentAttempt: number\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "ActivityContext.ts",
      "path": "src/ActivityContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "ActivityContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "type ActivityContextTypeId = typeof ActivityContextTypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "CrashableRuntimeCrashedError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class CrashableRuntimeCrashedError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "CrashableRuntimeScheduler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class CrashableRuntimeScheduler { constructor(readonly baseScheduler: Scheduler.Scheduler) }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const make: Effect.Effect<CrashableRuntime, never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "isCrashableRuntimeCrashedError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const isCrashableRuntimeCrashedError: (value: unknown) => value is CrashableRuntimeCrashedError"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "retryWhileCrashes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const retryWhileCrashes: <R, E, A>(fn: (runtime: CrashableRuntime) => Effect.Effect<R, E | CrashableRuntimeCrashedError, A>) => Effect.Effect<R, Exclude<E, CrashableRuntimeCrashedError>, A>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "runWithCrash",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const runWithCrash: <R, E, A>(fn: (crash: Effect.Effect<never>) => Effect.Effect<R, E | CrashableRuntimeCrashedError, A>) => Effect.Effect<R, E | CrashableRuntimeCrashedError, A>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "CrashableRuntime.ts",
      "path": "src/CrashableRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "CrashableRuntime",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface CrashableRuntime {\n  /**\n   * @since 1.0.0\n   */\n  crash: Effect.Effect<void>\n\n  /**\n   * @since 1.0.0\n   */\n  run: <A, E, R>(\n    fn: (restore: <A2, E2, R2>(fa: Effect.Effect<A2, E2, R2>) => Effect.Effect<A2, E2, R2>) => Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | CrashableRuntimeCrashedError, R>\n}"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Attempted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const Attempted: (version: string) => (sequence: number) => DurableExecutionEvent<never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Completed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const Completed: <A, E>(exit: Exit.Exit<A, E>) => (sequence: number) => DurableExecutionEvent<A, E>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "KillRequested",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const KillRequested: (sequence: number) => DurableExecutionEvent<never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Forked",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const Forked: (persistenceId: string) => (sequence: number) => DurableExecutionEvent<never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Joined",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const Joined: (persistenceId: string) => (sequence: number) => DurableExecutionEvent<never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "schema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const schema: <A, IA, E, IE>(success: Schema.Schema<A, IA>, failure: Schema.Schema<E, IE>) => Schema.Schema<DurableExecutionEvent<A, E>, DurableExecutionEventFrom<IA, IE>>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "match",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const match: <A, E, B, C = B, D = C, F = D, G = F>(event: DurableExecutionEvent<A, E>, fns: { onAttempted: (event: Attempted) => B; onInterruptionRequested: (event: InterruptionRequested) => C; onCompleted: (event: Completed<A, E>) => D; onForked: (event: Forked) => F; onJoined: (event: Joined) => G; }) => B | C | D | F | G"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Attempted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Attempted {\n  _tag: typeof ATTEMPTED\n  sequence: number\n  version: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Completed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Completed<A, E> {\n  _tag: typeof COMPLETED\n  sequence: number\n  exit: Exit.Exit<A, E>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "InterruptionRequested",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface InterruptionRequested {\n  _tag: typeof INTERRUPTION_REQUESTED\n  sequence: number\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Forked",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Forked {\n  _tag: typeof FORKED\n  sequence: number\n  persistenceId: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Joined",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Joined {\n  _tag: typeof JOINED\n  sequence: number\n  persistenceId: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type DurableExecutionEvent<A, E> = | Attempted\n  | InterruptionRequested\n  | Completed<A, E>\n  | Forked\n  | Joined"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "DurableExecutionEvent.ts",
      "path": "src/DurableExecutionEvent.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionEventFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type DurableExecutionEventFrom<IE, IA> = {\n  readonly _tag: typeof ATTEMPTED\n  readonly sequence: number\n  readonly version: string\n} | {\n  readonly _tag: typeof INTERRUPTION_REQUESTED\n  readonly sequence: number\n} | {\n  readonly _tag: typeof COMPLETED\n  readonly sequence: number\n  readonly exit: Schema.ExitEncoded<IE, IA, unknown>\n} | {\n  readonly _tag: typeof FORKED\n  readonly sequence: number\n  readonly persistenceId: string\n} | {\n  readonly _tag: typeof JOINED\n  readonly sequence: number\n  readonly persistenceId: string\n}"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionJournalTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const DurableExecutionJournalTypeId: unique symbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionJournal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const DurableExecutionJournal: Context.Tag<DurableExecutionJournal, DurableExecutionJournal>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: ({ table }: DurableExecutionJournal.MakeOptions) => Effect.Effect<DurableExecutionJournal, SqlError, SqlClient.SqlClient>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const layer: (options: DurableExecutionJournal.MakeOptions) => Layer.Layer<DurableExecutionJournal, SqlError, SqlClient.SqlClient>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionJournal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface DurableExecutionJournal {\n  readonly [DurableExecutionJournalTypeId]: DurableExecutionJournalTypeId\n  read<A, IA, E, IE>(\n    persistenceId: string,\n    success: Schema.Schema<A, IA>,\n    failure: Schema.Schema<E, IE>,\n    fromSequence: number,\n    keepReading: boolean\n  ): Stream.Stream<DurableExecutionEvent.DurableExecutionEvent<A, E>>\n  append<A, IA, E, IE>(\n    persistenceId: string,\n    success: Schema.Schema<A, IA>,\n    failure: Schema.Schema<E, IE>,\n    event: DurableExecutionEvent.DurableExecutionEvent<A, E>\n  ): Effect.Effect<void>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionJournalTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "type DurableExecutionJournalTypeId = typeof DurableExecutionJournalTypeId"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DurableExecutionJournal.ts",
      "path": "src/DurableExecutionJournal.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "DurableExecutionJournal.MakeOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface MakeOptions {\n    readonly table: string\n  }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "DurableExecutionJournalInMemory.ts",
      "path": "src/DurableExecutionJournalInMemory.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "activityJournalInMemory",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const activityJournalInMemory: Layer.Layer<DurableExecutionJournal.DurableExecutionJournal, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "yieldExecution",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const yieldExecution: Effect.Effect<never, never, WorkflowContext.WorkflowContext>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const make: <T extends Message.Message.Any, R = never, I = unknown>(schema: Schema.Schema<T, I>, execute: (input: T) => Effect.Effect<Message.Message.Success<T>, Message.Message.Error<T>, R>, version?: (input: T) => string) => Workflow<T, Exclude<R, WorkflowContext.WorkflowContext>>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "union",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const union: <WFs extends ReadonlyArray<Workflow.Any>>(...wfs: WFs) => Workflow<Workflow.Request<WFs[number]>, Exclude<Workflow.Context<WFs[number]>, WorkflowContext.WorkflowContext>>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "sleep",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const sleep: (persistenceId: string, duration: Duration.Duration) => Effect.Effect<void, never, WorkflowContext.WorkflowContext>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "timeout",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const timeout: (persistenceId: string, duration: Duration.Duration) => <R, E, A>(fa: Effect.Effect<R, E, A>) => Effect.Effect<void, E | TimeoutException, WorkflowContext.WorkflowContext | A>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Workflow",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Workflow<T extends Message.Message.Any, R> {\n  schema: Schema.Schema<T, unknown>\n  execute: (\n    input: T\n  ) => Effect.Effect<Message.Message.Success<T>, Message.Message.Error<T>, R | WorkflowContext.WorkflowContext>\n  version: (input: T) => string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Workflow.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Any = Workflow<any, any>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Workflow.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Context<A> = A extends Workflow<any, infer R> ? R : never"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Workflow.ts",
      "path": "src/Workflow.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Workflow.Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Request<A> = A extends Workflow<infer T, any> ? T : never"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const WorkflowContextTypeId: unique symbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const WorkflowContext: Context.Tag<WorkflowContext, WorkflowContext>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const make: (args: WorkflowContext) => WorkflowContext"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "appendToPersistenceId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const appendToPersistenceId: (suffix: string) => <R, E, A>(fa: Effect.Effect<R, E, A>) => Effect.Effect<R, E, WorkflowContext | A>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface WorkflowContext {\n  makePersistenceId: (localId: string) => string\n  durableExecutionJournal: DurableExecutionJournal.DurableExecutionJournal\n  isYielding: Effect.Effect<boolean>\n  yieldExecution: Effect.Effect<never>\n  forkAndJoin: <A, E, R>(persistenceId: string, effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>\n  version: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkflowContext.ts",
      "path": "src/WorkflowContext.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "type WorkflowContextTypeId = typeof WorkflowContextTypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowEngine.ts",
      "path": "src/WorkflowEngine.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "makeScoped",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const makeScoped: <T extends Message.Message.Any, R>(workflow: Workflow.Workflow<T, R>) => Effect.Effect<WorkflowEngine<T>, never, R | Scope.Scope | DurableExecutionJournal.DurableExecutionJournal>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkflowEngine.ts",
      "path": "src/WorkflowEngine.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowEngine",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface WorkflowEngine<T extends Message.Message.Any> {\n  sendDiscard: (request: T) => Effect.Effect<void>\n  send: <A extends T>(request: A) => Effect.Effect<Message.Message.Success<A>, Message.Message.Error<A>>\n}"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowRuntime.ts",
      "path": "src/WorkflowRuntime.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "attempt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const attempt: <A extends Message.Message.Any, R>(workflow: Workflow.Workflow<A, R>) => (request: A) => Effect.Effect<Message.Message.Success<A>, Message.Message.Error<A>, R | DurableExecutionJournal.DurableExecutionJournal>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "RequestFork",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class RequestFork"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "RequestJoin",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class RequestJoin"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "RequestYield",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class RequestYield"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "RequestComplete",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class RequestComplete<A, E>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "CheckStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class CheckStatus<A, E>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "match",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const match: <A, E, B, C = B, D = C, F = D, G = F>(fa: WorkflowRuntimeMessage<A, E>, fns: { onRequestFork: (message: RequestFork) => B; onRequestJoin: (message: RequestJoin) => C; onRequestYield: (message: RequestYield) => D; onRequestComplete: (message: RequestComplete<A, E>) => F; onCheckStatus: (message: CheckStatus<A, E>) => G; }) => B | C | D | F | G"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkflowRuntimeMessage.ts",
      "path": "src/WorkflowRuntimeMessage.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowRuntimeMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type WorkflowRuntimeMessage<A, E> = | RequestJoin\n  | RequestFork\n  | RequestYield\n  | RequestComplete<A, E>\n  | CheckStatus<A, E>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "NotStarted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class NotStarted"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Replay",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class Replay<A, E>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Running",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class Running<A, E>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Yielding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class Yielding<A, E>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "Completed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class Completed<A, E>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "match",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const match: <A, E, B, C = B, D = C, F = D, G = F>(fa: WorkflowRuntimeState<A, E>, fns: { onReplay: (state: Replay<A, E>) => B; onRunning: (state: Running<A, E>) => C; onYielding: (state: Yielding<A, E>) => D; onCompleted: (state: Completed<A, E>) => F; onNotStarted: (state: NotStarted) => G; }) => B | C | D | F | G"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "initialState",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const initialState: <A extends Message.Message.Any>() => WorkflowRuntimeState<Message.Message.Success<A>, Message.Message.Error<A>>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkflowRuntimeState.ts",
      "path": "src/WorkflowRuntimeState.ts"
    },
    "project": "@effect/cluster-workflow",
    "name": "WorkflowRuntimeState",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type WorkflowRuntimeState<A, E> = | NotStarted\n  | Replay<A, E>\n  | Running<A, E>\n  | Yielding<A, E>\n  | Completed<A, E>"
  }
]