[
  {
    "_tag": "Constant",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "MssqlClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const MssqlClient: Context.Tag<MssqlClient, MssqlClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "defaultParameterTypes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const defaultParameterTypes: Record<Statement.PrimitiveKind, DataType>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (options: MssqlClientConfig) => Effect.Effect<MssqlClient, SqlError, Scope.Scope | Reactivity.Reactivity>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "layerConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerConfig: (config: Config.Config.Wrap<MssqlClientConfig>) => Layer.Layer<Client.SqlClient | MssqlClient, ConfigError | SqlError>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (config: MssqlClientConfig) => Layer.Layer<Client.SqlClient | MssqlClient, ConfigError | SqlError>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "makeCompiler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "compiler",
    "signature": "declare const makeCompiler: (transform?: (_: string) => string) => Statement.Compiler"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "MssqlClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface MssqlClient extends Client.SqlClient {\n  readonly [TypeId]: TypeId\n\n  readonly config: MssqlClientConfig\n\n  readonly param: (\n    type: DataType,\n    value: Statement.Primitive,\n    options?: ParameterOptions\n  ) => Statement.Fragment\n\n  readonly call: <\n    I extends Record<string, Parameter<any>>,\n    O extends Record<string, Parameter<any>>,\n    A extends object\n  >(\n    procedure: Procedure.ProcedureWithValues<I, O, A>\n  ) => Effect.Effect<Procedure.Procedure.Result<O, A>, SqlError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "MssqlClientConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface MssqlClientConfig {\n  readonly domain?: string | undefined\n  readonly server: string\n  readonly instanceName?: string | undefined\n  readonly encrypt?: boolean | undefined\n  readonly trustServer?: boolean | undefined\n  readonly port?: number | undefined\n  readonly authType?: string | undefined\n  readonly database?: string | undefined\n  readonly username?: string | undefined\n  readonly password?: Redacted.Redacted | undefined\n  readonly connectTimeout?: Duration.DurationInput | undefined\n\n  readonly minConnections?: number | undefined\n  readonly maxConnections?: number | undefined\n  readonly connectionTTL?: Duration.DurationInput | undefined\n\n  readonly parameterTypes?: Record<Statement.PrimitiveKind, DataType> | undefined\n\n  readonly spanAttributes?: Record<string, unknown> | undefined\n\n  readonly transformResultNames?: ((str: string) => string) | undefined\n  readonly transformQueryNames?: ((str: string) => string) | undefined\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MssqlClient.ts",
      "path": "src/MssqlClient.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MssqlMigrator.ts",
      "path": "src/MssqlMigrator.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "run",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const run: <R>(options: Migrator.MigratorOptions<R>) => Effect.Effect<ReadonlyArray<readonly [id: number, name: string]>, SqlError | Migrator.MigrationError, Client.SqlClient | R>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MssqlMigrator.ts",
      "path": "src/MssqlMigrator.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: <R>(options: Migrator.MigratorOptions<R>) => Layer.Layer<never, SqlError | Migrator.MigrationError, Client.SqlClient | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Parameter.ts",
      "path": "src/Parameter.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "ParameterId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const ParameterId: unique symbol"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Parameter.ts",
      "path": "src/Parameter.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const make: <A>(name: string, type: DataType, options?: ParameterOptions) => Parameter<A>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Parameter.ts",
      "path": "src/Parameter.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "Parameter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Parameter<A> {\n  readonly [ParameterId]: (_: never) => A\n  readonly _tag: \"Parameter\"\n  readonly name: string\n  readonly type: DataType\n  readonly options: ParameterOptions\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Parameter.ts",
      "path": "src/Parameter.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "ParameterId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type ParameterId = typeof ParameterId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const TypeId: unique symbol"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const make: (name: string) => Procedure<{}, {}>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "param",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinator",
    "signature": "declare const param: <A>() => <N extends string, T extends DataType>(name: N, type: T, options?: ParameterOptions) => <I extends Record<string, Parameter.Parameter<any>>, O extends Record<string, Parameter.Parameter<any>>>(self: Procedure<I, O>) => Procedure<Simplify<I & { [K in N]: Parameter.Parameter<A>; }>, O>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "outputParam",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinator",
    "signature": "declare const outputParam: <A>() => <N extends string, T extends DataType>(name: N, type: T, options?: ParameterOptions) => <I extends Record<string, Parameter.Parameter<any>>, O extends Record<string, Parameter.Parameter<any>>>(self: Procedure<I, O>) => Procedure<I, Simplify<O & { [K in N]: Parameter.Parameter<A>; }>>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "withRows",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinator",
    "signature": "declare const withRows: <A extends object = Row>() => <I extends Record<string, Parameter.Parameter<any>>, O extends Record<string, Parameter.Parameter<any>>>(self: Procedure<I, O>) => Procedure<I, O, A>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "compile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinator",
    "signature": "declare const compile: <I extends Record<string, Parameter.Parameter<any>>, O extends Record<string, Parameter.Parameter<any>>, A>(self: Procedure<I, O, A>) => (input: Procedure.ParametersRecord<I>) => ProcedureWithValues<I, O, A>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "Procedure",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Procedure<\n  I extends Record<string, Parameter.Parameter<any>>,\n  O extends Record<string, Parameter.Parameter<any>>,\n  A = never\n> extends Pipeable {\n  readonly [TypeId]: {\n    readonly _A: Covariant<A>\n  }\n  readonly _tag: \"Procedure\"\n  readonly name: string\n  readonly params: I\n  readonly outputParams: O\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "ProcedureWithValues",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface ProcedureWithValues<\n  I extends Record<string, Parameter.Parameter<any>>,\n  O extends Record<string, Parameter.Parameter<any>>,\n  A\n> extends Procedure<I, O, A> {\n  readonly values: Procedure.ParametersRecord<I>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type TypeId = typeof TypeId"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "Procedure.Result",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Result<\n    O extends Record<string, Parameter.Parameter<any>>,\n    A\n  > {\n    readonly output: ParametersRecord<O>\n    readonly rows: ReadonlyArray<A>\n  }"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Procedure.ts",
      "path": "src/Procedure.ts"
    },
    "project": "@effect/sql-mssql",
    "name": "Procedure.ParametersRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type { readonly [K in keyof A]: A[K] extends Parameter.Parameter<infer T> ? T : never; } = & {\n      readonly [K in keyof A]: A[K] extends Parameter.Parameter<infer T> ? T\n        : never\n    }\n    & {}"
  }
]