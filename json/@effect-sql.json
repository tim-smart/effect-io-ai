[
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "Migrator",
    "description": "Re-exports all named exports from the \"./Migrator.js\" module as `Migrator`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Migrator from \"./Migrator.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L4"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "Model",
    "description": "Re-exports all named exports from the \"./Model.js\" module as `Model`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Model from \"./Model.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L9"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlClient",
    "description": "Re-exports all named exports from the \"./SqlClient.js\" module as `SqlClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlClient from \"./SqlClient.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L14"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlConnection",
    "description": "Re-exports all named exports from the \"./SqlConnection.js\" module as `SqlConnection`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlConnection from \"./SqlConnection.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L19"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlError",
    "description": "Re-exports all named exports from the \"./SqlError.js\" module as `SqlError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlError from \"./SqlError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L24"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlEventJournal",
    "description": "Re-exports all named exports from the \"./SqlEventJournal.js\" module as `SqlEventJournal`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlEventJournal from \"./SqlEventJournal.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L29"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlEventLogServer",
    "description": "Re-exports all named exports from the \"./SqlEventLogServer.js\" module as `SqlEventLogServer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlEventLogServer from \"./SqlEventLogServer.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L34"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlResolver",
    "description": "Re-exports all named exports from the \"./SqlResolver.js\" module as `SqlResolver`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlResolver from \"./SqlResolver.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L39"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlSchema",
    "description": "Re-exports all named exports from the \"./SqlSchema.js\" module as `SqlSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlSchema from \"./SqlSchema.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L44"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "SqlStream",
    "description": "Re-exports all named exports from the \"./SqlStream.js\" module as `SqlStream`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SqlStream from \"./SqlStream.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L49"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/sql",
    "name": "Statement",
    "description": "Re-exports all named exports from the \"./Statement.js\" module as `Statement`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Statement from \"./Statement.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/index.ts#L54"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "MigrationError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class MigrationError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L57"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const make: <RD = never>({ dumpSchema }: { dumpSchema?: (path: string, migrationsTable: string) => Effect.Effect<void, MigrationError, RD>; }) => <R2 = never>({ loader, schemaDirectory, table }: MigratorOptions<R2>) => Effect.Effect<ReadonlyArray<readonly [id: number, name: string]>, MigrationError | SqlError, Client.SqlClient | RD | R2>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L72"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "fromGlob",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "loaders",
    "signature": "declare const fromGlob: (migrations: Record<string, () => Promise<any>>) => Loader",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L298"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "fromBabelGlob",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "loaders",
    "signature": "declare const fromBabelGlob: (migrations: Record<string, any>) => Loader",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L319"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "MigratorOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface MigratorOptions<R = never> {\n  readonly loader: Loader<R>\n  readonly schemaDirectory?: string\n  readonly table?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L17"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "Migration",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Migration {\n  readonly id: number\n  readonly name: string\n  readonly createdAt: Date\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L47"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "Loader",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Loader<R> = Effect.Effect<\n  ReadonlyArray<ResolvedMigration>,\n  MigrationError,\n  R\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Migrator.ts",
      "path": "src/Migrator.ts"
    },
    "project": "@effect/sql",
    "name": "ResolvedMigration",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type ResolvedMigration = readonly [\n  id: number,\n  name: string,\n  load: Effect.Effect<any>\n]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Migrator.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/Migrator/FileSystem.ts"
    },
    "project": "@effect/sql",
    "name": "fromFileSystem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "loaders",
    "signature": "declare const fromFileSystem: (directory: string) => Loader<FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/FileSystem.ts#L14"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "BooleanFromNumber",
    "description": "A boolean parsed from 0 or 1",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "uuid",
    "signature": "declare class BooleanFromNumber",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L669"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "fields",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const fields: <A extends VariantSchema.Struct<any>>(self: A) => A[VariantSchema.TypeId]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L163"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Override",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "overrideable",
    "signature": "declare const Override: <A>(value: A) => A & Brand<\"Override\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L169"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "FieldOption",
    "description": "Convert a field to one that is optional for all variants.\n\nFor the database variants, it will accept `null`able values.\nFor the JSON variants, it will also accept missing keys.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "optional",
    "signature": "declare const FieldOption: <Field extends VariantSchema.Field<any> | Schema.Schema.Any>(self: Field) => Field extends Schema.Schema.Any ? FieldOption<Field> : Field extends VariantSchema.Field<infer S> ? VariantSchema.Field<{ readonly [K in keyof S]: S[K] extends Schema.Schema.Any ? K extends VariantsDatabase ? Schema.OptionFromNullOr<S[K]> : Schema.optionalWith<S[K], { as: \"Option\"; nullable: true; }> : never; }> : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L289"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeFromDate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeFromDate: DateTimeFromDate",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L324"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Date",
    "description": "A schema for a `DateTime.Utc` that is serialized as a date string in the\nformat `YYYY-MM-DD`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const Date: Date",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L346"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateWithNow",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateWithNow: VariantSchema.Overrideable<DateTime.Utc, string, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L366"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeWithNow",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeWithNow: VariantSchema.Overrideable<DateTime.Utc, string, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L377"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeFromDateWithNow",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeFromDateWithNow: VariantSchema.Overrideable<DateTime.Utc, globalThis.Date, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L389"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeFromNumberWithNow",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeFromNumberWithNow: VariantSchema.Overrideable<DateTime.Utc, number, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L401"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsert",
    "description": "A field that represents a date-time value that is inserted as the current\n`DateTime.Utc`. It is serialized as a string for the database.\n\nIt is omitted from updates and is available for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeInsert: DateTimeInsert",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L430"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsertFromDate",
    "description": "A field that represents a date-time value that is inserted as the current\n`DateTime.Utc`. It is serialized as a `Date` for the database.\n\nIt is omitted from updates and is available for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeInsertFromDate: DateTimeInsertFromDate",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L457"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsertFromNumber",
    "description": "A field that represents a date-time value that is inserted as the current\n`DateTime.Utc`. It is serialized as a `number`.\n\nIt is omitted from updates and is available for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeInsertFromNumber: DateTimeInsertFromNumber",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L484"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdate",
    "description": "A field that represents a date-time value that is updated as the current\n`DateTime.Utc`. It is serialized as a string for the database.\n\nIt is set to the current `DateTime.Utc` on updates and inserts and is\navailable for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeUpdate: DateTimeUpdate",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L513"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdateFromDate",
    "description": "A field that represents a date-time value that is updated as the current\n`DateTime.Utc`. It is serialized as a `Date` for the database.\n\nIt is set to the current `DateTime.Utc` on updates and inserts and is\navailable for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeUpdateFromDate: DateTimeUpdateFromDate",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L543"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdateFromNumber",
    "description": "A field that represents a date-time value that is updated as the current\n`DateTime.Utc`. It is serialized as a `number`.\n\nIt is set to the current `DateTime.Utc` on updates and inserts and is\navailable for selection.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "declare const DateTimeUpdateFromNumber: DateTimeUpdateFromNumber",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L573"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Generated",
    "description": "A field that represents a column that is generated by the database.\n\nIt is available for selection and update, but not for insertion.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "generated",
    "signature": "declare const Generated: <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => Generated<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L191"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "GeneratedByApp",
    "description": "A field that represents a column that is generated by the application.\n\nIt is required by the database, but not by the JSON variants.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "generated",
    "signature": "declare const GeneratedByApp: <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => GeneratedByApp<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L222"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Sensitive",
    "description": "A field that represents a sensitive value that should not be exposed in the\nJSON variants.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sensitive",
    "signature": "declare const Sensitive: <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => Sensitive<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L251"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "JsonFromString",
    "description": "A field that represents a JSON value stored as text in the database.\n\nThe \"json\" variants will use the object schema directly.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "json",
    "signature": "declare const JsonFromString: <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => JsonFromString<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L604"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "UuidV4WithGenerate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "uuid",
    "signature": "declare const UuidV4WithGenerate: <B extends string | symbol>(schema: Schema.brand<typeof Schema.Uint8ArrayFromSelf, B>) => VariantSchema.Overrideable<Uint8Array & Brand<B>, Uint8Array>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L635"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "UuidV4Insert",
    "description": "A field that represents a binary UUID v4 that is generated on inserts.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "uuid",
    "signature": "declare const UuidV4Insert: <const B extends string | symbol>(schema: Schema.brand<typeof Schema.Uint8ArrayFromSelf, B>) => UuidV4Insert<B>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L653"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "makeRepository",
    "description": "Create a simple CRUD repository from a model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "repository",
    "signature": "declare const makeRepository: <S extends Any, Id extends (keyof S[\"Type\"]) & (keyof S[\"update\"][\"Type\"]) & (keyof S[\"fields\"])>(Model: S, options: { readonly tableName: string; readonly spanPrefix: string; readonly idColumn: Id; }) => Effect.Effect<{ readonly insert: (insert: S[\"insert\"][\"Type\"]) => Effect.Effect<S[\"Type\"], never, S[\"Context\"] | S[\"insert\"][\"Context\"]>; readonly insertVoid: (insert: S[\"insert\"][\"Type\"]) => Effect.Effect<void, never, S[\"Context\"] | S[\"insert\"][\"Context\"]>; readonly update: (update: S[\"update\"][\"Type\"]) => Effect.Effect<S[\"Type\"], never, S[\"Context\"] | S[\"update\"][\"Context\"]>; readonly updateVoid: (update: S[\"update\"][\"Type\"]) => Effect.Effect<void, never, S[\"Context\"] | S[\"update\"][\"Context\"]>; readonly findById: (id: Schema.Schema.Type<S[\"fields\"][Id]>) => Effect.Effect<Option.Option<S[\"Type\"]>, never, S[\"Context\"] | Schema.Schema.Context<S[\"fields\"][Id]>>; readonly delete: (id: Schema.Schema.Type<S[\"fields\"][Id]>) => Effect.Effect<void, never, Schema.Schema.Context<S[\"fields\"][Id]>>; }, never, SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L684"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "makeDataLoaders",
    "description": "Create some simple data loaders from a model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "repository",
    "signature": "declare const makeDataLoaders: <S extends AnyNoContext, Id extends (keyof S[\"Type\"]) & (keyof S[\"update\"][\"Type\"]) & (keyof S[\"fields\"])>(Model: S, options: { readonly tableName: string; readonly spanPrefix: string; readonly idColumn: Id; readonly window: DurationInput; readonly maxBatchSize?: number | undefined; }) => Effect.Effect<{ readonly insert: (insert: S[\"insert\"][\"Type\"]) => Effect.Effect<S[\"Type\"]>; readonly insertVoid: (insert: S[\"insert\"][\"Type\"]) => Effect.Effect<void>; readonly findById: (id: Schema.Schema.Type<S[\"fields\"][Id]>) => Effect.Effect<Option.Option<S[\"Type\"]>>; readonly delete: (id: Schema.Schema.Type<S[\"fields\"][Id]>) => Effect.Effect<void>; }, never, SqlClient | Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L846"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Generated",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "generated",
    "signature": "export interface Generated<S extends Schema.Schema.All | Schema.PropertySignature.All> extends\n  VariantSchema.Field<{\n    readonly select: S\n    readonly update: S\n    readonly json: S\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L175"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "GeneratedByApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "generated",
    "signature": "export interface GeneratedByApp<S extends Schema.Schema.All | Schema.PropertySignature.All>\n  extends\n    VariantSchema.Field<{\n      readonly select: S\n      readonly insert: S\n      readonly update: S\n      readonly json: S\n    }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L204"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Sensitive",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sensitive",
    "signature": "export interface Sensitive<S extends Schema.Schema.All | Schema.PropertySignature.All> extends\n  VariantSchema.Field<{\n    readonly select: S\n    readonly insert: S\n    readonly update: S\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L236"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "FieldOption",
    "description": "Convert a field to one that is optional for all variants.\n\nFor the database variants, it will accept `null`able values.\nFor the JSON variants, it will also accept missing keys.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "optional",
    "signature": "export interface FieldOption<S extends Schema.Schema.Any> extends\n  VariantSchema.Field<{\n    readonly select: Schema.OptionFromNullOr<S>\n    readonly insert: Schema.OptionFromNullOr<S>\n    readonly update: Schema.OptionFromNullOr<S>\n    readonly json: Schema.optionalWith<S, { as: \"Option\" }>\n    readonly jsonCreate: Schema.optionalWith<S, { as: \"Option\"; nullable: true }>\n    readonly jsonUpdate: Schema.optionalWith<S, { as: \"Option\"; nullable: true }>\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L269"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeFromDate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeFromDate extends\n  Schema.transform<\n    typeof Schema.ValidDateFromSelf,\n    typeof Schema.DateTimeUtcFromSelf\n  >\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L313"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Date",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface Date extends Schema.transformOrFail<typeof Schema.String, typeof Schema.DateTimeUtcFromSelf> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L337"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsert",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeInsert extends\n  VariantSchema.Field<{\n    readonly select: typeof Schema.DateTimeUtc\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, string>\n    readonly json: typeof Schema.DateTimeUtc\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L413"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsertFromDate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeInsertFromDate extends\n  VariantSchema.Field<{\n    readonly select: DateTimeFromDate\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, globalThis.Date>\n    readonly json: typeof Schema.DateTimeUtc\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L440"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeInsertFromNumber",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeInsertFromNumber extends\n  VariantSchema.Field<{\n    readonly select: typeof Schema.DateTimeUtcFromNumber\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, number>\n    readonly json: typeof Schema.DateTimeUtcFromNumber\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L467"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeUpdate extends\n  VariantSchema.Field<{\n    readonly select: typeof Schema.DateTimeUtc\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, string>\n    readonly update: VariantSchema.Overrideable<DateTime.Utc, string>\n    readonly json: typeof Schema.DateTimeUtc\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L494"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdateFromDate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeUpdateFromDate extends\n  VariantSchema.Field<{\n    readonly select: DateTimeFromDate\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, globalThis.Date>\n    readonly update: VariantSchema.Overrideable<DateTime.Utc, globalThis.Date>\n    readonly json: typeof Schema.DateTimeUtc\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L524"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "DateTimeUpdateFromNumber",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "date & time",
    "signature": "export interface DateTimeUpdateFromNumber extends\n  VariantSchema.Field<{\n    readonly select: typeof Schema.DateTimeUtcFromNumber\n    readonly insert: VariantSchema.Overrideable<DateTime.Utc, number>\n    readonly update: VariantSchema.Overrideable<DateTime.Utc, number>\n    readonly json: typeof Schema.DateTimeUtcFromNumber\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L554"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "JsonFromString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "json",
    "signature": "export interface JsonFromString<S extends Schema.Schema.All | Schema.PropertySignature.All>\n  extends\n    VariantSchema.Field<{\n      readonly select: Schema.Schema<Schema.Schema.Type<S>, string, Schema.Schema.Context<S>>\n      readonly insert: Schema.Schema<Schema.Schema.Type<S>, string, Schema.Schema.Context<S>>\n      readonly update: Schema.Schema<Schema.Schema.Type<S>, string, Schema.Schema.Context<S>>\n      readonly json: S\n      readonly jsonCreate: S\n      readonly jsonUpdate: S\n    }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L584"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "UuidV4Insert",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "uuid",
    "signature": "export interface UuidV4Insert<B extends string | symbol> extends\n  VariantSchema.Field<{\n    readonly select: Schema.brand<typeof Schema.Uint8ArrayFromSelf, B>\n    readonly insert: VariantSchema.Overrideable<Uint8Array & Brand<B>, Uint8Array>\n    readonly update: Schema.brand<typeof Schema.Uint8ArrayFromSelf, B>\n    readonly json: Schema.brand<typeof Schema.Uint8ArrayFromSelf, B>\n  }>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L622"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Any = Schema.Schema.Any & {\n  readonly fields: Schema.Struct.Fields\n  readonly insert: Schema.Schema.Any\n  readonly update: Schema.Schema.Any\n  readonly json: Schema.Schema.Any\n  readonly jsonCreate: Schema.Schema.Any\n  readonly jsonUpdate: Schema.Schema.Any\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L38"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "AnyNoContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AnyNoContext = Schema.Schema.AnyNoContext & {\n  readonly fields: Schema.Struct.Fields\n  readonly insert: Schema.Schema.AnyNoContext\n  readonly update: Schema.Schema.AnyNoContext\n  readonly json: Schema.Schema.AnyNoContext\n  readonly jsonCreate: Schema.Schema.AnyNoContext\n  readonly jsonUpdate: Schema.Schema.AnyNoContext\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L51"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "VariantsDatabase",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type VariantsDatabase = \"select\" | \"insert\" | \"update\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L64"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "VariantsJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type VariantsJson = \"json\" | \"jsonCreate\" | \"jsonUpdate\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L70"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Class",
    "description": "A base class used for creating domain model schemas.\n\nIt supports common variants for database and JSON apis.",
    "deprecated": false,
    "examples": [
      "```ts\nimport { Schema } from \"effect\"\nimport { Model } from \"@effect/sql\"\n\nexport const GroupId = Schema.Number.pipe(Schema.brand(\"GroupId\"))\n\nexport class Group extends Model.Class<Group>(\"Group\")({\n  id: Model.Generated(GroupId),\n  name: Schema.NonEmptyTrimmedString,\n  createdAt: Model.DateTimeInsertFromDate,\n  updatedAt: Model.DateTimeUpdateFromDate\n}) {}\n\n// schema used for selects\nGroup\n\n// schema used for inserts\nGroup.insert\n\n// schema used for updates\nGroup.update\n\n// schema used for json api\nGroup.json\nGroup.jsonCreate\nGroup.jsonUpdate\n\n// you can also turn them into classes\nclass GroupJson extends Schema.Class<GroupJson>(\"GroupJson\")(Group.json) {\n  get upperName() {\n    return this.name.toUpperCase()\n  }\n}\n```"
    ],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const Class: <Self = never>(identifier: string) => <const Fields extends VariantSchema.Struct.Fields>(fields: Fields & VariantSchema.Struct.Validate<Fields, \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">, annotations?: Schema.Annotations.Schema<Self, readonly []> | undefined) => [Self] extends [never] ? \"Missing `Self` generic - use `class Self extends Class<Self>()({ ... })`\" : ClassFromFields<Self, Fields, { [K in keyof VariantSchema.ExtractFields<\"select\", Fields, true>]: VariantSchema.ExtractFields<\"select\", Fields, true>[K]; }> & { readonly insert: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"insert\", Fields, false>]: VariantSchema.ExtractFields<\"insert\", Fields, false>[K]; }>; readonly update: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"update\", Fields, false>]: VariantSchema.ExtractFields<\"update\", Fields, false>[K]; }>; readonly json: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"json\", Fields, false>]: VariantSchema.ExtractFields<\"json\", Fields, false>[K]; }>; readonly jsonCreate: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"jsonCreate\", Fields, false>]: VariantSchema.ExtractFields<\"jsonCreate\", Fields, false>[K]; }>; readonly jsonUpdate: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"jsonUpdate\", Fields, false>]: VariantSchema.ExtractFields<\"jsonUpdate\", Fields, false>[K]; }>; readonly select: Schema.Struct<{ [K in keyof VariantSchema.ExtractFields<\"select\", Fields, false>]: VariantSchema.ExtractFields<\"select\", Fields, false>[K]; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L116"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "extract",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "extraction",
    "signature": "declare const extract: { <V extends \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">(variant: V): <A extends VariantSchema.Struct<any>>(self: A) => VariantSchema.Extract<V, A, V extends \"select\" ? true : false>; <V extends \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\", A extends VariantSchema.Struct<any>>(self: A, variant: V): VariantSchema.Extract<V, A, V extends \"select\" ? true : false>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L121"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Field",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const Field: <const A extends VariantSchema.Field.ConfigWithKeys<\"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">>(config: A & { readonly [K in Exclude<keyof A, \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">]: never; }) => VariantSchema.Field<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L126"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "fieldEvolve",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const fieldEvolve: { <Self extends VariantSchema.Field<any> | VariantSchema.Field.ValueAny, const Mapping extends Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]?: ((variant: S[K]) => VariantSchema.Field.ValueAny) | undefined; } : { readonly insert?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly update?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly json?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly jsonCreate?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly jsonUpdate?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly select?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; }>(f: Mapping): (self: Self) => VariantSchema.Field<Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]: K extends keyof Mapping ? Mapping[K] extends (arg: any) => any ? ReturnType<Mapping[K]> : S[K] : S[K]; } : { readonly insert: \"insert\" extends keyof Mapping ? Mapping[keyof Mapping & \"insert\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"insert\"]> : Self : Self; readonly update: \"update\" extends keyof Mapping ? Mapping[keyof Mapping & \"update\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"update\"]> : Self : Self; readonly json: \"json\" extends keyof Mapping ? Mapping[keyof Mapping & \"json\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"json\"]> : Self : Self; readonly jsonCreate: \"jsonCreate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonCreate\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"jsonCreate\"]> : Self : Self; readonly jsonUpdate: \"jsonUpdate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonUpdate\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"jsonUpdate\"]> : Self : Self; readonly select: \"select\" extends keyof Mapping ? Mapping[keyof Mapping & \"select\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"select\"]> : Self : Self; }>; <Self extends VariantSchema.Field<any> | VariantSchema.Field.ValueAny, const Mapping extends Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]?: ((variant: S[K]) => VariantSchema.Field.ValueAny) | undefined; } : { readonly insert?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly update?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly json?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly jsonCreate?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly jsonUpdate?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; readonly select?: ((variant: Self) => VariantSchema.Field.ValueAny) | undefined; }>(self: Self, f: Mapping): VariantSchema.Field<Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]: K extends keyof Mapping ? Mapping[K] extends (arg: any) => any ? ReturnType<Mapping[K]> : S[K] : S[K]; } : { readonly insert: \"insert\" extends keyof Mapping ? Mapping[keyof Mapping & \"insert\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"insert\"]> : Self : Self; readonly update: \"update\" extends keyof Mapping ? Mapping[keyof Mapping & \"update\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"update\"]> : Self : Self; readonly json: \"json\" extends keyof Mapping ? Mapping[keyof Mapping & \"json\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"json\"]> : Self : Self; readonly jsonCreate: \"jsonCreate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonCreate\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"jsonCreate\"]> : Self : Self; readonly jsonUpdate: \"jsonUpdate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonUpdate\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"jsonUpdate\"]> : Self : Self; readonly select: \"select\" extends keyof Mapping ? Mapping[keyof Mapping & \"select\"] extends (arg: any) => any ? ReturnType<Mapping[keyof Mapping & \"select\"]> : Self : Self; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L131"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "FieldExcept",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const FieldExcept: <const Keys extends ReadonlyArray<\"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">>(...keys: Keys) => <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => VariantSchema.Field<{ readonly [K in Exclude<\"insert\", Keys[number]> | Exclude<\"update\", Keys[number]> | Exclude<\"json\", Keys[number]> | Exclude<\"jsonCreate\", Keys[number]> | Exclude<\"jsonUpdate\", Keys[number]> | Exclude<\"select\", Keys[number]>]: S; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L136"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "fieldFromKey",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const fieldFromKey: { <Self extends VariantSchema.Field<any> | VariantSchema.Field.ValueAny, const Mapping extends Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]?: string | undefined; } : { readonly insert?: string | undefined; readonly update?: string | undefined; readonly json?: string | undefined; readonly jsonCreate?: string | undefined; readonly jsonUpdate?: string | undefined; readonly select?: string | undefined; }>(mapping: Mapping): (self: Self) => VariantSchema.Field<Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]: K extends keyof Mapping ? Mapping[K] extends string ? VariantSchema.fromKey.Rename<S[K], Mapping[K]> : S[K] : S[K]; } : { readonly insert: \"insert\" extends keyof Mapping ? Mapping[keyof Mapping & \"insert\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"insert\"]> : Self : Self; readonly update: \"update\" extends keyof Mapping ? Mapping[keyof Mapping & \"update\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"update\"]> : Self : Self; readonly json: \"json\" extends keyof Mapping ? Mapping[keyof Mapping & \"json\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"json\"]> : Self : Self; readonly jsonCreate: \"jsonCreate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonCreate\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"jsonCreate\"]> : Self : Self; readonly jsonUpdate: \"jsonUpdate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonUpdate\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"jsonUpdate\"]> : Self : Self; readonly select: \"select\" extends keyof Mapping ? Mapping[keyof Mapping & \"select\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"select\"]> : Self : Self; }>; <Self extends VariantSchema.Field<any> | VariantSchema.Field.ValueAny, const Mapping extends Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]?: string | undefined; } : { readonly insert?: string | undefined; readonly update?: string | undefined; readonly json?: string | undefined; readonly jsonCreate?: string | undefined; readonly jsonUpdate?: string | undefined; readonly select?: string | undefined; }>(self: Self, mapping: Mapping): VariantSchema.Field<Self extends VariantSchema.Field<infer S extends VariantSchema.Field.Config> ? { readonly [K in keyof S]: K extends keyof Mapping ? Mapping[K] extends string ? VariantSchema.fromKey.Rename<S[K], Mapping[K]> : S[K] : S[K]; } : { readonly insert: \"insert\" extends keyof Mapping ? Mapping[keyof Mapping & \"insert\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"insert\"]> : Self : Self; readonly update: \"update\" extends keyof Mapping ? Mapping[keyof Mapping & \"update\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"update\"]> : Self : Self; readonly json: \"json\" extends keyof Mapping ? Mapping[keyof Mapping & \"json\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"json\"]> : Self : Self; readonly jsonCreate: \"jsonCreate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonCreate\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"jsonCreate\"]> : Self : Self; readonly jsonUpdate: \"jsonUpdate\" extends keyof Mapping ? Mapping[keyof Mapping & \"jsonUpdate\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"jsonUpdate\"]> : Self : Self; readonly select: \"select\" extends keyof Mapping ? Mapping[keyof Mapping & \"select\"] extends string ? VariantSchema.fromKey.Rename<Self, Mapping[keyof Mapping & \"select\"]> : Self : Self; }>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L141"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "FieldOnly",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fields",
    "signature": "declare const FieldOnly: <const Keys extends ReadonlyArray<\"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">>(...keys: Keys) => <S extends Schema.Schema.All | Schema.PropertySignature.All>(schema: S) => VariantSchema.Field<{ readonly [K in Keys[number]]: S; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L146"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Struct",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const Struct: <const A extends VariantSchema.Struct.Fields>(fields: A & VariantSchema.Struct.Validate<A, \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">) => VariantSchema.Struct<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L151"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "Model.ts",
      "path": "src/Model.ts"
    },
    "project": "@effect/sql",
    "name": "Union",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const Union: <const Members extends ReadonlyArray<VariantSchema.Struct<any>>>(...members: Members) => VariantSchema.Union<Members> & VariantSchema.Union.Variants<Members, \"insert\" | \"update\" | \"json\" | \"jsonCreate\" | \"jsonUpdate\" | \"select\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Model.ts#L156"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "SafeIntegers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class SafeIntegers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L146"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "SqlClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare const SqlClient: Tag<SqlClient, SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L78"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (options: SqlClient.MakeOptions) => Effect<SqlClient, never, Reactivity>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "makeWithTransaction",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "transactions",
    "signature": "declare const makeWithTransaction: <I, S>(options: { readonly transactionTag: Tag<I, readonly [conn: S, counter: number]>; readonly spanAttributes: ReadonlyArray<readonly [string, unknown]>; readonly acquireConnection: Effect<readonly [CloseableScope | undefined, S], SqlError>; readonly begin: (conn: NoInfer<S>) => Effect<void, SqlError>; readonly savepoint: (conn: NoInfer<S>, id: number) => Effect<void, SqlError>; readonly commit: (conn: NoInfer<S>) => Effect<void, SqlError>; readonly rollback: (conn: NoInfer<S>) => Effect<void, SqlError>; readonly rollbackSavepoint: (conn: NoInfer<S>, id: number) => Effect<void, SqlError>; }) => <R, E, A>(effect: Effect<A, E, R>) => Effect<A, E | SqlError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "TransactionConnection",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const TransactionConnection: Tag<TransactionConnection, readonly [conn: Connection, depth: number]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L140"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "SqlClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SqlClient extends Constructor {\n  readonly [TypeId]: TypeId\n\n  /**\n   * Copy of the client for safeql etc.\n   */\n  readonly safe: this\n\n  /**\n   * Copy of the client without transformations.\n   */\n  readonly withoutTransforms: () => this\n\n  readonly reserve: Effect<Connection, SqlError, Scope>\n\n  /**\n   * With the given effect, ensure all sql queries are run in a transaction.\n   */\n  readonly withTransaction: <R, E, A>(\n    self: Effect<A, E, R>\n  ) => Effect<A, E | SqlError, R>\n\n  /**\n   * Use the Reactivity service from @effect/experimental to create a reactive\n   * query.\n   */\n  readonly reactive: <A, E, R>(\n    keys: ReadonlyArray<unknown> | ReadonlyRecord<string, ReadonlyArray<unknown>>,\n    effect: Effect<A, E, R>\n  ) => Stream<A, E, R>\n  /**\n   * Use the Reactivity service from @effect/experimental to create a reactive\n   * query.\n   */\n  readonly reactiveMailbox: <A, E, R>(\n    keys: ReadonlyArray<unknown> | ReadonlyRecord<string, ReadonlyArray<unknown>>,\n    effect: Effect<A, E, R>\n  ) => Effect<ReadonlyMailbox<A, E>, never, R | Scope>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L34"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "TransactionConnection",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface TransactionConnection {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L133"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L28"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlClient.ts",
      "path": "src/SqlClient.ts"
    },
    "project": "@effect/sql",
    "name": "SqlClient.MakeOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface MakeOptions {\n    readonly acquirer: Connection.Acquirer\n    readonly compiler: Compiler\n    readonly transactionAcquirer?: Connection.Acquirer\n    readonly spanAttributes: ReadonlyArray<readonly [string, unknown]>\n    readonly beginTransaction?: string | undefined\n    readonly rollback?: string | undefined\n    readonly commit?: string | undefined\n    readonly savepoint?: ((name: string) => string) | undefined\n    readonly rollbackSavepoint?: ((name: string) => string) | undefined\n    readonly transformRows?: (<A extends object>(row: ReadonlyArray<A>) => ReadonlyArray<A>) | undefined\n    readonly reactiveMailbox?: <A, E, R>(\n      keys: ReadonlyArray<unknown> | ReadonlyRecord<string, ReadonlyArray<unknown>>,\n      effect: Effect<A, E, R>\n    ) => Effect<ReadonlyMailbox<A, E>, never, R | Scope>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlClient.ts#L89"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlConnection.ts",
      "path": "src/SqlConnection.ts"
    },
    "project": "@effect/sql",
    "name": "Connection",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "declare const Connection: Context.Tag<Connection, Connection>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlConnection.ts#L64"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlConnection.ts",
      "path": "src/SqlConnection.ts"
    },
    "project": "@effect/sql",
    "name": "Connection",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Connection {\n  readonly execute: (\n    sql: string,\n    params: ReadonlyArray<Primitive>,\n    transformRows: (<A extends object>(row: ReadonlyArray<A>) => ReadonlyArray<A>) | undefined\n  ) => Effect<ReadonlyArray<any>, SqlError>\n\n  /**\n   * Execute the specified SQL query and return the raw results directly from\n   * underlying SQL client.\n   */\n  readonly executeRaw: (\n    sql: string,\n    params: ReadonlyArray<Primitive>\n  ) => Effect<unknown, SqlError>\n\n  readonly executeStream: (\n    sql: string,\n    params: ReadonlyArray<Primitive>,\n    transformRows: (<A extends object>(row: ReadonlyArray<A>) => ReadonlyArray<A>) | undefined\n  ) => Stream<any, SqlError>\n\n  readonly executeValues: (\n    sql: string,\n    params: ReadonlyArray<Primitive>\n  ) => Effect<ReadonlyArray<ReadonlyArray<Primitive>>, SqlError>\n\n  readonly executeUnprepared: (\n    sql: string,\n    params: ReadonlyArray<Primitive>,\n    transformRows: (<A extends object>(row: ReadonlyArray<A>) => ReadonlyArray<A>) | undefined\n  ) => Effect<ReadonlyArray<any>, SqlError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlConnection.ts#L15"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SqlConnection.ts",
      "path": "src/SqlConnection.ts"
    },
    "project": "@effect/sql",
    "name": "Row",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Row = { readonly [column: string]: Primitive }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlConnection.ts#L70"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SqlConnection.ts",
      "path": "src/SqlConnection.ts"
    },
    "project": "@effect/sql",
    "name": "Connection.Acquirer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Acquirer = Effect<Connection, SqlError, Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlConnection.ts#L57"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SqlError.ts",
      "path": "src/SqlError.ts"
    },
    "project": "@effect/sql",
    "name": "SqlError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class SqlError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlError.ts#L19"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SqlError.ts",
      "path": "src/SqlError.ts"
    },
    "project": "@effect/sql",
    "name": "ResultLengthMismatch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class ResultLengthMismatch",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlError.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlError.ts",
      "path": "src/SqlError.ts"
    },
    "project": "@effect/sql",
    "name": "SqlErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const SqlErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlError.ts#L9"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SqlError.ts",
      "path": "src/SqlError.ts"
    },
    "project": "@effect/sql",
    "name": "SqlErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type SqlErrorTypeId = typeof SqlErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlError.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlEventJournal.ts",
      "path": "src/SqlEventJournal.ts"
    },
    "project": "@effect/sql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (options?: { readonly entryTable?: string; readonly remotesTable?: string; }) => Effect.Effect<typeof EventJournal.EventJournal.Service, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlEventJournal.ts#L18"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlEventJournal.ts",
      "path": "src/SqlEventJournal.ts"
    },
    "project": "@effect/sql",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (options?: { readonly eventLogTable?: string; readonly remotesTable?: string; }) => Layer.Layer<EventJournal.EventJournal, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlEventJournal.ts#L280"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlEventLogServer.ts",
      "path": "src/SqlEventLogServer.ts"
    },
    "project": "@effect/sql",
    "name": "makeStorage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeStorage: (options?: { readonly entryTablePrefix?: string; readonly remoteIdTable?: string; readonly insertBatchSize?: number; }) => Effect.Effect<typeof EventLogServer.Storage.Service, SqlError, SqlClient.SqlClient | EventLogEncryption | Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlEventLogServer.ts#L24"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlEventLogServer.ts",
      "path": "src/SqlEventLogServer.ts"
    },
    "project": "@effect/sql",
    "name": "layerStorage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerStorage: (options?: { readonly entryTablePrefix?: string; readonly remoteIdTable?: string; readonly insertBatchSize?: number; }) => Layer.Layer<EventLogServer.Storage, SqlError, SqlClient.SqlClient | EventLogEncryption>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlEventLogServer.ts#L241"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlEventLogServer.ts",
      "path": "src/SqlEventLogServer.ts"
    },
    "project": "@effect/sql",
    "name": "layerStorageSubtle",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerStorageSubtle: (options?: { readonly entryTablePrefix?: string; readonly remoteIdTable?: string; readonly insertBatchSize?: number; }) => Layer.Layer<EventLogServer.Storage, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlEventLogServer.ts#L252"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "ordered",
    "description": "Create a resolver for a sql query with a request schema and a result schema.\n\nThe request schema is used to validate the input of the query.\nThe result schema is used to validate the output of the query.\n\nResults are mapped to the requests in order, so the length of the results must match the length of the requests.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "resolvers",
    "signature": "declare const ordered: <T extends string, I, II, RI, A, IA, _, E, RA = never, R = never>(tag: T, options: { readonly Request: Schema.Schema<I, II, RI>; readonly Result: Schema.Schema<A, IA>; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<_>, E>; readonly withContext?: false; } | { readonly Request: Schema.Schema<I, II, RI>; readonly Result: Schema.Schema<A, IA, RA>; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<_>, E, R>; readonly withContext: true; }) => Effect.Effect<SqlResolver<T, I, A, E | ResultLengthMismatch, RI>, never, RA | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L196"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "grouped",
    "description": "Create a resolver the can return multiple results for a single request.\n\nResults are grouped by a common key extracted from the request and result.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "resolvers",
    "signature": "declare const grouped: <T extends string, I, II, K, RI, A, IA, Row, E, RA = never, R = never>(tag: T, options: { readonly Request: Schema.Schema<I, II, RI>; readonly RequestGroupKey: (request: Types.NoInfer<I>) => K; readonly Result: Schema.Schema<A, IA>; readonly ResultGroupKey: (result: Types.NoInfer<A>, row: Types.NoInfer<Row>) => K; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<Row>, E>; readonly withContext?: false; } | { readonly Request: Schema.Schema<I, II, RI>; readonly RequestGroupKey: (request: Types.NoInfer<I>) => K; readonly Result: Schema.Schema<A, IA, RA>; readonly ResultGroupKey: (result: Types.NoInfer<A>, row: Types.NoInfer<Row>) => K; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<Row>, E, R>; readonly withContext: true; }) => Effect.Effect<SqlResolver<T, I, Array<A>, E, RI>, never, RA | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L266"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "findById",
    "description": "Create a resolver that resolves results by id.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "resolvers",
    "signature": "declare const findById: <T extends string, I, II, RI, A, IA, Row, E, RA = never, R = never>(tag: T, options: { readonly Id: Schema.Schema<I, II, RI>; readonly Result: Schema.Schema<A, IA>; readonly ResultId: (result: Types.NoInfer<A>, row: Types.NoInfer<Row>) => I; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<Row>, E>; readonly withContext?: false; } | { readonly Id: Schema.Schema<I, II, RI>; readonly Result: Schema.Schema<A, IA, RA>; readonly ResultId: (result: Types.NoInfer<A>, row: Types.NoInfer<Row>) => I; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<Row>, E, R>; readonly withContext: true; }) => Effect.Effect<SqlResolver<T, I, Option.Option<A>, E, RI>, never, RA | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L345"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "SqlRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "requests",
    "signature": "export interface SqlRequest<T extends string, A, E> extends Request.Request<A, E | ParseError> {\n  readonly _tag: T\n  readonly spanLink: Tracer.SpanLink\n  readonly input: unknown\n  readonly encoded: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L26"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "SqlResolver",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "resolvers",
    "signature": "export interface SqlResolver<T extends string, I, A, E, R>\n  extends RequestResolver.RequestResolver<SqlRequest<T, A, E>>\n{\n  readonly execute: (input: I) => Effect.Effect<A, E | ParseError, R>\n  readonly makeExecute: (\n    resolver: RequestResolver.RequestResolver<SqlRequest<T, A, E>>\n  ) => (input: I) => Effect.Effect<A, E | ParseError, R>\n  readonly cachePopulate: (\n    id: I,\n    result: A\n  ) => Effect.Effect<void>\n  readonly cacheInvalidate: (id: I) => Effect.Effect<void>\n  readonly request: (input: I) => Effect.Effect<SqlRequest<T, A, E>, ParseError, R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L98"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "SqlResolver.ts",
      "path": "src/SqlResolver.ts"
    },
    "project": "@effect/sql",
    "name": "void",
    "description": "Create a resolver that performs side effects.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "resolvers",
    "signature": "declare const void: <T extends string, I, II, RI, E, R = never>(tag: T, options: { readonly Request: Schema.Schema<I, II, RI>; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<unknown>, E>; readonly withContext?: false; } | { readonly Request: Schema.Schema<I, II, RI>; readonly execute: (requests: Array<Types.NoInfer<II>>) => Effect.Effect<ReadonlyArray<unknown>, E, R>; readonly withContext: true; }) => Effect.Effect<SqlResolver<T, I, void, E, RI>, never, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlResolver.ts#L472"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlSchema.ts",
      "path": "src/SqlSchema.ts"
    },
    "project": "@effect/sql",
    "name": "findAll",
    "description": "Run a sql query with a request schema and a result schema.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const findAll: <IR, II, IA, AR, AI, A, R, E>(options: { readonly Request: Schema.Schema<IA, II, IR>; readonly Result: Schema.Schema<A, AI, AR>; readonly execute: (request: II) => Effect.Effect<ReadonlyArray<unknown>, E, R>; }) => (request: IA) => Effect.Effect<ReadonlyArray<A>, E | ParseError, R | IR | AR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlSchema.ts#L16"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlSchema.ts",
      "path": "src/SqlSchema.ts"
    },
    "project": "@effect/sql",
    "name": "findOne",
    "description": "Run a sql query with a request schema and a result schema and return the first result.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const findOne: <IR, II, IA, AR, AI, A, R, E>(options: { readonly Request: Schema.Schema<IA, II, IR>; readonly Result: Schema.Schema<A, AI, AR>; readonly execute: (request: II) => Effect.Effect<ReadonlyArray<unknown>, E, R>; }) => (request: IA) => Effect.Effect<Option.Option<A>, E | ParseError, R | IR | AR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlSchema.ts#L60"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlSchema.ts",
      "path": "src/SqlSchema.ts"
    },
    "project": "@effect/sql",
    "name": "single",
    "description": "Run a sql query with a request schema and a result schema and return the first result.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const single: <IR, II, IA, AR, AI, A, R, E>(options: { readonly Request: Schema.Schema<IA, II, IR>; readonly Result: Schema.Schema<A, AI, AR>; readonly execute: (request: II) => Effect.Effect<ReadonlyArray<unknown>, E, R>; }) => (request: IA) => Effect.Effect<A, E | ParseError | Cause.NoSuchElementException, R | IR | AR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlSchema.ts#L82"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "SqlSchema.ts",
      "path": "src/SqlSchema.ts"
    },
    "project": "@effect/sql",
    "name": "void",
    "description": "Run a sql query with a request schema and discard the result.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const void: <IR, II, IA, R, E>(options: { readonly Request: Schema.Schema<IA, II, IR>; readonly execute: (request: II) => Effect.Effect<ReadonlyArray<unknown>, E, R>; }) => (request: IA) => Effect.Effect<void, E | ParseError, R | IR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlSchema.ts#L51"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlStream.ts",
      "path": "src/SqlStream.ts"
    },
    "project": "@effect/sql",
    "name": "asyncPauseResume",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const asyncPauseResume: <A, E = never, R = never>(register: (emit: { readonly single: (item: A) => void; readonly chunk: (chunk: Chunk.Chunk<A>) => void; readonly array: (chunk: ReadonlyArray<A>) => void; readonly fail: (error: E) => void; readonly end: () => void; }) => { readonly onInterrupt: Effect.Effect<void, never, R>; readonly onPause: Effect.Effect<void>; readonly onResume: Effect.Effect<void>; }, bufferSize?: number) => Stream.Stream<A, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/SqlStream.ts#L15"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "FragmentId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const FragmentId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L20"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "currentTransformer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "transformer",
    "signature": "declare const currentTransformer: FiberRef.FiberRef<Option.Option<Statement.Transformer>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L80"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "withTransformer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "transformer",
    "signature": "declare const withTransformer: { (f: Statement.Transformer): <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>; <A, E, R>(effect: Effect<A, E, R>, f: Statement.Transformer): Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L86"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "withTransformerDisabled",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "transformer",
    "signature": "declare const withTransformerDisabled: <A, E, R>(effect: Effect<A, E, R>) => Effect<A, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L100"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "setTransformer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "transformer",
    "signature": "declare const setTransformer: (f: Statement.Transformer) => Layer.Layer<never, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L107"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "isFragment",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guard",
    "signature": "declare const isFragment: (u: unknown) => u is Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L113"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "isCustom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guard",
    "signature": "declare const isCustom: <A extends Custom<any, any, any, any>>(kind: A[\"kind\"]) => (u: unknown) => u is A",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L119"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "custom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const custom: <C extends Custom<any, any, any, any>>(kind: C[\"kind\"]) => (i0: C[\"i0\"], i1: C[\"i1\"], i2: C[\"i2\"]) => Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L233"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const make: (acquirer: Connection.Acquirer, compiler: Compiler, spanAttributes: ReadonlyArray<readonly [string, unknown]>, transformRows: (<A extends object>(row: ReadonlyArray<A>) => ReadonlyArray<A>) | undefined) => Constructor",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L381"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "unsafeFragment",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const unsafeFragment: (sql: string, params?: ReadonlyArray<Primitive> | undefined) => Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L392"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "and",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const and: (clauses: ReadonlyArray<string | Fragment>) => Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L401"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "or",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const or: (clauses: ReadonlyArray<string | Fragment>) => Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L407"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "csv",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const csv: { (values: ReadonlyArray<string | Fragment>): Fragment; (prefix: string, values: ReadonlyArray<string | Fragment>): Fragment; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L413"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "join",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const join: (literal: string, addParens?: boolean, fallback?: string) => (clauses: ReadonlyArray<string | Fragment>) => Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L422"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "makeCompiler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "compiler",
    "signature": "declare const makeCompiler: <C extends Custom<any, any, any, any> = any>(options: { readonly dialect: Dialect; readonly placeholder: (index: number, value: unknown) => string; readonly onIdentifier: (value: string, withoutTransform: boolean) => string; readonly onRecordUpdate: (placeholders: string, alias: string, columns: string, values: ReadonlyArray<ReadonlyArray<Primitive>>, returning: readonly [sql: string, params: ReadonlyArray<Primitive>] | undefined) => readonly [sql: string, params: ReadonlyArray<Primitive>]; readonly onCustom: (type: C, placeholder: (u: unknown) => string, withoutTransform: boolean) => readonly [sql: string, params: ReadonlyArray<Primitive>]; readonly onInsert?: (columns: ReadonlyArray<string>, placeholders: string, values: ReadonlyArray<ReadonlyArray<Primitive>>, returning: readonly [sql: string, params: ReadonlyArray<Primitive>] | undefined) => readonly [sql: string, binds: ReadonlyArray<Primitive>]; readonly onRecordUpdateSingle?: (columns: ReadonlyArray<string>, values: ReadonlyArray<Primitive>, returning: readonly [sql: string, params: ReadonlyArray<Primitive>] | undefined) => readonly [sql: string, params: ReadonlyArray<Primitive>]; }) => Compiler",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L445"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "makeCompilerSqlite",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "compiler",
    "signature": "declare const makeCompilerSqlite: (transform?: ((_: string) => string) | undefined) => Compiler",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L480"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "defaultEscape",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const defaultEscape: (c: string) => (str: string) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L486"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "primitiveKind",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const primitiveKind: (value: Primitive) => PrimitiveKind",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L491"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "defaultTransforms",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const defaultTransforms: (transformer: (str: string) => string, nested?: boolean) => { readonly value: (value: any) => any; readonly object: (obj: Record<string, any>) => any; readonly array: <A extends object>(rows: ReadonlyArray<A>) => ReadonlyArray<A>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L496"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Fragment",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Fragment {\n  readonly [FragmentId]: (_: never) => FragmentId\n  readonly segments: ReadonlyArray<Segment>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L32"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Statement",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Statement<A> extends Fragment, Effect<ReadonlyArray<A>, SqlError>, Pipeable {\n  readonly raw: Effect<unknown, SqlError>\n  readonly withoutTransform: Effect<ReadonlyArray<A>, SqlError>\n  readonly stream: Stream.Stream<A, SqlError>\n  readonly values: Effect<ReadonlyArray<ReadonlyArray<Primitive>>, SqlError>\n  readonly unprepared: Effect<ReadonlyArray<A>, SqlError>\n  readonly compile: (withoutTransform?: boolean | undefined) => readonly [\n    sql: string,\n    params: ReadonlyArray<Primitive>\n  ]\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L47"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Literal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Literal {\n  readonly _tag: \"Literal\"\n  readonly value: string\n  readonly params?: ReadonlyArray<Primitive> | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L141"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Identifier",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Identifier {\n  readonly _tag: \"Identifier\"\n  readonly value: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L151"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Parameter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Parameter {\n  readonly _tag: \"Parameter\"\n  readonly value: Primitive\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L160"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "ArrayHelper",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface ArrayHelper {\n  readonly _tag: \"ArrayHelper\"\n  readonly value: ReadonlyArray<Primitive | Fragment>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L169"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "RecordInsertHelper",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface RecordInsertHelper {\n  readonly _tag: \"RecordInsertHelper\"\n  readonly value: ReadonlyArray<Record<string, Primitive | Fragment | undefined>>\n  /** @internal */\n  readonly returningIdentifier: string | Fragment | undefined\n  readonly returning: (sql: string | Identifier | Fragment) => RecordInsertHelper\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L178"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "RecordUpdateHelper",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface RecordUpdateHelper {\n  readonly _tag: \"RecordUpdateHelper\"\n  readonly value: ReadonlyArray<Record<string, Primitive | Fragment | undefined>>\n  readonly alias: string\n  /** @internal */\n  readonly returningIdentifier: string | Fragment | undefined\n  readonly returning: (sql: string | Identifier | Fragment) => RecordUpdateHelper\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L190"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "RecordUpdateHelperSingle",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface RecordUpdateHelperSingle {\n  readonly _tag: \"RecordUpdateHelperSingle\"\n  readonly value: Record<string, Primitive | Fragment | undefined>\n  readonly omit: ReadonlyArray<string>\n  /** @internal */\n  readonly returningIdentifier: string | Fragment | undefined\n  readonly returning: (sql: string | Identifier | Fragment) => RecordUpdateHelperSingle\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L203"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Custom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Custom<\n  T extends string = string,\n  A = void,\n  B = void,\n  C = void\n> {\n  readonly _tag: \"Custom\"\n  readonly kind: T\n  readonly i0: A\n  readonly i1: B\n  readonly i2: C\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L216"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Constructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Constructor {\n  <A extends object = Row>(\n    strings: TemplateStringsArray,\n    ...args: Array<Argument>\n  ): Statement<A>\n\n  (value: string): Identifier\n\n  /**\n   * Create unsafe SQL query\n   */\n  readonly unsafe: <A extends object>(\n    sql: string,\n    params?: ReadonlyArray<Primitive> | undefined\n  ) => Statement<A>\n\n  readonly literal: (sql: string) => Fragment\n\n  readonly in: {\n    (value: ReadonlyArray<Primitive>): ArrayHelper\n    (column: string, value: ReadonlyArray<Primitive>): Fragment\n  }\n\n  readonly insert: {\n    (\n      value: ReadonlyArray<Record<string, Primitive | Fragment | undefined>>\n    ): RecordInsertHelper\n    (value: Record<string, Primitive | Fragment | undefined>): RecordInsertHelper\n  }\n\n  /** Update a single row */\n  readonly update: <A extends Record<string, Primitive | Fragment | undefined>>(\n    value: A,\n    omit?: ReadonlyArray<keyof A>\n  ) => RecordUpdateHelperSingle\n\n  /**\n   * Update multiple rows\n   *\n   * **Note:** Not supported in sqlite\n   */\n  readonly updateValues: (\n    value: ReadonlyArray<Record<string, Primitive | Fragment | undefined>>,\n    alias: string\n  ) => RecordUpdateHelper\n\n  /**\n   * Create an `AND` chain for a where clause\n   */\n  readonly and: (clauses: ReadonlyArray<string | Fragment>) => Fragment\n\n  /**\n   * Create an `OR` chain for a where clause\n   */\n  readonly or: (clauses: ReadonlyArray<string | Fragment>) => Fragment\n\n  /**\n   * Create comma seperated values, with an optional prefix\n   *\n   * Useful for `ORDER BY` and `GROUP BY` clauses\n   */\n  readonly csv: {\n    (values: ReadonlyArray<string | Fragment>): Fragment\n    (prefix: string, values: ReadonlyArray<string | Fragment>): Fragment\n  }\n\n  readonly join: (\n    literal: string,\n    addParens?: boolean,\n    fallback?: string\n  ) => (clauses: ReadonlyArray<string | Fragment>) => Fragment\n\n  readonly onDialect: <A, B, C, D, E>(options: {\n    readonly sqlite: () => A\n    readonly pg: () => B\n    readonly mysql: () => C\n    readonly mssql: () => D\n    readonly clickhouse: () => E\n  }) => A | B | C | D | E\n\n  readonly onDialectOrElse: <A, B = never, C = never, D = never, E = never, F = never>(options: {\n    readonly orElse: () => A\n    readonly sqlite?: () => B\n    readonly pg?: () => C\n    readonly mysql?: () => D\n    readonly mssql?: () => E\n    readonly clickhouse?: () => F\n  }) => A | B | C | D | E | F\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L287"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Compiler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "compiler",
    "signature": "export interface Compiler {\n  readonly dialect: Dialect\n  readonly compile: (\n    statement: Fragment,\n    withoutTransform: boolean\n  ) => readonly [sql: string, params: ReadonlyArray<Primitive>]\n  readonly withoutTransform: this\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L432"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "FragmentId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type FragmentId = typeof FragmentId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Dialect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Dialect = \"sqlite\" | \"pg\" | \"mysql\" | \"mssql\" | \"clickhouse\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L41"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Segment",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Segment = | Literal\n  | Identifier\n  | Parameter\n  | ArrayHelper\n  | RecordInsertHelper\n  | RecordUpdateHelper\n  | RecordUpdateHelperSingle\n  | Custom",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L127"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Primitive",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Primitive = | string\n  | number\n  | bigint\n  | boolean\n  | Date\n  | null\n  | Int8Array\n  | Uint8Array",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L241"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "PrimitiveKind",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type PrimitiveKind = | \"string\"\n  | \"number\"\n  | \"bigint\"\n  | \"boolean\"\n  | \"Date\"\n  | \"null\"\n  | \"Int8Array\"\n  | \"Uint8Array\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L255"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Helper",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Helper = | ArrayHelper\n  | RecordInsertHelper\n  | RecordUpdateHelper\n  | RecordUpdateHelperSingle\n  | Identifier\n  | Custom",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L269"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Argument",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Argument = Primitive | Helper | Fragment",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L281"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Statement.ts",
      "path": "src/Statement.ts"
    },
    "project": "@effect/sql",
    "name": "Statement.Transformer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Transformer = (\n    self: Statement<unknown>,\n    sql: Constructor,\n    context: FiberRefs.FiberRefs,\n    span: Tracer.Span\n  ) => Effect<Statement<unknown>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/sql/src/Statement.ts#L68"
  }
]