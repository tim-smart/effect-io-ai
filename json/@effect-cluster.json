[
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityNotManagedByRunner",
    "description": "Represents an error that occurs when a Runner receives a message for an entity\nthat it is not responsible for managing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class EntityNotManagedByRunner",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L31"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "MalformedMessage",
    "description": "Represents an error that occurs when a message fails to be properly\ndeserialized by an entity.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class MalformedMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L55"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "PersistenceError",
    "description": "Represents an error that occurs when a message fails to be persisted into\ncluster's mailbox storage.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class PersistenceError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L88"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "RunnerNotRegistered",
    "description": "Represents an error that occurs when a Runner is not registered with the shard\nmanager.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class RunnerNotRegistered",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L112"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "RunnerUnavailable",
    "description": "Represents an error that occurs when a Runner is unresponsive.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class RunnerUnavailable",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L128"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "MailboxFull",
    "description": "Represents an error that occurs when the entities mailbox is full.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class MailboxFull",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L151"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "AlreadyProcessingMessage",
    "description": "Represents an error that occurs when the entity is already processing a\nrequest.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class AlreadyProcessingMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L175"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L16"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "ClusterError.ts",
      "path": "src/ClusterError.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterError.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "shards",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const shards: Metric.Metric.Gauge<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L10"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "entities",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const entities: Metric.Metric.Gauge<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "mailboxSize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const mailboxSize: Metric.Metric.Gauge<bigint>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L24"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "singletons",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const singletons: Metric.Metric.Gauge<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "runners",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const runners: Metric.Metric.Gauge<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L38"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "assignedShards",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const assignedShards: Metric.Metric.Gauge<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L44"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "unassignedShards",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const unassignedShards: Metric.Metric.Gauge<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L50"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "rebalances",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const rebalances: Metric.Metric.Counter<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L56"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ClusterMetrics.ts",
      "path": "src/ClusterMetrics.ts"
    },
    "project": "@effect/cluster",
    "name": "runnerHealthChecked",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "metrics",
    "signature": "declare const runnerHealthChecked: Metric.Metric.Counter<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterMetrics.ts#L62"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ClusterSchema.ts",
      "path": "src/ClusterSchema.ts"
    },
    "project": "@effect/cluster",
    "name": "Persisted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Annotations",
    "signature": "declare class Persisted",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ClusterSchema.ts#L11"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "DeliverAt.ts",
      "path": "src/DeliverAt.ts"
    },
    "project": "@effect/cluster",
    "name": "symbol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const symbol: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/DeliverAt.ts#L11"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DeliverAt.ts",
      "path": "src/DeliverAt.ts"
    },
    "project": "@effect/cluster",
    "name": "isDeliverAt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isDeliverAt: (self: unknown) => self is DeliverAt",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/DeliverAt.ts#L25"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "DeliverAt.ts",
      "path": "src/DeliverAt.ts"
    },
    "project": "@effect/cluster",
    "name": "toMillis",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const toMillis: (self: unknown) => number | null",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/DeliverAt.ts#L31"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "DeliverAt.ts",
      "path": "src/DeliverAt.ts"
    },
    "project": "@effect/cluster",
    "name": "DeliverAt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface DeliverAt {\n  [symbol](): DateTime\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/DeliverAt.ts#L17"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "CurrentAddress",
    "description": "A Context.Tag to access the current entity address.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare class CurrentAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L355"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "CurrentRunnerAddress",
    "description": "A Context.Tag to access the current Runner address.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare class CurrentRunnerAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L366"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Request",
    "signature": "declare class Request<Rpc>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L415"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L34"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "isEntity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isEntity: (u: unknown) => u is Any",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L169"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "fromRpcGroup",
    "description": "Creates a new `Entity` of the specified `type` which will accept messages\nthat adhere to the provided `RpcGroup`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromRpcGroup: <Rpcs extends Rpc.Any>(type: string, protocol: RpcGroup.RpcGroup<Rpcs>) => Entity<Rpcs>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L313"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "description": "Creates a new `Entity` of the specified `type` which will accept messages\nthat adhere to the provided schemas.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <Rpcs extends ReadonlyArray<Rpc.Any>>(type: string, protocol: Rpcs) => Entity<Rpcs[number]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L337"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "Entity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Entity<in out Rpcs extends Rpc.Any> extends Equal.Equal {\n  readonly [TypeId]: TypeId\n  /**\n   * The name of the entity type.\n   */\n  readonly type: EntityType\n\n  /**\n   * A RpcGroup definition for messages which represents the messaging protocol\n   * that the entity is capable of processing.\n   */\n  readonly protocol: RpcGroup.RpcGroup<Rpcs>\n\n  /**\n   * Annotate the entity with a value.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): Entity<Rpcs>\n\n  /**\n   * Annotate the Rpc's above this point with a value.\n   */\n  annotateRpcs<I, S>(tag: Context.Tag<I, S>, value: S): Entity<Rpcs>\n\n  /**\n   * Annotate the entity with a context object.\n   */\n  annotateContext<S>(context: Context.Context<S>): Entity<Rpcs>\n\n  /**\n   * Annotate the Rpc's above this point with a context object.\n   */\n  annotateRpcsContext<S>(context: Context.Context<S>): Entity<Rpcs>\n\n  /**\n   * Create a client for this entity.\n   */\n  readonly client: Effect.Effect<\n    (entityId: string) => RpcClient.RpcClient<Rpcs, MailboxFull | AlreadyProcessingMessage | PersistenceError>,\n    never,\n    Sharding\n  >\n\n  /**\n   * Create a Layer from an Entity.\n   *\n   * It will register the entity with the Sharding service.\n   */\n  toLayer<\n    Handlers extends HandlersFrom<Rpcs>,\n    RX = never\n  >(\n    build: Handlers | Effect.Effect<Handlers, never, RX>,\n    options?: {\n      readonly maxIdleTime?: DurationInput | undefined\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly mailboxCapacity?: number | \"unbounded\" | undefined\n    }\n  ): Layer.Layer<\n    never,\n    never,\n    | Exclude<RX, Scope | CurrentAddress | CurrentRunnerAddress>\n    | RpcGroup.HandlersContext<Rpcs, Handlers>\n    | Rpc.Context<Rpcs>\n    | Rpc.Middleware<Rpcs>\n    | Sharding\n  >\n\n  /**\n   * Create a Layer from an Entity.\n   *\n   * It will register the entity with the Sharding service.\n   */\n  toLayerMailbox<\n    R,\n    RX = never\n  >(\n    build:\n      | ((\n        mailbox: Mailbox.ReadonlyMailbox<Envelope.Request<Rpcs>>,\n        replier: Replier<Rpcs>\n      ) => Effect.Effect<never, never, R>)\n      | Effect.Effect<\n        (\n          mailbox: Mailbox.ReadonlyMailbox<Envelope.Request<Rpcs>>,\n          replier: Replier<Rpcs>\n        ) => Effect.Effect<never, never, R>,\n        never,\n        RX\n      >,\n    options?: {\n      readonly maxIdleTime?: DurationInput | undefined\n      readonly mailboxCapacity?: number | \"unbounded\" | undefined\n    }\n  ): Layer.Layer<\n    never,\n    never,\n    | Exclude<RX, Scope | CurrentAddress>\n    | R\n    | Rpc.Context<Rpcs>\n    | Rpc.Middleware<Rpcs>\n    | Sharding\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L46"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "Replier",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Replier",
    "signature": "export interface Replier<Rpcs extends Rpc.Any> {\n  readonly succeed: <R extends Rpcs>(\n    request: Envelope.Request<R>,\n    value: Replier.Success<R>\n  ) => Effect.Effect<void>\n\n  readonly fail: <R extends Rpcs>(\n    request: Envelope.Request<R>,\n    error: Rpc.Error<R>\n  ) => Effect.Effect<void>\n\n  readonly failCause: <R extends Rpcs>(\n    request: Envelope.Request<R>,\n    cause: Cause.Cause<Rpc.Error<R>>\n  ) => Effect.Effect<void>\n\n  readonly complete: <R extends Rpcs>(\n    request: Envelope.Request<R>,\n    exit: Exit.Exit<Replier.Success<R>, Rpc.Error<R>>\n  ) => Effect.Effect<void>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L375"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L40"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Any = Entity<Rpc.Any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L153"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "HandlersFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HandlersFrom<Rpc> = {\n  readonly [Current in Rpc as Current[\"_tag\"]]: (\n    envelope: Request<Current>\n  ) => RpcGroup.ResultFrom<Current> | Rpc.Fork<RpcGroup.ResultFrom<Current>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L159"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Entity.ts",
      "path": "src/Entity.ts"
    },
    "project": "@effect/cluster",
    "name": "Replier.Success",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Replier",
    "signature": "type Success<R> = Rpc.Success<R> extends Stream.Stream<infer _A, infer _E, infer _R> ?\n    Stream.Stream<_A, _E | Rpc.Error<R>, _R> | Mailbox.ReadonlyMailbox<_A, _E | Rpc.Error<R>>\n    : Rpc.Success<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Entity.ts#L406"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "EntityAddress.ts",
      "path": "src/EntityAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityAddress",
    "description": "Represents the unique address of an entity within the cluster.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class EntityAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityAddress.ts#L30"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "EntityAddress.ts",
      "path": "src/EntityAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityAddress.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "EntityAddress.ts",
      "path": "src/EntityAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityAddressFromSelf",
    "description": "Represents the unique address of an entity within the cluster.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const EntityAddressFromSelf: Schema.Schema<EntityAddress, EntityAddress, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityAddress.ts#L53"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "EntityAddress.ts",
      "path": "src/EntityAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityAddress.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "EntityId.ts",
      "path": "src/EntityId.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const EntityId: Schema.brand<typeof Schema.NonEmptyTrimmedString, \"EntityId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityId.ts#L10"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "EntityId.ts",
      "path": "src/EntityId.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type EntityId = typeof EntityId.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityId.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "EntityType.ts",
      "path": "src/EntityType.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityType",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const EntityType: Schema.brand<typeof Schema.NonEmptyTrimmedString, \"EntityType\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityType.ts#L10"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "EntityType.ts",
      "path": "src/EntityType.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityType",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type EntityType = typeof EntityType.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/EntityType.ts#L16"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "AckChunk",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class AckChunk",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L75"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Interrupt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class Interrupt",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L101"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L17"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "EnvelopeFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const EnvelopeFromSelf: Schema.Schema<Envelope.Any, Envelope.Any, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L203"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "RequestFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const RequestFromSelf: Schema.Schema<Request.Any, Request.Any, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L214"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "PartialEncodedRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const PartialEncodedRequest: Schema.Struct<{ _tag: Schema.Literal<[\"Request\"]>; requestId: Schema.Schema<Snowflake, string>; address: typeof EntityAddress; tag: typeof Schema.String; payload: typeof Schema.Unknown; headers: Schema.Schema<Headers.Headers, ReadonlyRecord<string, string>>; traceId: typeof Schema.String; spanId: typeof Schema.String; sampled: typeof Schema.Boolean; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L225"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "PartialEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const PartialEncoded: Schema.Union<[Schema.Struct<{ _tag: Schema.Literal<[\"Request\"]>; requestId: Schema.Schema<Snowflake, string>; address: typeof EntityAddress; tag: typeof Schema.String; payload: typeof Schema.Unknown; headers: Schema.Schema<Headers.Headers, ReadonlyRecord<string, string>>; traceId: typeof Schema.String; spanId: typeof Schema.String; sampled: typeof Schema.Boolean; }>, typeof AckChunk, typeof Interrupt]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L253"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "PartialEncodedArray",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const PartialEncodedArray: Schema.Schema<Array<Envelope.PartialEncoded>, Array<Envelope.Encoded>, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L280"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "PartialEncodedRequestFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const PartialEncodedRequestFromSelf: Schema.Struct<{ _tag: Schema.Literal<[\"Request\"]>; requestId: Schema.Schema<Snowflake>; address: Schema.Schema<EntityAddress>; tag: typeof Schema.String; payload: typeof Schema.Unknown; headers: Schema.Schema<Headers.Headers>; traceId: typeof Schema.String; spanId: typeof Schema.String; sampled: typeof Schema.Boolean; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L289"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "PartialEncodedFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const PartialEncodedFromSelf: Schema.Union<[Schema.Struct<{ _tag: Schema.Literal<[\"Request\"]>; requestId: Schema.Schema<Snowflake>; address: Schema.Schema<EntityAddress>; tag: typeof Schema.String; payload: typeof Schema.Unknown; headers: Schema.Schema<Headers.Headers>; traceId: typeof Schema.String; spanId: typeof Schema.String; sampled: typeof Schema.Boolean; }>, Schema.Schema<AckChunk, AckChunk, never>, Schema.Schema<Interrupt, Interrupt, never>]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L317"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "isEnvelope",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isEnvelope: (u: unknown) => u is Envelope<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L169"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "makeRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeRequest: <Rpc extends Rpc.Any>(options: { readonly requestId: Snowflake; readonly address: EntityAddress; readonly tag: Rpc.Tag<Rpc>; readonly payload: Rpc.Payload<Rpc>; readonly headers: Headers.Headers; readonly traceId: string; readonly spanId: string; readonly sampled: boolean; }) => Request<Rpc>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L175"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "primaryKey",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "primary key",
    "signature": "declare const primaryKey: <R extends Rpc.Any>(envelope: Envelope<R>) => string | null",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L345"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Request<in out Rpc extends Rpc.Any> {\n  readonly [TypeId]: TypeId\n  readonly _tag: \"Request\"\n  readonly requestId: Snowflake\n  readonly address: EntityAddress\n  readonly tag: Rpc.Tag<Rpc>\n  readonly payload: Rpc.Payload<Rpc>\n  readonly headers: Headers.Headers\n  readonly traceId: string\n  readonly spanId: string\n  readonly sampled: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L58"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L23"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Envelope",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Envelope<R> = Request<R> | AckChunk | Interrupt",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L29"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Envelope.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Any = Envelope<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L39"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Envelope.Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Encoded = Request.Encoded | typeof AckChunk.Encoded | typeof Interrupt.Encoded",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L45"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Envelope.PartialEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PartialEncoded = Request.PartialEncoded | AckChunk | Interrupt",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L51"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Request.Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Encoded {\n    readonly _tag: \"Request\"\n    readonly requestId: string\n    readonly address: typeof EntityAddress.Encoded\n    readonly tag: string\n    readonly payload: unknown\n    readonly headers: ReadonlyRecord<string, string>\n    readonly traceId: string\n    readonly spanId: string\n    readonly sampled: boolean\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L136"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Request.PartialEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PartialEncoded {\n    readonly _tag: \"Request\"\n    readonly requestId: Snowflake\n    readonly address: EntityAddress\n    readonly tag: string\n    readonly payload: unknown\n    readonly headers: Headers.Headers\n    readonly traceId: string\n    readonly spanId: string\n    readonly sampled: boolean\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L152"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Envelope.ts",
      "path": "src/Envelope.ts"
    },
    "project": "@effect/cluster",
    "name": "Request.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Any = Request<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Envelope.ts#L130"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpCommon.ts",
      "path": "src/HttpCommon.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientProtocolHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerClientProtocolHttp: (options: { readonly path: string; readonly https?: boolean | undefined; }) => Layer.Layer<RpcClientProtocol, never, RpcSerialization.RpcSerialization | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpCommon.ts#L17"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpCommon.ts",
      "path": "src/HttpCommon.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientProtocolWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerClientProtocolWebsocket: (options: { readonly path: string; readonly https?: boolean | undefined; }) => Layer.Layer<RpcClientProtocol, never, RpcSerialization.RpcSerialization | Socket.WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpCommon.ts#L47"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "toHttpApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Http App",
    "signature": "declare const toHttpApp: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | MessageStorage | RpcSerialization.RpcSerialization | Sharding.Sharding>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "toHttpAppWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Http App",
    "signature": "declare const toHttpAppWebsocket: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | MessageStorage | RpcSerialization.RpcSerialization | Sharding.Sharding>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L44"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerClient: Layer.Layer<Sharding.Sharding | Runners.Runners, never, ShardStorage | MessageStorage | ShardingConfig.ShardingConfig | Runners.RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L62"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerHttp: Layer.Layer<Sharding.Sharding | Runners.Runners, never, ShardStorage | MessageStorage | ShardingConfig.ShardingConfig | RpcSerialization.RpcSerialization | HttpClient.HttpClient | HttpServer.HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L139"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerHttpClientOnly",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerHttpClientOnly: Layer.Layer<Sharding.Sharding | Runners.Runners, never, MessageStorage | ShardingConfig.ShardingConfig | RpcSerialization.RpcSerialization | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L157"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWebsocket: Layer.Layer<Sharding.Sharding | Runners.Runners, never, ShardStorage | MessageStorage | ShardingConfig.ShardingConfig | RpcSerialization.RpcSerialization | Socket.WebSocketConstructor | HttpServer.HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L172"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWebsocketClientOnly",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWebsocketClientOnly: Layer.Layer<Sharding.Sharding | Runners.Runners, never, MessageStorage | ShardingConfig.ShardingConfig | RpcSerialization.RpcSerialization | Socket.WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L190"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "description": "A HTTP layer for the `Runners` services, that adds a route to the provided\n`HttpRouter.Tag`.\n\nBy default, it uses the `HttpRouter.Default` tag.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; readonly logAddress?: boolean | undefined; }) => Layer.Layer<Sharding.Sharding | Runners.Runners, never, RpcSerialization.RpcSerialization | ShardingConfig.ShardingConfig | Runners.RpcClientProtocol | HttpServer.HttpServer | MessageStorage | ShardStorage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L81"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpRunner.ts",
      "path": "src/HttpRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWebsocketOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWebsocketOptions: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; readonly logAddress?: boolean | undefined; }) => Layer.Layer<Sharding.Sharding | Runners.Runners, never, RpcSerialization.RpcSerialization | ShardingConfig.ShardingConfig | Runners.RpcClientProtocol | HttpServer.HttpServer | MessageStorage | ShardStorage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpRunner.ts#L105"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "toHttpApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Http App",
    "signature": "declare const toHttpApp: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | ShardManager.ShardManager | RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "toHttpAppWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Http App",
    "signature": "declare const toHttpAppWebsocket: Effect.Effect<HttpApp.Default<never, Scope>, never, Scope | ShardManager.ShardManager | RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L42"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerHttp",
    "description": "A HTTP layer for the `ShardManager` server, that adds a route to the provided\n`HttpRouter.Tag`.\n\nBy default, it uses the `HttpRouter.Default` tag.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerHttp: Layer.Layer<ShardManager.ShardManager, never, ShardStorage | ShardingConfig | RpcSerialization.RpcSerialization | RunnerHealth.RunnerHealth | ShardManager.Config | HttpClient.HttpClient | HttpServer.HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L222"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWebsocket",
    "description": "A Websocket layer for the `ShardManager` server, that adds a route to the provided\n`HttpRouter.Tag`.\n\nBy default, it uses the `HttpRouter.Default` tag.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWebsocket: Layer.Layer<ShardManager.ShardManager, never, ShardStorage | ShardingConfig | RpcSerialization.RpcSerialization | RunnerHealth.RunnerHealth | ShardManager.Config | Socket.WebSocketConstructor | HttpServer.HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L243"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerRunnerHealthHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerRunnerHealthHttp: Layer.Layer<RunnerHealth.RunnerHealth, never, ShardingConfig | RpcSerialization.RpcSerialization | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L259"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerRunnerHealthWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerRunnerHealthWebsocket: Layer.Layer<RunnerHealth.RunnerHealth, never, ShardingConfig | RpcSerialization.RpcSerialization | Socket.WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L269"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoServerHttp",
    "description": "A layer for the `ShardManager` service, that does not run a server.\n\nIt only provides the `Runners` rpc client.\n\nYou can use this with the `toHttpApp` and `toHttpAppWebsocket` apis\nto run a complete `ShardManager` server.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerNoServerHttp: (options: { readonly runnerPath: string; readonly runnerHttps?: boolean | undefined; }) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpClient.HttpClient | ShardManager.Config | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L64"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoServerWebsocket",
    "description": "A layer for the `ShardManager` service, that does not run a server.\n\nIt only provides the `Runners` rpc client.\n\nYou can use this with the `toHttpApp` and `toHttpAppWebsocket` apis\nto run a complete `ShardManager` server.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerNoServerWebsocket: (options: { readonly runnerPath: string; readonly runnerHttps?: boolean | undefined; }) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | Socket.WebSocketConstructor | ShardManager.Config | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L102"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerHttpOptions",
    "description": "A HTTP layer for the `ShardManager` server, that adds a route to the provided\n`HttpRouter.Tag`.\n\nBy default, it uses the `HttpRouter.Default` tag.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerHttpOptions: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; readonly runnerPath: string; readonly runnerHttps?: boolean | undefined; readonly logAddress?: boolean | undefined; }) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpClient.HttpClient | HttpServer.HttpServer | ShardManager.Config | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L138"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpShardManager.ts",
      "path": "src/HttpShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWebsocketOptions",
    "description": "A WebSocket layer for the `ShardManager` server, that adds a route to the provided\n`HttpRouter.Tag`.\n\nBy default, it uses the `HttpRouter.Default` tag.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWebsocketOptions: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; readonly runnerPath: string; readonly runnerHttps?: boolean | undefined; readonly logAddress?: boolean | undefined; }) => Layer.Layer<ShardManager.ShardManager, never, RpcSerialization.RpcSerialization | ShardStorage | RunnerHealth.RunnerHealth | HttpServer.HttpServer | Socket.WebSocketConstructor | ShardManager.Config | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/HttpShardManager.ts#L175"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MachineId.ts",
      "path": "src/MachineId.ts"
    },
    "project": "@effect/cluster",
    "name": "MachineId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const MachineId: Schema.brand<typeof Schema.Int, \"MachineId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MachineId.ts#L10"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MachineId.ts",
      "path": "src/MachineId.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (shardId: number) => MachineId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MachineId.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MachineId.ts",
      "path": "src/MachineId.ts"
    },
    "project": "@effect/cluster",
    "name": "MachineId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type MachineId = typeof MachineId.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MachineId.ts#L21"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "IncomingRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "incoming",
    "signature": "declare class IncomingRequest<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L47"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "IncomingRequestLocal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "outgoing",
    "signature": "declare class IncomingRequestLocal<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L57"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "IncomingEnvelope",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "incoming",
    "signature": "declare class IncomingEnvelope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L67"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "OutgoingRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "outgoing",
    "signature": "declare class OutgoingRequest<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L82"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "OutgoingEnvelope",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "outgoing",
    "signature": "declare class OutgoingEnvelope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L99"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "incomingLocalFromOutgoing",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "incoming",
    "signature": "declare const incomingLocalFromOutgoing: <R extends Rpc.Any>(self: Outgoing<R>) => IncomingLocal<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L32"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "serialize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const serialize: <Rpc extends Rpc.Any>(message: Outgoing<Rpc>) => Effect.Effect<Envelope.Envelope.PartialEncoded, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L108"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "serializeEnvelope",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const serializeEnvelope: <Rpc extends Rpc.Any>(message: Outgoing<Rpc>) => Effect.Effect<Envelope.Envelope.Encoded, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L125"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "serializeRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const serializeRequest: <Rpc extends Rpc.Any>(self: OutgoingRequest<Rpc>) => Effect.Effect<Envelope.Request.PartialEncoded, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L137"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "deserializeLocal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const deserializeLocal: <Rpc extends Rpc.Any>(self: Outgoing<Rpc>, encoded: Envelope.Envelope.PartialEncoded) => Effect.Effect<IncomingLocal<Rpc>, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L155"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "Incoming",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "incoming",
    "signature": "type Incoming<R> = IncomingRequest<R> | IncomingEnvelope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "IncomingLocal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "incoming",
    "signature": "type IncomingLocal<R> = IncomingRequestLocal<R> | IncomingEnvelope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Message.ts",
      "path": "src/Message.ts"
    },
    "project": "@effect/cluster",
    "name": "Outgoing",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "outgoing",
    "signature": "type Outgoing<R> = OutgoingRequest<R> | OutgoingEnvelope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Message.ts#L76"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "MessageStorage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare class MessageStorage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L33"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "MemoryDriver",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Memory",
    "signature": "declare class MemoryDriver",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L510"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "declare const SaveResult: { readonly Success: <A>(args: void) => SaveResult.Success; readonly Duplicate: <A>(args: { readonly originalId: Snowflake.Snowflake; readonly lastReceivedReply: Option.Option<Reply.Reply<any>>; }) => SaveResult.Duplicate<any>; readonly $is: <Tag extends \"Success\" | \"Duplicate\">(tag: Tag) => { <T extends SaveResult<any>>(u: T): u is T & { readonly _tag: Tag; }; (u: unknown): u is Extract<SaveResult.Success, { readonly _tag: Tag; }> | Extract<SaveResult.Duplicate<any>, { readonly _tag: Tag; }>; }; readonly $match: { <A, B, C, D, Cases extends { readonly Success: (args: SaveResult.Success) => any; readonly Duplicate: (args: SaveResult.Duplicate<any>) => any; }>(cases: Cases): (self: SaveResult<any>) => Unify<ReturnType<Cases[\"Success\" | \"Duplicate\"]>>; <A, B, C, D, Cases extends { readonly Success: (args: SaveResult.Success) => any; readonly Duplicate: (args: SaveResult.Duplicate<any>) => any; }>(self: SaveResult<any>, cases: Cases): Unify<ReturnType<Cases[\"Success\" | \"Duplicate\"]>>; }; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L109"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResultEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "declare const SaveResultEncoded: { readonly Success: Data.Case.Constructor<SaveResult.Success, \"_tag\">; readonly Duplicate: Data.Case.Constructor<SaveResult.DuplicateEncoded, \"_tag\">; readonly $is: <Tag extends \"Success\" | \"Duplicate\">(tag: Tag) => (u: unknown) => u is Extract<SaveResult.Success, { readonly _tag: Tag; }> | Extract<SaveResult.DuplicateEncoded, { readonly _tag: Tag; }>; readonly $match: { <Cases extends { readonly Success: (args: SaveResult.Success) => any; readonly Duplicate: (args: SaveResult.DuplicateEncoded) => any; }>(cases: Cases): (value: SaveResult.Encoded) => Unify<ReturnType<Cases[\"Success\" | \"Duplicate\"]>>; <Cases extends { readonly Success: (args: SaveResult.Success) => any; readonly Duplicate: (args: SaveResult.DuplicateEncoded) => any; }>(value: SaveResult.Encoded, cases: Cases): Unify<ReturnType<Cases[\"Success\" | \"Duplicate\"]>>; }; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L115"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "makeEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeEncoded: (encoded: Encoded) => Effect.Effect<MessageStorage[\"Type\"], never, Snowflake.Generator>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L298"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "noop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const noop: { readonly saveRequest: <R extends Rpc.Any>(envelope: Message.OutgoingRequest<R>) => Effect.Effect<SaveResult<R>, PersistenceError | MalformedMessage>; readonly saveEnvelope: (envelope: Message.OutgoingEnvelope) => Effect.Effect<void, PersistenceError | MalformedMessage>; readonly saveReply: <R extends Rpc.Any>(reply: Reply.ReplyWithContext<R>) => Effect.Effect<void, PersistenceError | MalformedMessage>; readonly repliesFor: <R extends Rpc.Any>(requests: Iterable<Message.OutgoingRequest<R>>) => Effect.Effect<Array<Reply.Reply<R>>, PersistenceError | MalformedMessage>; readonly registerReplyHandler: <R extends Rpc.Any>(message: Message.OutgoingRequest<R>) => Effect.Effect<void>; readonly unprocessedMessages: (shardIds: Iterable<ShardId>) => Effect.Effect<Array<Message.Incoming<any>>, PersistenceError>; readonly unprocessedMessagesById: <R extends Rpc.Any>(messageIds: Iterable<Snowflake.Snowflake>) => Effect.Effect<Array<Message.Incoming<R>>, PersistenceError>; readonly resetAddress: (address: EntityAddress) => Effect.Effect<void, PersistenceError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L482"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerNoop: Layer.Layer<MessageStorage, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L670"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerMemory",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerMemory: Layer.Layer<MessageStorage | MemoryDriver, never, ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L676"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (storage: Omit<MessageStorage[\"Type\"], \"registerReplyHandler\">) => Effect.Effect<MessageStorage[\"Type\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L266"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "type SaveResult<R> = SaveResult.Success | SaveResult.Duplicate<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L103"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Encoded",
    "signature": "type Encoded = {\n  /**\n   * Save the provided message and its associated metadata.\n   */\n  readonly saveEnvelope: (\n    options: {\n      readonly envelope: Envelope.Envelope.Encoded\n      readonly primaryKey: string | null\n      readonly deliverAt: number | null\n    }\n  ) => Effect.Effect<SaveResult.Encoded, PersistenceError>\n\n  /**\n   * Save the provided `Reply` and its associated metadata.\n   */\n  readonly saveReply: (\n    reply: Reply.ReplyEncoded<any>\n  ) => Effect.Effect<void, PersistenceError>\n\n  /**\n   * Retrieves the replies for the specified requests.\n   *\n   * - Un-acknowledged chunk replies\n   * - WithExit replies\n   */\n  readonly repliesFor: (requestIds: Array<string>) => Effect.Effect<\n    Array<Reply.ReplyEncoded<any>>,\n    PersistenceError\n  >\n\n  /**\n   * Retrieves the unprocessed messages for the given shards.\n   *\n   * A message is unprocessed when:\n   *\n   * - Requests that have no WithExit replies\n   *   - Or they have no unacknowledged chunk replies\n   * - The latest AckChunk envelope\n   * - All Interrupt's for unprocessed requests\n   */\n  readonly unprocessedMessages: (\n    shardIds: ReadonlyArray<number>,\n    now: number\n  ) => Effect.Effect<\n    Array<{\n      readonly envelope: Envelope.Envelope.Encoded\n      readonly lastSentReply: Option.Option<Reply.ReplyEncoded<any>>\n    }>,\n    PersistenceError\n  >\n\n  /**\n   * Retrieves the unprocessed messages by id.\n   */\n  readonly unprocessedMessagesById: (\n    messageIds: ReadonlyArray<Snowflake.Snowflake>,\n    now: number\n  ) => Effect.Effect<\n    Array<{\n      readonly envelope: Envelope.Envelope.Encoded\n      readonly lastSentReply: Option.Option<Reply.ReplyEncoded<any>>\n    }>,\n    PersistenceError\n  >\n\n  /**\n   * Reset the mailbox state for the provided address.\n   */\n  readonly resetAddress: (\n    address: EntityAddress\n  ) => Effect.Effect<void, PersistenceError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L169"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "EncodedUnprocessedOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Encoded",
    "signature": "type EncodedUnprocessedOptions<A> = {\n  readonly existingShards: Array<number>\n  readonly newShards: Array<number>\n  readonly cursor: Option.Option<A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L246"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "EncodedRepliesOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Encoded",
    "signature": "type EncodedRepliesOptions<A> = {\n  readonly existingRequests: Array<string>\n  readonly newRequests: Array<string>\n  readonly cursor: Option.Option<A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L256"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "MemoryEntry",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Memory",
    "signature": "type MemoryEntry = {\n  readonly envelope: Envelope.Request.Encoded\n  lastReceivedChunk: Option.Option<Reply.ChunkEncoded<any>>\n  replies: Array<Reply.ReplyEncoded<any>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L500"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult.Success",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "export interface Success {\n    readonly _tag: \"Success\"\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L132"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult.Duplicate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "export interface Duplicate<R extends Rpc.Any> {\n    readonly _tag: \"Duplicate\"\n    readonly originalId: Snowflake.Snowflake\n    readonly lastReceivedReply: Option.Option<Reply.Reply<R>>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L140"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult.DuplicateEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "export interface DuplicateEncoded {\n    readonly _tag: \"Duplicate\"\n    readonly originalId: Snowflake.Snowflake\n    readonly lastReceivedReply: Option.Option<Reply.ReplyEncoded<any>>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L150"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult.Constructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "export interface Constructor extends Data.TaggedEnum.WithGenerics<1> {\n    readonly taggedEnum: SaveResult<this[\"A\"]>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L160"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MessageStorage.ts",
      "path": "src/MessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "SaveResult.Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "SaveResult",
    "signature": "type Encoded = SaveResult.Success | SaveResult.DuplicateEncoded",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/MessageStorage.ts#L126"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "ReplyWithContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class ReplyWithContext<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L48"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "Chunk",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class Chunk<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L151"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "WithExit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class WithExit<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L224"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L24"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const Encoded: Schema.Union<[Schema.Struct<{ _tag: Schema.Literal<[\"WithExit\"]>; requestId: typeof Schema.String; id: typeof Schema.String; exit: typeof Schema.Unknown; }>, Schema.Struct<{ _tag: Schema.Literal<[\"Chunk\"]>; requestId: typeof Schema.String; id: typeof Schema.String; sequence: typeof Schema.Number; values: Schema.Array$<typeof Schema.Unknown>; }>]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L131"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "isReply",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isReply: (u: unknown) => u is Reply<Rpc.Any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L36"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "Reply",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const Reply: <R extends Rpc.Any>(rpc: R) => Schema.Schema<Reply<R>, ReplyEncoded<R>, Rpc.Context<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L114"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "serialize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const serialize: <R extends Rpc.Any>(self: ReplyWithContext<R>) => Effect.Effect<ReplyEncoded<R>, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L272"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "serializeLastReceived",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization / deserialization",
    "signature": "declare const serializeLastReceived: <R extends Rpc.Any>(self: OutgoingRequest<R>) => Effect.Effect<Option.Option<ReplyEncoded<R>>, MalformedMessage>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L285"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "WithExitEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WithExitEncoded<R extends Rpc.Any> {\n  readonly _tag: \"WithExit\"\n  readonly requestId: string\n  readonly id: string\n  readonly exit: Rpc.ExitEncoded<R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L89"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "ChunkEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ChunkEncoded<R extends Rpc.Any> {\n  readonly _tag: \"Chunk\"\n  readonly requestId: string\n  readonly id: string\n  readonly sequence: number\n  readonly values: NonEmptyReadonlyArray<Rpc.SuccessChunkEncoded<R>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L100"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L30"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "Reply",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Reply<R> = WithExit<R> | Chunk<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L42"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Reply.ts",
      "path": "src/Reply.ts"
    },
    "project": "@effect/cluster",
    "name": "ReplyEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ReplyEncoded<R> = WithExitEncoded<R> | ChunkEncoded<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Reply.ts#L83"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Runner.ts",
      "path": "src/Runner.ts"
    },
    "project": "@effect/cluster",
    "name": "Runner",
    "description": "A `Runner` represents a physical application server that is capable of running\nentities.\n\nBecause a Runner represents a physical application server, a Runner must have a\nunique `address` which can be used to communicate with the server.\n\nThe version of a Runner is used during rebalancing to give priority to newer\napplication servers and slowly decommission older ones.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class Runner",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runner.ts#L36"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runner.ts",
      "path": "src/Runner.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runner.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Runner.ts",
      "path": "src/Runner.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "description": "A `Runner` represents a physical application server that is capable of running\nentities.\n\nBecause a Runner represents a physical application server, a Runner must have a\nunique `address` which can be used to communicate with the server.\n\nThe version of a Runner is used during rebalancing to give priority to newer\napplication servers and slowly decommission older ones.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (props: { readonly address: RunnerAddress; readonly version: number; }) => Runner",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runner.ts#L81"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Runner.ts",
      "path": "src/Runner.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runner.ts#L21"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RunnerAddress.ts",
      "path": "src/RunnerAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "RunnerAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class RunnerAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerAddress.ts#L26"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerAddress.ts",
      "path": "src/RunnerAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerAddress.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RunnerAddress.ts",
      "path": "src/RunnerAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (host: string, port: number) => RunnerAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerAddress.ts#L61"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RunnerAddress.ts",
      "path": "src/RunnerAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerAddress.ts#L20"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RunnerHealth.ts",
      "path": "src/RunnerHealth.ts"
    },
    "project": "@effect/cluster",
    "name": "RunnerHealth",
    "description": "Represents the service used to check if a Runner is healthy.\n\nIf a Runner is responsive, shards will not be re-assigned because the Runner may\nstill be processing messages. If a Runner is not responsive, then its\nassociated shards can and will be re-assigned to a different Runner.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class RunnerHealth",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerHealth.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerHealth.ts",
      "path": "src/RunnerHealth.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoop",
    "description": "A layer which will **always** consider a Runner healthy.\n\nThis is useful for testing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerNoop: Layer.Layer<RunnerHealth, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerHealth.ts#L37"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerHealth.ts",
      "path": "src/RunnerHealth.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: Effect.Effect<{ readonly isAlive: (address: RunnerAddress) => Effect.Effect<boolean>; }, never, Runners.Runners>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerHealth.ts#L48"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerHealth.ts",
      "path": "src/RunnerHealth.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "description": "A layer which will ping a Runner directly to check if it is healthy.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<RunnerHealth, never, Runners.Runners>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerHealth.ts#L68"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerHealth.ts",
      "path": "src/RunnerHealth.ts"
    },
    "project": "@effect/cluster",
    "name": "layerRpc",
    "description": "A layer which will ping a Runner directly to check if it is healthy.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerRpc: Layer.Layer<RunnerHealth, never, ShardingConfig | Runners.RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerHealth.ts#L80"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "Runners",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare class Runners",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L38"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "Rpcs",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Rpcs",
    "signature": "declare class Rpcs",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L363"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "RpcClientProtocol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare class RpcClientProtocol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L530"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (options: Omit<Runners[\"Type\"], \"sendLocal\" | \"notifyLocal\">) => Effect.Effect<Runners[\"Type\"], never, MessageStorage.MessageStorage | Snowflake.Generator | ShardingConfig | Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L104"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "makeNoop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "No-op",
    "signature": "declare const makeNoop: Effect.Effect<{ readonly ping: (address: RunnerAddress) => Effect.Effect<void, RunnerUnavailable>; readonly sendLocal: <R extends Rpc.Any>(options: { readonly message: Message.Outgoing<R>; readonly send: <Rpc extends Rpc.Any>(message: Message.IncomingLocal<Rpc>) => Effect.Effect<void, EntityNotManagedByRunner | MailboxFull | AlreadyProcessingMessage>; readonly simulateRemoteSerialization: boolean; }) => Effect.Effect<void, EntityNotManagedByRunner | MailboxFull | AlreadyProcessingMessage>; readonly send: <R extends Rpc.Any>(options: { readonly address: RunnerAddress; readonly message: Message.Outgoing<R>; }) => Effect.Effect<void, EntityNotManagedByRunner | RunnerUnavailable | MailboxFull | AlreadyProcessingMessage | PersistenceError>; readonly notify: <R extends Rpc.Any>(options: { readonly address: Option.Option<RunnerAddress>; readonly message: Message.Outgoing<R>; readonly discard: boolean; }) => Effect.Effect<void>; readonly notifyLocal: <R extends Rpc.Any>(options: { readonly message: Message.Outgoing<R>; readonly notify: (options: Message.IncomingLocal<any>) => Effect.Effect<void, EntityNotManagedByRunner>; readonly discard: boolean; }) => Effect.Effect<void>; }, never, Scope | MessageStorage.MessageStorage | ShardingConfig | Snowflake.Generator>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L332"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerNoop: Layer.Layer<Runners, never, MessageStorage.MessageStorage | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L346"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "makeRpcClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Rpcs",
    "signature": "declare const makeRpcClient: Effect.Effect<RpcClient, never, Scope | RpcClient_.Protocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L403"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "makeRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeRpc: Effect.Effect<{ readonly ping: (address: RunnerAddress) => Effect.Effect<void, RunnerUnavailable>; readonly sendLocal: <R extends Rpc.Any>(options: { readonly message: Message.Outgoing<R>; readonly send: <Rpc extends Rpc.Any>(message: Message.IncomingLocal<Rpc>) => Effect.Effect<void, EntityNotManagedByRunner | MailboxFull | AlreadyProcessingMessage>; readonly simulateRemoteSerialization: boolean; }) => Effect.Effect<void, EntityNotManagedByRunner | MailboxFull | AlreadyProcessingMessage>; readonly send: <R extends Rpc.Any>(options: { readonly address: RunnerAddress; readonly message: Message.Outgoing<R>; }) => Effect.Effect<void, EntityNotManagedByRunner | RunnerUnavailable | MailboxFull | AlreadyProcessingMessage | PersistenceError>; readonly notify: <R extends Rpc.Any>(options: { readonly address: Option.Option<RunnerAddress>; readonly message: Message.Outgoing<R>; readonly discard: boolean; }) => Effect.Effect<void>; readonly notifyLocal: <R extends Rpc.Any>(options: { readonly message: Message.Outgoing<R>; readonly notify: (options: Message.IncomingLocal<any>) => Effect.Effect<void, EntityNotManagedByRunner>; readonly discard: boolean; }) => Effect.Effect<void>; }, never, Scope | MessageStorage.MessageStorage | ShardingConfig | Snowflake.Generator | RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L413"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "layerRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerRpc: Layer.Layer<Runners, never, MessageStorage.MessageStorage | ShardingConfig | RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L518"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Runners.ts",
      "path": "src/Runners.ts"
    },
    "project": "@effect/cluster",
    "name": "RpcClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Rpcs",
    "signature": "export interface RpcClient extends RpcClient_.FromGroup<typeof Rpcs> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Runners.ts#L397"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerServer.ts",
      "path": "src/RunnerServer.ts"
    },
    "project": "@effect/cluster",
    "name": "layerHandlers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerHandlers: Layer.Layer<Handler<\"Ping\"> | Handler<\"Notify\"> | Handler<\"Effect\"> | Handler<\"Stream\"> | Handler<\"Envelope\">, never, Sharding.Sharding>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerServer.ts#L26"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerServer.ts",
      "path": "src/RunnerServer.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "description": "The `RunnerServer` recieves messages from other Runners and forwards them to the\n`Sharding` layer.\n\nIt also responds to `Ping` requests.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<never, never, MessageStorage.MessageStorage | Sharding.Sharding | RpcServer.Protocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerServer.ts#L102"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerServer.ts",
      "path": "src/RunnerServer.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWithClients",
    "description": "A `RunnerServer` layer that includes the `Runners` & `Sharding` clients.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWithClients: Layer.Layer<Sharding.Sharding | Runners.Runners, never, ShardStorage.ShardStorage | MessageStorage.MessageStorage | ShardingConfig | Runners.RpcClientProtocol | RpcServer.Protocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerServer.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RunnerServer.ts",
      "path": "src/RunnerServer.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientOnly",
    "description": "A `Runners` layer that is client only.\n\nIt will not register with the ShardManager and recieve shard assignments,\nso this layer can be used to embed a cluster client inside another effect\napplication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerClientOnly: Layer.Layer<Sharding.Sharding | Runners.Runners, never, MessageStorage.MessageStorage | ShardingConfig | Runners.RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/RunnerServer.ts#L142"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardId.ts",
      "path": "src/ShardId.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const ShardId: Schema.brand<typeof Schema.Int, \"ShardId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardId.ts#L10"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ShardId.ts",
      "path": "src/ShardId.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (shardId: number) => ShardId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardId.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "ShardId.ts",
      "path": "src/ShardId.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ShardId = typeof ShardId.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardId.ts#L21"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Sharding.ts",
      "path": "src/Sharding.ts"
    },
    "project": "@effect/cluster",
    "name": "Sharding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class Sharding",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Sharding.ts#L59"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Sharding.ts",
      "path": "src/Sharding.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<Sharding, never, ShardManagerClient | ShardStorage | MessageStorage.MessageStorage | ShardingConfig | Runners>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Sharding.ts#L1090"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardingConfig",
    "description": "Represents the configuration for the `Sharding` service on a given runner.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class ShardingConfig",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "defaults",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "defaults",
    "signature": "declare const defaults: { readonly runnerAddress: Option.Option<RunnerAddress>; readonly serverVersion: number; readonly numberOfShards: number; readonly shardManagerAddress: RunnerAddress; readonly shardManagerUnavailableTimeout: DurationInput; readonly entityMailboxCapacity: number | \"unbounded\"; readonly entityMaxIdleTime: DurationInput; readonly entityTerminationTimeout: DurationInput; readonly entityMessagePollInterval: DurationInput; readonly entityReplyPollInterval: DurationInput; readonly refreshAssignmentsInterval: DurationInput; readonly sendRetryInterval: DurationInput; readonly simulateRemoteSerialization: boolean; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L90"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "layerDefaults",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "defaults",
    "signature": "declare const layerDefaults: Layer.Layer<ShardingConfig, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "config",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const config: Config.Config<{ readonly runnerAddress: Option.Option<RunnerAddress>; readonly serverVersion: number; readonly numberOfShards: number; readonly shardManagerAddress: RunnerAddress; readonly shardManagerUnavailableTimeout: DurationInput; readonly entityMailboxCapacity: number | \"unbounded\"; readonly entityMaxIdleTime: DurationInput; readonly entityTerminationTimeout: DurationInput; readonly entityMessagePollInterval: DurationInput; readonly entityReplyPollInterval: DurationInput; readonly refreshAssignmentsInterval: DurationInput; readonly sendRetryInterval: DurationInput; readonly simulateRemoteSerialization: boolean; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "configFromEnv",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const configFromEnv: Effect.Effect<{ readonly runnerAddress: Option.Option<RunnerAddress>; readonly serverVersion: number; readonly numberOfShards: number; readonly shardManagerAddress: RunnerAddress; readonly shardManagerUnavailableTimeout: DurationInput; readonly entityMailboxCapacity: number | \"unbounded\"; readonly entityMaxIdleTime: DurationInput; readonly entityTerminationTimeout: DurationInput; readonly entityMessagePollInterval: DurationInput; readonly entityReplyPollInterval: DurationInput; readonly refreshAssignmentsInterval: DurationInput; readonly sendRetryInterval: DurationInput; readonly simulateRemoteSerialization: boolean; }, ConfigError, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L198"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: (options?: Partial<ShardingConfig[\"Type\"]>) => Layer.Layer<ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L110"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ShardingConfig.ts",
      "path": "src/ShardingConfig.ts"
    },
    "project": "@effect/cluster",
    "name": "layerFromEnv",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerFromEnv: (options?: Partial<ShardingConfig[\"Type\"]> | undefined) => Layer.Layer<ShardingConfig, ConfigError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingConfig.ts#L210"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardingRegistrationEvent.ts",
      "path": "src/ShardingRegistrationEvent.ts"
    },
    "project": "@effect/cluster",
    "name": "{\n  /**\n   * @since 1.0.0\n   * @category pattern matching\n   */\n  $match: match,\n  /**\n   * @since 1.0.0\n   * @category constructors\n   */\n  EntityRegistered,\n  /**\n   * @since 1.0.0\n   * @category constructors\n   */\n  SingletonRegistered\n}",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "pattern matching",
    "signature": "declare const {\n  /**\n   * @since 1.0.0\n   * @category pattern matching\n   */\n  $match: match,\n  /**\n   * @since 1.0.0\n   * @category constructors\n   */\n  EntityRegistered,\n  /**\n   * @since 1.0.0\n   * @category constructors\n   */\n  SingletonRegistered\n}: any",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingRegistrationEvent.ts#L45"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "ShardingRegistrationEvent.ts",
      "path": "src/ShardingRegistrationEvent.ts"
    },
    "project": "@effect/cluster",
    "name": "EntityRegistered",
    "description": "Represents an event that occurs when a new entity is registered with a runner.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface EntityRegistered {\n  readonly _tag: \"EntityRegistered\"\n  readonly entity: Entity<any>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingRegistrationEvent.ts#L24"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "ShardingRegistrationEvent.ts",
      "path": "src/ShardingRegistrationEvent.ts"
    },
    "project": "@effect/cluster",
    "name": "SingletonRegistered",
    "description": "Represents an event that occurs when a new singleton is registered with a\nrunner.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SingletonRegistered {\n  readonly _tag: \"SingletonRegistered\"\n  readonly address: SingletonAddress\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingRegistrationEvent.ts#L36"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "ShardingRegistrationEvent.ts",
      "path": "src/ShardingRegistrationEvent.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardingRegistrationEvent",
    "description": "Represents events that can occur when a runner registers entities or singletons.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ShardingRegistrationEvent = | EntityRegistered\n  | SingletonRegistered",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardingRegistrationEvent.ts#L14"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class ShardManager",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L54"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "Config",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare class Config",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L91"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardManagerClient",
    "description": "Represents a client which can be used to communicate with the\n`ShardManager`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare class ShardManagerClient",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L219"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "Rpcs",
    "description": "The messaging protocol for the `ShardManager`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Rpcs",
    "signature": "declare class Rpcs",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L278"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "configConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const configConfig: Config_.Config<{ readonly rebalanceDebounce: Duration.DurationInput; readonly rebalanceInterval: Duration.DurationInput; readonly rebalanceRetryInterval: Duration.DurationInput; readonly rebalanceRate: number; readonly persistRetryInterval: Duration.DurationInput; readonly persistRetryCount: number; readonly runnerHealthCheckInterval: Duration.DurationInput; readonly runnerPingTimeout: Duration.DurationInput; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L147"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "configFromEnv",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const configFromEnv: Effect.Effect<{ readonly rebalanceDebounce: Duration.DurationInput; readonly rebalanceInterval: Duration.DurationInput; readonly rebalanceRetryInterval: Duration.DurationInput; readonly rebalanceRate: number; readonly persistRetryInterval: Duration.DurationInput; readonly persistRetryCount: number; readonly runnerHealthCheckInterval: Duration.DurationInput; readonly runnerPingTimeout: Duration.DurationInput; }, ConfigError, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L188"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerConfigFromEnv",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const layerConfigFromEnv: Layer.Layer<Config, ConfigError, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L210"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardingEventSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare const ShardingEventSchema: Schema.Union<[Schema.TaggedStruct<\"StreamStarted\", {}>, Schema.TaggedStruct<\"ShardsAssigned\", { address: typeof RunnerAddress; shards: Schema.Array$<Schema.brand<typeof Schema.Int, \"ShardId\">>; }>, Schema.TaggedStruct<\"ShardsUnassigned\", { address: typeof RunnerAddress; shards: Schema.Array$<Schema.brand<typeof Schema.Int, \"ShardId\">>; }>, Schema.TaggedStruct<\"RunnerRegistered\", { address: typeof RunnerAddress; }>, Schema.TaggedStruct<\"RunnerUnregistered\", { address: typeof RunnerAddress; }>]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L254"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardingEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare const ShardingEvent: { readonly StreamStarted: Data.Case.Constructor<{ readonly _tag: \"StreamStarted\"; }, \"_tag\">; readonly ShardsAssigned: Data.Case.Constructor<{ readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }, \"_tag\">; readonly ShardsUnassigned: Data.Case.Constructor<{ readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }, \"_tag\">; readonly RunnerRegistered: Data.Case.Constructor<{ readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; }, \"_tag\">; readonly RunnerUnregistered: Data.Case.Constructor<{ readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }, \"_tag\">; readonly $is: <Tag extends \"StreamStarted\" | \"ShardsAssigned\" | \"ShardsUnassigned\" | \"RunnerRegistered\" | \"RunnerUnregistered\">(tag: Tag) => (u: unknown) => u is Extract<{ readonly _tag: \"StreamStarted\"; }, { readonly _tag: Tag; }> | Extract<{ readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }, { readonly _tag: Tag; }> | Extract<{ readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }, { readonly _tag: Tag; }> | Extract<{ readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; }, { readonly _tag: Tag; }> | Extract<{ readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }, { readonly _tag: Tag; }>; readonly $match: { <Cases extends { readonly StreamStarted: (args: { readonly _tag: \"StreamStarted\"; }) => any; readonly ShardsAssigned: (args: { readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }) => any; readonly ShardsUnassigned: (args: { readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }) => any; readonly RunnerRegistered: (args: { readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; }) => any; readonly RunnerUnregistered: (args: { readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }) => any; }>(cases: Cases): (value: { readonly _tag: \"StreamStarted\"; } | { readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; } | { readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; } | { readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; } | { readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }) => Unify<ReturnType<Cases[\"StreamStarted\" | \"ShardsAssigned\" | \"ShardsUnassigned\" | \"RunnerRegistered\" | \"RunnerUnregistered\"]>>; <Cases extends { readonly StreamStarted: (args: { readonly _tag: \"StreamStarted\"; }) => any; readonly ShardsAssigned: (args: { readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }) => any; readonly ShardsUnassigned: (args: { readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; }) => any; readonly RunnerRegistered: (args: { readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; }) => any; readonly RunnerUnregistered: (args: { readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }) => any; }>(value: { readonly _tag: \"StreamStarted\"; } | { readonly _tag: \"ShardsAssigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; } | { readonly _tag: \"ShardsUnassigned\"; readonly address: RunnerAddress; readonly shards: ReadonlyArray<ShardId>; } | { readonly _tag: \"RunnerRegistered\"; readonly address: RunnerAddress; } | { readonly _tag: \"RunnerUnregistered\"; readonly address: RunnerAddress; }, cases: Cases): Unify<ReturnType<Cases[\"StreamStarted\" | \"ShardsAssigned\" | \"ShardsUnassigned\" | \"RunnerRegistered\" | \"RunnerUnregistered\"]>>; }; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L323"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "makeClientLocal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare const makeClientLocal: Effect.Effect<{ readonly register: (address: RunnerAddress) => Effect.Effect<MachineId.MachineId>; readonly unregister: (address: RunnerAddress) => Effect.Effect<void>; readonly notifyUnhealthyRunner: (address: RunnerAddress) => Effect.Effect<void>; readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option.Option<RunnerAddress>>>; readonly shardingEvents: Effect.Effect<Mailbox.ReadonlyMailbox<ShardingEvent>, never, Scope>; readonly getTime: Effect.Effect<number>; }, never, ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L329"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "makeClientRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare const makeClientRpc: Effect.Effect<{ readonly register: (address: RunnerAddress) => Effect.Effect<MachineId.MachineId>; readonly unregister: (address: RunnerAddress) => Effect.Effect<void>; readonly notifyUnhealthyRunner: (address: RunnerAddress) => Effect.Effect<void>; readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option.Option<RunnerAddress>>>; readonly shardingEvents: Effect.Effect<Mailbox.ReadonlyMailbox<ShardingEvent>, never, Scope>; readonly getTime: Effect.Effect<number>; }, never, Scope | ShardingConfig | RpcClient.Protocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L358"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientLocal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare const layerClientLocal: Layer.Layer<ShardManagerClient, never, ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L383"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Client",
    "signature": "declare const layerClientRpc: Layer.Layer<ShardManagerClient, never, ShardingConfig | RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L393"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: Effect.Effect<{ readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option.Option<RunnerAddress>>>; readonly shardingEvents: Effect.Effect<Queue.Dequeue<ShardingEvent>, never, Scope>; readonly register: (runner: Runner) => Effect.Effect<MachineId.MachineId>; readonly unregister: (address: RunnerAddress) => Effect.Effect<void>; readonly rebalance: (immediate: boolean) => Effect.Effect<void>; readonly notifyUnhealthyRunner: (address: RunnerAddress) => Effect.Effect<void>; readonly checkRunnerHealth: Effect.Effect<void>; }, never, Scope | ShardStorage | ShardingConfig | RunnerHealth | Config | Runners>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L412"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer.Layer<ShardManager, never, ShardStorage | ShardingConfig | RunnerHealth | Config | Runners>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L757"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerServerHandlers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Server",
    "signature": "declare const layerServerHandlers: Layer.Layer<Rpc.Handler<\"Register\"> | Rpc.Handler<\"Unregister\"> | Rpc.Handler<\"NotifyUnhealthyRunner\"> | Rpc.Handler<\"GetAssignments\"> | Rpc.Handler<\"ShardingEvents\"> | Rpc.Handler<\"GetTime\">, never, ShardManager>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L767"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Server",
    "signature": "declare const layerServer: Layer.Layer<never, never, ShardManager | RpcServer.Protocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L797"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layerConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Config",
    "signature": "declare const layerConfig: (config?: Partial<Config[\"Type\"]>) => Layer.Layer<Config>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L200"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "ShardManager.ts",
      "path": "src/ShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardingEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ShardingEvent = Data.TaggedEnum<{\n  StreamStarted: {}\n  ShardsAssigned: {\n    address: RunnerAddress\n    shards: ReadonlyArray<ShardId>\n  }\n  ShardsUnassigned: {\n    address: RunnerAddress\n    shards: ReadonlyArray<ShardId>\n  }\n  RunnerRegistered: { address: RunnerAddress }\n  RunnerUnregistered: { address: RunnerAddress }\n}>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardManager.ts#L305"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "ShardStorage",
    "description": "Represents a generic interface to the persistent storage required by the\ncluster.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class ShardStorage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "makeEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const makeEncoded: (encoded: Encoded) => Effect.Effect<{ readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option.Option<RunnerAddress>>, PersistenceError>; readonly saveAssignments: (assignments: Iterable<readonly [ShardId, Option.Option<RunnerAddress>]>) => Effect.Effect<void, PersistenceError>; readonly getRunners: Effect.Effect<Array<[RunnerAddress, Runner]>, PersistenceError>; readonly saveRunners: (runners: Iterable<readonly [RunnerAddress, Runner]>) => Effect.Effect<void, PersistenceError>; readonly acquire: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly refresh: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly release: (address: RunnerAddress, shardId: ShardId) => Effect.Effect<void, PersistenceError>; readonly releaseAll: (address: RunnerAddress) => Effect.Effect<void, PersistenceError>; }, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L152"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerNoop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerNoop: Layer.Layer<ShardStorage, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L213"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "makeMemory",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeMemory: Effect.Effect<{ readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option.Option<RunnerAddress>>, PersistenceError>; readonly saveAssignments: (assignments: Iterable<readonly [ShardId, Option.Option<RunnerAddress>]>) => Effect.Effect<void, PersistenceError>; readonly getRunners: Effect.Effect<Array<[RunnerAddress, Runner]>, PersistenceError>; readonly saveRunners: (runners: Iterable<readonly [RunnerAddress, Runner]>) => Effect.Effect<void, PersistenceError>; readonly acquire: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly refresh: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly release: (address: RunnerAddress, shardId: ShardId) => Effect.Effect<void, PersistenceError>; readonly releaseAll: (address: RunnerAddress) => Effect.Effect<void, PersistenceError>; }, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L237"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerMemory",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerMemory: Layer.Layer<ShardStorage, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L278"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "ShardStorage.ts",
      "path": "src/ShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Encoded",
    "signature": "export interface Encoded {\n  /**\n   * Get the current assignments of shards to runners.\n   */\n  readonly getAssignments: Effect.Effect<\n    Array<\n      readonly [\n        shardId: number,\n        runnerAddress: string | null\n      ]\n    >,\n    PersistenceError\n  >\n\n  /**\n   * Save the current state of shards assignments to runners.\n   */\n  readonly saveAssignments: (\n    assignments: Array<readonly [shardId: number, RunnerAddress: string | null]>\n  ) => Effect.Effect<void, PersistenceError>\n\n  /**\n   * Get all runners registered with the cluster.\n   */\n  readonly getRunners: Effect.Effect<Array<readonly [address: string, runner: string]>, PersistenceError>\n\n  /**\n   * Save the current runners registered with the cluster.\n   */\n  readonly saveRunners: (\n    runners: Array<readonly [address: string, runner: string]>\n  ) => Effect.Effect<void, PersistenceError>\n\n  /**\n   * Acquire the lock on the given shards, returning the shards that were\n   * successfully locked.\n   */\n  readonly acquire: (\n    address: string,\n    shardIds: ReadonlyArray<number>\n  ) => Effect.Effect<Array<number>, PersistenceError>\n\n  /**\n   * Refresh the lock on the given shards, returning the shards that were\n   * successfully locked.\n   */\n  readonly refresh: (\n    address: string,\n    shardIds: ReadonlyArray<number>\n  ) => Effect.Effect<Array<number>, PersistenceError>\n\n  /**\n   * Release the lock on the given shards.\n   */\n  readonly release: (\n    address: string,\n    shardIds: number\n  ) => Effect.Effect<void, PersistenceError>\n\n  /**\n   * Release the lock on all shards for the given runner.\n   */\n  readonly releaseAll: (address: string) => Effect.Effect<void, PersistenceError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/ShardStorage.ts#L83"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Singleton.ts",
      "path": "src/Singleton.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <E, R>(name: string, run: Effect.Effect<void, E, R>) => Layer.Layer<never, never, Sharding | Exclude<R, Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Singleton.ts#L13"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SingletonAddress.ts",
      "path": "src/SingletonAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "SingletonAddress",
    "description": "Represents the unique address of an singleton within the cluster.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Address",
    "signature": "declare class SingletonAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SingletonAddress.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SingletonAddress.ts",
      "path": "src/SingletonAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Address",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SingletonAddress.ts#L13"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SingletonAddress.ts",
      "path": "src/SingletonAddress.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Address",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SingletonAddress.ts#L19"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "Generator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Generator",
    "signature": "declare class Generator",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L185"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L17"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "SnowflakeFromBigInt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Schemas",
    "signature": "declare const SnowflakeFromBigInt: Schema.Schema<Snowflake, bigint, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L67"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "SnowflakeFromString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Schemas",
    "signature": "declare const SnowflakeFromString: Schema.Schema<Snowflake, string, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L75"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "constEpochMillis",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Epoch",
    "signature": "declare const constEpochMillis: number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L83"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "makeGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Generator",
    "signature": "declare const makeGenerator: Effect.Effect<Snowflake.Generator, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L143"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "layerGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Generator",
    "signature": "declare const layerGenerator: Layer.Layer<Generator, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L194"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "Snowflake",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const Snowflake: (input: string | bigint) => Snowflake",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (options: { readonly machineId: MachineId; readonly sequence: number; readonly timestamp: number; }) => Snowflake",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L95"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "timestamp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Parts",
    "signature": "declare const timestamp: (snowflake: Snowflake) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L108"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "dateTime",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Parts",
    "signature": "declare const dateTime: (snowflake: Snowflake) => DateTime.Utc",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L114"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "machineId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Parts",
    "signature": "declare const machineId: (snowflake: Snowflake) => MachineId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L120"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "sequence",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Parts",
    "signature": "declare const sequence: (snowflake: Snowflake) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L127"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "toParts",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Parts",
    "signature": "declare const toParts: (snowflake: Snowflake) => Snowflake.Parts",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L133"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L23"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "Snowflake",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type Snowflake = Brand.Branded<bigint, TypeId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L29"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "Snowflake.Parts",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Parts {\n    readonly timestamp: number\n    readonly machineId: MachineId\n    readonly sequence: number\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L47"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Snowflake.ts",
      "path": "src/Snowflake.ts"
    },
    "project": "@effect/cluster",
    "name": "Snowflake.Generator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Generator {\n    readonly unsafeNext: () => Snowflake\n    readonly setMachineId: (machineId: MachineId) => Effect.Effect<void>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/Snowflake.ts#L57"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SocketRunner.ts",
      "path": "src/SocketRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<Sharding.Sharding | Runners.Runners, never, ShardStorage.ShardStorage | MessageStorage | ShardingConfig | SocketServer | Runners.RpcClientProtocol | RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SocketRunner.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SocketRunner.ts",
      "path": "src/SocketRunner.ts"
    },
    "project": "@effect/cluster",
    "name": "layerClientOnly",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerClientOnly: Layer.Layer<Sharding.Sharding | Runners.Runners, never, MessageStorage | ShardingConfig | Runners.RpcClientProtocol>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SocketRunner.ts#L50"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SocketShardManager.ts",
      "path": "src/SocketShardManager.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<ShardManager.ShardManager, never, ShardStorage | ShardingConfig | SocketServer | Runners.RpcClientProtocol | RpcSerialization | RunnerHealth | ShardManager.Config>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SocketShardManager.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlMessageStorage.ts",
      "path": "src/SqlMessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (options?: { readonly prefix?: string | undefined; } | undefined) => Effect.Effect<{ readonly saveRequest: <R extends Any>(envelope: OutgoingRequest<R>) => Effect.Effect<MessageStorage.SaveResult<R>, PersistenceError | MalformedMessage>; readonly saveEnvelope: (envelope: OutgoingEnvelope) => Effect.Effect<void, PersistenceError | MalformedMessage>; readonly saveReply: <R extends Any>(reply: Reply.ReplyWithContext<R>) => Effect.Effect<void, PersistenceError | MalformedMessage>; readonly repliesFor: <R extends Any>(requests: Iterable<OutgoingRequest<R>>) => Effect.Effect<Array<Reply.Reply<R>>, PersistenceError | MalformedMessage>; readonly registerReplyHandler: <R extends Any>(message: OutgoingRequest<R>) => Effect.Effect<void>; readonly unprocessedMessages: (shardIds: Iterable<ShardId>) => Effect.Effect<Array<Incoming<any>>, PersistenceError>; readonly unprocessedMessagesById: <R extends Any>(messageIds: Iterable<Snowflake.Snowflake>) => Effect.Effect<Array<Incoming<R>>, PersistenceError>; readonly resetAddress: (address: EntityAddress) => Effect.Effect<void, PersistenceError>; }, SqlError, SqlClient.SqlClient | Snowflake.Generator>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlMessageStorage.ts#L25"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlMessageStorage.ts",
      "path": "src/SqlMessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<MessageStorage.MessageStorage, SqlError, SqlClient.SqlClient | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlMessageStorage.ts#L764"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlMessageStorage.ts",
      "path": "src/SqlMessageStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWith: (options: { readonly prefix?: string | undefined; readonly replyPollInterval?: DurationInput | undefined; }) => Layer.Layer<MessageStorage.MessageStorage, SqlError, SqlClient.SqlClient | ShardingConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlMessageStorage.ts#L776"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlShardStorage.ts",
      "path": "src/SqlShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (options?: { readonly prefix?: string | undefined; } | undefined) => Effect.Effect<{ readonly getAssignments: Effect.Effect<ReadonlyMap<ShardId, Option<RunnerAddress>>, PersistenceError>; readonly saveAssignments: (assignments: Iterable<readonly [ShardId, Option<RunnerAddress>]>) => Effect.Effect<void, PersistenceError>; readonly getRunners: Effect.Effect<Array<[RunnerAddress, Runner]>, PersistenceError>; readonly saveRunners: (runners: Iterable<readonly [RunnerAddress, Runner]>) => Effect.Effect<void, PersistenceError>; readonly acquire: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly refresh: (address: RunnerAddress, shardIds: Iterable<ShardId>) => Effect.Effect<Array<ShardId>, PersistenceError>; readonly release: (address: RunnerAddress, shardId: ShardId) => Effect.Effect<void, PersistenceError>; readonly releaseAll: (address: RunnerAddress) => Effect.Effect<void, PersistenceError>; }, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlShardStorage.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SqlShardStorage.ts",
      "path": "src/SqlShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<ShardStorage.ShardStorage, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlShardStorage.ts#L279"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "SqlShardStorage.ts",
      "path": "src/SqlShardStorage.ts"
    },
    "project": "@effect/cluster",
    "name": "layerWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layerWith: (options: { readonly prefix?: string | undefined; }) => Layer.Layer<ShardStorage.ShardStorage, SqlError, SqlClient.SqlClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SqlShardStorage.ts#L289"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SynchronizedClock.ts",
      "path": "src/SynchronizedClock.ts"
    },
    "project": "@effect/cluster",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (getRemoteTime: Effect.Effect<number, never, never>) => Effect.Effect<Clock.Clock, never, Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SynchronizedClock.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SynchronizedClock.ts",
      "path": "src/SynchronizedClock.ts"
    },
    "project": "@effect/cluster",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Layers",
    "signature": "declare const layer: Layer.Layer<never, never, ShardManagerClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/cluster/src/SynchronizedClock.ts#L74"
  }
]