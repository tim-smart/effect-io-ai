[
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "addEqualityTesters",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const addEqualityTesters: () => void"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "effect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const effect: Vitest.Tester<TestServices.TestServices>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "scoped",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const scoped: Vitest.Tester<TestServices.TestServices | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "live",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const live: Vitest.Tester<never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "scopedLive",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const scopedLive: Vitest.Tester<Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "layer",
    "description": "Share a `Layer` between multiple tests, optionally wrapping\nthe tests in a `describe` block if a name is provided.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0\n\n```ts\nimport { expect, layer } from \"@effect/vitest\"\nimport { Context, Effect, Layer } from \"effect\"\n\nclass Foo extends Context.Tag(\"Foo\")<Foo, \"foo\">() {\n  static Live = Layer.succeed(Foo, \"foo\")\n}\n\nclass Bar extends Context.Tag(\"Bar\")<Bar, \"bar\">() {\n  static Live = Layer.effect(\n    Bar,\n    Effect.map(Foo, () => \"bar\" as const)\n  )\n}\n\nlayer(Foo.Live)(\"layer\", (it) => {\n  it.effect(\"adds context\", () =>\n    Effect.gen(function* () {\n      const foo = yield* Foo\n      expect(foo).toEqual(\"foo\")\n    })\n  )\n\n  it.layer(Bar.Live)(\"nested\", (it) => {\n    it.effect(\"adds context\", () =>\n      Effect.gen(function* () {\n        const foo = yield* Foo\n        const bar = yield* Bar\n        expect(foo).toEqual(\"foo\")\n        expect(bar).toEqual(\"bar\")\n      })\n    )\n  })\n})\n```",
    "category": null,
    "signature": "export declare const layer: <R, E>(layer_: Layer.Layer<R, E>, options?: { readonly memoMap?: Layer.MemoMap; readonly timeout?: Duration.DurationInput; }) => { (f: (it: Vitest.Methods<R>) => void): void; (name: string, f: (it: Vitest.Methods<R>) => void): void; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "flakyTest",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const flakyTest: <A, E, R>(self: Effect.Effect<A, E, R>, timeout?: Duration.DurationInput) => Effect.Effect<A, never, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "prop",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const prop: <const S extends Vitest.SchemaObj>(name: string, schemas: S, self: (schemas: { [K in keyof S]: Schema.Schema.Type<S[K]>; }, ctx: V.TaskContext<V.RunnerTestCase<{}>> & V.TestContext) => void, timeout?: number | V.TestOptions) => void"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "it",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const it: Vitest.Methods<never>"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "From \"vitest\"",
    "description": "Re-exports all named exports from the \"vitest\" module.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * from \"vitest\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/vitest",
    "name": "API",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export type API = V.TestAPI<{}>"
  }
]