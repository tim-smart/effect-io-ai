[
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "addEqualityTesters",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const addEqualityTesters: () => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L145"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "effect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const effect: Vitest.Tester<TestServices.TestServices>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L150"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "scoped",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const scoped: Vitest.Tester<TestServices.TestServices | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L155"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "live",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const live: Vitest.Tester<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L160"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "scopedLive",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const scopedLive: Vitest.Tester<Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L165"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "layer",
    "description": "Share a `Layer` between multiple tests, optionally wrapping\nthe tests in a `describe` block if a name is provided.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0\n\n```ts\nimport { expect, layer } from \"@effect/vitest\"\nimport { Context, Effect, Layer } from \"effect\"\n\nclass Foo extends Context.Tag(\"Foo\")<Foo, \"foo\">() {\n  static Live = Layer.succeed(Foo, \"foo\")\n}\n\nclass Bar extends Context.Tag(\"Bar\")<Bar, \"bar\">() {\n  static Live = Layer.effect(\n    Bar,\n    Effect.map(Foo, () => \"bar\" as const)\n  )\n}\n\nlayer(Foo.Live)(\"layer\", (it) => {\n  it.effect(\"adds context\", () =>\n    Effect.gen(function* () {\n      const foo = yield* Foo\n      expect(foo).toEqual(\"foo\")\n    })\n  )\n\n  it.layer(Bar.Live)(\"nested\", (it) => {\n    it.effect(\"adds context\", () =>\n      Effect.gen(function* () {\n        const foo = yield* Foo\n        const bar = yield* Bar\n        expect(foo).toEqual(\"foo\")\n        expect(bar).toEqual(\"bar\")\n      })\n    )\n  })\n})\n```",
    "category": null,
    "signature": "declare const layer: <R, E, const ExcludeTestServices extends boolean = false>(layer_: Layer.Layer<R, E>, options?: { readonly memoMap?: Layer.MemoMap; readonly timeout?: Duration.DurationInput; readonly excludeTestServices?: ExcludeTestServices; }) => { (f: (it: Vitest.MethodsNonLive<R, ExcludeTestServices>) => void): void; (name: string, f: (it: Vitest.MethodsNonLive<R, ExcludeTestServices>) => void): void; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L209"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "flakyTest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const flakyTest: <A, E, R>(self: Effect.Effect<A, E, R>, timeout?: Duration.DurationInput) => Effect.Effect<A, never, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L224"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "prop",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const prop: <const Arbs extends Vitest.Arbitraries>(name: string, arbitraries: Arbs, self: (properties: { [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]>; }, ctx: V.TestContext) => void, timeout?: number | (V.TestOptions & { fastCheck?: FC.Parameters<{ [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]>; }>; })) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L232"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "it",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const it: Vitest.Methods<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L244"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "makeMethods",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const makeMethods: (it: V.TestAPI) => Vitest.Methods",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L249"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "describeWrapped",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const describeWrapped: (name: string, f: (it: Vitest.Methods) => void) => V.SuiteCollector",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L254"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "API",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type API = V.TestAPI<{}>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L22"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.TestFunction",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface TestFunction<A, E, R, TestArgs extends Array<any>> {\n    (...args: TestArgs): Effect.Effect<A, E, R>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L31"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.Test",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Test<R> {\n    <A, E>(\n      name: string,\n      self: TestFunction<A, E, R, [V.TestContext]>,\n      timeout?: number | V.TestOptions\n    ): void\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L38"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.Tester",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Tester<R> extends Vitest.Test<R> {\n    skip: Vitest.Test<R>\n    skipIf: (condition: unknown) => Vitest.Test<R>\n    runIf: (condition: unknown) => Vitest.Test<R>\n    only: Vitest.Test<R>\n    each: <T>(\n      cases: ReadonlyArray<T>\n    ) => <A, E>(name: string, self: TestFunction<A, E, R, Array<T>>, timeout?: number | V.TestOptions) => void\n    fails: Vitest.Test<R>\n\n    /**\n     * @since 1.0.0\n     */\n    prop: <const Arbs extends Arbitraries, A, E>(\n      name: string,\n      arbitraries: Arbs,\n      self: TestFunction<\n        A,\n        E,\n        R,\n        [\n          { [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]> },\n          V.TestContext\n        ]\n      >,\n      timeout?:\n        | number\n        | V.TestOptions & {\n          fastCheck?: FC.Parameters<\n            { [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]> }\n          >\n        }\n    ) => void\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L56"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.MethodsNonLive",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface MethodsNonLive<R = never, ExcludeTestServices extends boolean = false> extends API {\n    readonly effect: Vitest.Tester<(ExcludeTestServices extends true ? never : TestServices.TestServices) | R>\n    readonly flakyTest: <A, E, R2>(\n      self: Effect.Effect<A, E, R2>,\n      timeout?: Duration.DurationInput\n    ) => Effect.Effect<A, never, R2>\n    readonly scoped: Vitest.Tester<\n      (ExcludeTestServices extends true ? never : TestServices.TestServices) | Scope.Scope | R\n    >\n    readonly layer: <R2, E>(layer: Layer.Layer<R2, E, R>, options?: {\n      readonly timeout?: Duration.DurationInput\n    }) => {\n      (f: (it: Vitest.MethodsNonLive<R | R2, ExcludeTestServices>) => void): void\n      (\n        name: string,\n        f: (it: Vitest.MethodsNonLive<R | R2, ExcludeTestServices>) => void\n      ): void\n    }\n\n    /**\n     * @since 1.0.0\n     */\n    readonly prop: <const Arbs extends Arbitraries>(\n      name: string,\n      arbitraries: Arbs,\n      self: (\n        properties: { [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]> },\n        ctx: V.TestContext\n      ) => void,\n      timeout?:\n        | number\n        | V.TestOptions & {\n          fastCheck?: FC.Parameters<\n            { [K in keyof Arbs]: Arbs[K] extends FC.Arbitrary<infer T> ? T : Schema.Schema.Type<Arbs[K]> }\n          >\n        }\n    ) => void\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L94"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.Methods",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Methods<R = never> extends MethodsNonLive<R> {\n    readonly live: Vitest.Tester<R>\n    readonly scopedLive: Vitest.Tester<Scope.Scope | R>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L136"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/vitest",
    "name": "Vitest.Arbitraries",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Arbitraries = | Array<Schema.Schema.Any | FC.Arbitrary<any>>\n    | { [K in string]: Schema.Schema.Any | FC.Arbitrary<any> }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/index.ts#L49"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "fail",
    "description": "Throws an `AssertionError` with the provided error message.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const fail: (message: string) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L22"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "deepStrictEqual",
    "description": "Asserts that `actual` is equal to `expected` using the `Equal.equals` trait.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const deepStrictEqual: <A>(actual: A, expected: A, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L31"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "notDeepStrictEqual",
    "description": "Asserts that `actual` is not equal to `expected` using the `Equal.equals` trait.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const notDeepStrictEqual: <A>(actual: A, expected: A, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L40"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "strictEqual",
    "description": "Asserts that `actual` is equal to `expected` using the `Equal.equals` trait.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const strictEqual: <A>(actual: A, expected: A, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L49"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertEquals",
    "description": "Asserts that `actual` is equal to `expected` using the `Equal.equals` trait.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertEquals: <A>(actual: A, expected: A, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L58"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "doesNotThrow",
    "description": "Asserts that `thunk` does not throw an error.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const doesNotThrow: (thunk: () => void, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L70"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertInstanceOf",
    "description": "Asserts that `value` is an instance of `constructor`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertInstanceOf: <C extends abstract new (...args: any) => any>(value: unknown, constructor: C, message?: string, ..._: Array<never>) => asserts value is InstanceType<C>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L83"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertTrue",
    "description": "Asserts that `self` is `true`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertTrue: (self: unknown, message?: string, ..._: Array<never>) => asserts self",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L97"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertFalse",
    "description": "Asserts that `self` is `false`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertFalse: (self: boolean, message?: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L106"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertInclude",
    "description": "Asserts that `actual` includes `expected`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertInclude: (actual: string | undefined, expected: string, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L115"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertMatch",
    "description": "Asserts that `actual` matches `regexp`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertMatch: (actual: string, regexp: RegExp, ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L128"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "throws",
    "description": "Asserts that `thunk` throws an error.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const throws: (thunk: () => void, error?: Error | ((u: unknown) => undefined), ..._: Array<never>) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L139"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "throwsAsync",
    "description": "Asserts that `thunk` throws an error.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const throwsAsync: (thunk: () => Promise<void>, error?: Error | ((u: unknown) => undefined), ..._: Array<never>) => Promise<void>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L159"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertNone",
    "description": "Asserts that `option` is `None`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertNone: <A>(option: Option.Option<A>, ..._: Array<never>) => asserts option is Option.None<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L187"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertSome",
    "description": "Asserts that `option` is `Some`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertSome: <A>(option: Option.Option<A>, expected: A, ..._: Array<never>) => asserts option is Option.Some<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L196"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertLeft",
    "description": "Asserts that `either` is `Left`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertLeft: <R, L>(either: Either.Either<R, L>, expected: L, ..._: Array<never>) => asserts either is Either.Left<L, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L213"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertRight",
    "description": "Asserts that `either` is `Right`.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertRight: <R, L>(either: Either.Either<R, L>, expected: R, ..._: Array<never>) => asserts either is Either.Right<never, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L226"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertFailure",
    "description": "Asserts that `exit` is a failure.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertFailure: <A, E>(exit: Exit.Exit<A, E>, expected: Cause.Cause<E>, ..._: Array<never>) => asserts exit is Exit.Failure<never, E>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L243"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "utils.ts",
      "path": "src/utils.ts"
    },
    "project": "@effect/vitest",
    "name": "assertSuccess",
    "description": "Asserts that `exit` is a success.",
    "deprecated": false,
    "examples": [],
    "since": "0.21.0",
    "category": null,
    "signature": "declare const assertSuccess: <A, E>(exit: Exit.Exit<A, E>, expected: A, ..._: Array<never>) => asserts exit is Exit.Success<A, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/vitest/src/utils.ts#L256"
  }
]