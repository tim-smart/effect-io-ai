[
  {
    "_tag": "Class",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "AiChat",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Context",
    "signature": "declare class AiChat",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "fromPrompt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const fromPrompt: (options: { readonly prompt: AiInput.Raw; readonly system?: string; }) => Effect.Effect<AiChat.Service, never, AiLanguageModel.AiLanguageModel>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const empty: Effect.Effect<AiChat.Service, never, AiLanguageModel.AiLanguageModel>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L229"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "fromExport",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const fromExport: (data: unknown) => Effect.Effect<AiChat.Service, ParseError, AiLanguageModel.AiLanguageModel>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L237"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "fromJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const fromJson: (data: string) => Effect.Effect<AiChat.Service, ParseError, AiLanguageModel.AiLanguageModel>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L246"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiChat.ts",
      "path": "src/AiChat.ts"
    },
    "project": "@effect/ai",
    "name": "AiChat.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Service {\n    /**\n     * The chat history.\n     */\n    readonly history: Effect.Effect<AiInput.AiInput>\n\n    /**\n     * Exports the chat into a structured format.\n     */\n    readonly export: Effect.Effect<unknown>\n\n    /**\n     * Exports the chat as a JSON string.\n     */\n    readonly exportJson: Effect.Effect<string>\n\n    /**\n     * Generate text using a large language model for the specified `prompt`.\n     *\n     * If a `toolkit` is specified, the large language model will additionally\n     * be able to perform tool calls to augment its response.\n     *\n     * Both input and output messages will be added to the chat history.\n     */\n    readonly generateText: <\n      Tools extends AiTool.Any,\n      Options extends NoExcessProperties<AiLanguageModel.GenerateTextOptions<any>, Options>\n    >(\n      options: Options & Omit<AiLanguageModel.GenerateTextOptions<Tools>, \"system\">\n    ) => Effect.Effect<\n      AiLanguageModel.ExtractSuccess<Options>,\n      AiLanguageModel.ExtractError<Options>,\n      AiLanguageModel.ExtractContext<Options>\n    >\n\n    /**\n     * Generate text using a large language model for the specified `prompt`,\n     * streaming output from the model as soon as it is available.\n     *\n     * If a `toolkit` is specified, the large language model will additionally\n     * be able to perform tool calls to augment its response.\n     *\n     * Both input and output messages will be added to the chat history.\n     */\n    readonly streamText: <\n      Tools extends AiTool.Any,\n      Options extends NoExcessProperties<AiLanguageModel.GenerateTextOptions<any>, Options>\n    >(\n      options: Options & Omit<AiLanguageModel.GenerateTextOptions<Tools>, \"system\">\n    ) => Stream.Stream<\n      AiLanguageModel.ExtractSuccess<Options>,\n      AiLanguageModel.ExtractError<Options>,\n      AiLanguageModel.ExtractContext<Options>\n    >\n\n    /**\n     * Generate a structured object for the specified prompt and schema using a\n     * large language model.\n     *\n     * When using a `Schema` that does not have an `identifier` or `_tag`\n     * property, you must specify a `toolCallId` to properly associate the\n     * output of the model.\n     *\n     * Both input and output messages will be added to the chat history.\n     */\n    readonly generateObject: <A, I extends Record<string, unknown>, R>(\n      options: Omit<AiLanguageModel.GenerateObjectOptions<A, I, R>, \"system\">\n    ) => Effect.Effect<AiResponse.WithStructuredOutput<A>, AiError, R>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiChat.ts#L36"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiEmbeddingModel.ts",
      "path": "src/AiEmbeddingModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiEmbeddingModel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Context",
    "signature": "declare class AiEmbeddingModel",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiEmbeddingModel.ts#L19"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiEmbeddingModel.ts",
      "path": "src/AiEmbeddingModel.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (options: { readonly embedMany: (input: ReadonlyArray<string>) => Effect.Effect<Array<AiEmbeddingModel.Result>, AiError>; readonly maxBatchSize?: number; readonly cache?: { readonly capacity: number; readonly timeToLive: Duration.DurationInput; }; }) => Effect.Effect<AiEmbeddingModel.Service, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiEmbeddingModel.ts#L80"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiEmbeddingModel.ts",
      "path": "src/AiEmbeddingModel.ts"
    },
    "project": "@effect/ai",
    "name": "makeDataLoader",
    "description": "Creates an `Embeddings` service which will aggregate all `embed` requests\nreceived during the specified `window` (up to a maximum of `maxBatchSize`\nrequests, if specified) and execute them as a single batch.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const makeDataLoader: (options: { readonly embedMany: (input: ReadonlyArray<string>) => Effect.Effect<Array<AiEmbeddingModel.Result>, AiError>; readonly window: Duration.DurationInput; readonly maxBatchSize?: number; }) => Effect.Effect<AiEmbeddingModel.Service, never, Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiEmbeddingModel.ts#L123"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiEmbeddingModel.ts",
      "path": "src/AiEmbeddingModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiEmbeddingModel.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Service {\n    readonly embed: (input: string) => Effect.Effect<Array<number>, AiError>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiEmbeddingModel.ts#L32"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiEmbeddingModel.ts",
      "path": "src/AiEmbeddingModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiEmbeddingModel.Result",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Result {\n    readonly index: number\n    readonly embeddings: Array<number>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiEmbeddingModel.ts#L40"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiError.ts",
      "path": "src/AiError.ts"
    },
    "project": "@effect/ai",
    "name": "AiError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class AiError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiError.ts#L23"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiError.ts",
      "path": "src/AiError.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiError.ts#L11"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiError.ts",
      "path": "src/AiError.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiError.ts#L17"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "AiInput",
    "description": "Represents input to a large language model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class AiInput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L28"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "UserMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class UserMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L80"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "AssistantMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class AssistantMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L96"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ToolMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L111"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "TextPart",
    "description": "Represents a text part of a message.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class TextPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L164"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ImagePart",
    "description": "Represents an image part of a message with binary image data.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ImagePart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L184"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ImageUrlPart",
    "description": "Represents an image part of a message with a URL pointing to the image.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ImageUrlPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L208"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "FilePart",
    "description": "Represents a file part of a message with binary file data.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class FilePart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L228"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "FileUrlPart",
    "description": "Represents a file part of a message with a URL pointing to the file.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class FileUrlPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L256"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ReasoningPart",
    "description": "Represents a part of a message containing reasoning that the model used to\ngenerate its output.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ReasoningPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L277"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "RedactedReasoningPart",
    "description": "Represents a part of a message containing content in the model's reasoning\nthat was encrypted by the model provider for safety reasons.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class RedactedReasoningPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L303"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallPart",
    "description": "Represents a part of a message containing a tool call that the model has\nrequested invocation of.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ToolCallPart { constructor(props: any, options?: Schema.MakeOptions) }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L339"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallResultPart",
    "description": "Represents a part of a message containing the results of tool calls that the\nmodel requested invocation of.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ToolCallResultPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L373"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L14"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "FromJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const FromJson: Schema.transform<Schema.SchemaClass<unknown, string, never>, typeof AiInput>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L43"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "MessageTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const MessageTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L68"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "Message",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const Message: Schema.Union<[typeof UserMessage, typeof AssistantMessage, typeof ToolMessage]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L126"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "PartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const PartTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L150"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallId",
    "description": "Represents the identifier generated by a model when a tool call is requested.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const ToolCallId: Schema.brand<typeof Schema.String, \"@effect/ai/ToolCallId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L324"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "UserMessagePart",
    "description": "The valid parts of a user message.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const UserMessagePart: Schema.Union<[typeof TextPart, typeof ImagePart, typeof ImageUrlPart, typeof FilePart, typeof FileUrlPart]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L397"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "AssistantMessagePart",
    "description": "The valid parts of an assistant message.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const AssistantMessagePart: Schema.Union<[typeof TextPart, typeof ReasoningPart, typeof RedactedReasoningPart, typeof ToolCallPart]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L423"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolMessagePart",
    "description": "The valid parts of a tool message.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const ToolMessagePart: typeof ToolCallResultPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L447"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const empty: AiInput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L478"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "concat",
    "description": "Concatenates the messages of one `AiInput` onto the messages of another,\ncreating a new `AiInput` with the messages from both.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Combination",
    "signature": "declare const concat: { (other: AiInput): (self: AiInput) => AiInput; (self: AiInput, other: AiInput): AiInput; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L560"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "is",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const is: (u: unknown) => u is AiInput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L459"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "isMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const isMessage: (u: unknown) => u is Message",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L465"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "isPart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const isPart: (u: unknown) => u is UserMessagePart | AssistantMessagePart | ToolMessagePart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L471"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "description": "Constructs a new `AiInput` from raw user input.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (input: Raw) => AiInput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L486"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "Raw",
    "description": "Represents raw input types that can be converted into an `AiInput`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type Raw = | string\n  | Message\n  | Iterable<Message>\n  | AiInput\n  | AiResponse.AiResponse\n  | AiResponse.WithStructuredOutput<any>\n  | AiResponse.WithToolCallResults<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L51"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "MessageTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type MessageTypeId = typeof MessageTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L74"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "Message",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type Message = typeof Message.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L140"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "PartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type PartTypeId = typeof PartTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L156"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type ToolCallId = typeof ToolCallId.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L330"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "UserMessagePart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type UserMessagePart = typeof UserMessagePart.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L415"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "AssistantMessagePart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type AssistantMessagePart = typeof AssistantMessagePart.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L439"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiInput.ts",
      "path": "src/AiInput.ts"
    },
    "project": "@effect/ai",
    "name": "ToolMessagePart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type ToolMessagePart = typeof ToolMessagePart.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiInput.ts#L453"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiLanguageModel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Context",
    "signature": "declare class AiLanguageModel",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: <Config>(opts: { readonly generateText: (options: AiLanguageModelOptions) => Effect.Effect<AiResponse.AiResponse, AiError, Config>; readonly streamText: (options: AiLanguageModelOptions) => Stream.Stream<AiResponse.AiResponse, AiError, Config>; }) => Effect.Effect<AiLanguageModel.Service<Config>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L282"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "generateText",
    "description": "Generate text using a large language model for the specified `prompt`.\n\nIf a `toolkit` is specified, the large language model will additionally\nbe able to perform tool calls to augment its response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Functions",
    "signature": "declare const generateText: <Tools extends AiTool.Any, Options extends NoExcessProperties<GenerateTextOptions<any>, Options>>(options: Options & GenerateTextOptions<Tools>) => Effect.Effect<ExtractSuccess<Options>, ExtractError<Options>, AiLanguageModel | ExtractContext<Options>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L543"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "generateObject",
    "description": "Generate a structured object for the specified prompt and schema using a\nlarge language model.\n\nWhen using a `Schema` that does not have an `identifier` or `_tag`\nproperty, you must specify a `toolCallId` to properly associate the\noutput of the model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Functions",
    "signature": "declare const generateObject: <A, I extends Record<string, unknown>, R>(options: GenerateObjectOptions<A, I, R>) => Effect.Effect<AiResponse.WithStructuredOutput<A>, AiError, AiLanguageModel | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L565"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "streamText",
    "description": "Generate text using a large language model for the specified `prompt`,\nstreaming output from the model as soon as it is available.\n\nIf a `toolkit` is specified, the large language model will additionally\nbe able to perform tool calls to augment its response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Functions",
    "signature": "declare const streamText: <Tools extends AiTool.Any, Options extends NoExcessProperties<GenerateTextOptions<any>, Options>>(options: Options & GenerateTextOptions<Tools>) => Stream.Stream<ExtractSuccess<Options>, ExtractError<Options>, AiLanguageModel | ExtractContext<Options>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L583"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "TaggedSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface TaggedSchema<A, I, R> extends Schema.Schema<A, I, R> {\n  readonly _tag: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L44"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "IdentifiedSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface IdentifiedSchema<A, I, R> extends Schema.Schema<A, I, R> {\n  readonly identifier: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L52"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "GenerateTextOptions",
    "description": "Options for generating text using a large language model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface GenerateTextOptions<Tools extends AiTool.Any> {\n  /**\n   * The prompt input to use to generate text.\n   */\n  readonly prompt: AiInput.Raw\n\n  /**\n   * An optional system message that will be part of the prompt.\n   */\n  readonly system?: string | undefined\n\n  /**\n   * A toolkit containing both the tools and the tool call handler to use to\n   * augment text generation.\n   */\n  readonly toolkit?: AiToolkit.ToHandler<Tools> | Effect.Effect<AiToolkit.ToHandler<Tools>, any, any>\n\n  /**\n   * The tool choice mode for the language model.\n   *\n   * - `auto` (default): The model can decide whether or not to call tools, as well as which tools to call.\n   * - `required`: The model **must** call a tool but can decide which tool will be called.\n   * - `none`: The model **must not** call a tool.\n   * - `{ tool: <tool_name> }`: The model must call the specified tool.\n   */\n  readonly toolChoice?: ToolChoice<Tools>\n\n  /**\n   * The concurrency level for resolving tool calls.\n   */\n  readonly concurrency?: Concurrency | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L77"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "GenerateObjectOptions",
    "description": "Options for generating a structured object using a large language model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface GenerateObjectOptions<A, I extends Record<string, unknown>, R> {\n  /**\n   * The prompt input to use to generate text.\n   */\n  readonly prompt: AiInput.Raw\n\n  /**\n   * An optional system message that will be part of the prompt.\n   */\n  readonly system?: string | undefined\n\n  /**\n   * The schema to be used to specify the structure of the object to generate.\n   */\n  readonly schema: Schema.Schema<A, I, R>\n\n  /**\n   * The identifier to use to associating the underlying tool call with the\n   * generated output.\n   */\n  readonly toolCallId?: string | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L116"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiLanguageModelOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface AiLanguageModelOptions {\n  /**\n   * The prompt messages to use to generate text.\n   */\n  readonly prompt: AiInput.AiInput\n  /**\n   * An optional system message that will be part of the prompt.\n   */\n  readonly system: Option.Option<string>\n  /**\n   * The tools to use to generate text in an encoded format suitable for\n   * incorporation into requests to the large language model.\n   */\n  readonly tools: Array<{\n    readonly name: string\n    readonly description: string\n    readonly parameters: JsonSchema.JsonSchema7\n    readonly structured: boolean\n  }>\n  /**\n   * The tool choice mode for the language model.\n   *\n   * - `auto` (default): The model can decide whether or not to call tools, as well as which tools to call.\n   * - `required`: The model **must** call a tool but can decide which tool will be called.\n   * - `none`: The model **must not** call a tool.\n   * - `{ tool: <tool_name> }`: The model must call the specified tool.\n   */\n  readonly toolChoice: ToolChoice<any>\n  /**\n   * The span to use to trace interactions with the large language model.\n   */\n  readonly span: Span\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L244"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "StructuredSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type StructuredSchema<A, I, R> = | TaggedSchema<A, I, R>\n  | IdentifiedSchema<A, I, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L36"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "ToolChoice",
    "description": "The tool choice mode for the language model.\n\n- `auto` (default): The model can decide whether or not to call tools, as well as which tools to call.\n- `required`: The model **must** call a tool but can decide which tool will be called.\n- `none`: The model **must not** call a tool.\n- `{ tool: <tool_name> }`: The model must call the specified tool.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type ToolChoice<Tool> = \"auto\" | \"none\" | \"required\" | {\n  readonly tool: Tool[\"name\"]\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L67"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "ExtractSuccess",
    "description": "A utility type to extract the success type for the text generation methods\nof `AiLanguageModel` from the provided options.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ExtractSuccess<Options> = Options extends {\n  toolkit: AiToolkit.ToHandler<infer _Tools>\n} ? AiResponse.WithToolCallResults<_Tools>\n  : Options extends {\n    toolkit: Effect.Effect<AiToolkit.ToHandler<infer _Tools>, infer _E, infer _R>\n  } ? AiResponse.WithToolCallResults<_Tools>\n  : AiResponse.AiResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L146"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "ExtractError",
    "description": "A utility type to extract the error type for the text generation methods\nof `AiLanguageModel` from the provided options.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ExtractError<Options> = Options extends {\n  toolkit: AiToolkit.ToHandler<infer _Tools>\n} ? AiError | AiTool.Failure<_Tools>\n  : Options extends {\n    toolkit: Effect.Effect<AiToolkit.ToHandler<infer _Tools>, infer _E, infer _R>\n  } ? AiError | AiTool.Failure<_Tools> | _E\n  : AiError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L161"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "ExtractContext",
    "description": "A utility type to extract the context type for the text generation methods\nof `AiLanguageModel` from the provided options.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ExtractContext<Options> = Options extends {\n  toolkit: AiToolkit.ToHandler<infer _Tools>\n} ? AiTool.Context<_Tools>\n  : Options extends {\n    toolkit: Effect.Effect<AiToolkit.ToHandler<infer _Tools>, infer _E, infer _R>\n  } ? AiTool.Context<_Tools> | _R\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L176"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiLanguageModel.ts",
      "path": "src/AiLanguageModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiLanguageModel.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Service<Config> {\n    /**\n     * Generate text using a large language model for the specified `prompt`.\n     *\n     * If a `toolkit` is specified, the large language model will additionally\n     * be able to perform tool calls to augment its response.\n     */\n    readonly generateText: <\n      Tools extends AiTool.Any,\n      Options extends NoExcessProperties<GenerateTextOptions<any>, Options>\n    >(\n      options: Options & GenerateTextOptions<Tools>\n    ) => Effect.Effect<\n      ExtractSuccess<Options>,\n      ExtractError<Options>,\n      ExtractContext<Options> | Config\n    >\n    /**\n     * Generate text using a large language model for the specified `prompt`,\n     * streaming output from the model as soon as it is available.\n     *\n     * If a `toolkit` is specified, the large language model will additionally\n     * be able to perform tool calls to augment its response.\n     */\n    readonly streamText: <\n      Tools extends AiTool.Any,\n      Options extends NoExcessProperties<GenerateTextOptions<any>, Options>\n    >(\n      options: Options & GenerateTextOptions<Tools>\n    ) => Stream.Stream<\n      ExtractSuccess<Options>,\n      ExtractError<Options>,\n      ExtractContext<Options> | Config\n    >\n\n    /**\n     * Generate a structured object for the specified prompt and schema using a\n     * large language model.\n     */\n    readonly generateObject: <A, I extends Record<string, unknown>, R>(\n      options: GenerateObjectOptions<A, I, R>\n    ) => Effect.Effect<AiResponse.WithStructuredOutput<A>, AiError, R | Config>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiLanguageModel.ts#L193"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiModel.ts",
      "path": "src/AiModel.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiModel.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiModel.ts",
      "path": "src/AiModel.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <Provides, Requires>(layer: Layer.Layer<Provides, never, Requires>) => AiModel<Provides, Requires>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiModel.ts#L51"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiModel.ts",
      "path": "src/AiModel.ts"
    },
    "project": "@effect/ai",
    "name": "AiModel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface AiModel<in out Provides, in out Requires>\n  extends Layer.Layer<Provides, never, Requires>, Effect.Effect<Layer.Layer<Provides>, never, Requires>\n{\n  readonly [TypeId]: TypeId\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiModel.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiModel.ts",
      "path": "src/AiModel.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiModel.ts#L20"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "AiResponse",
    "description": "Represents a response received from a large language model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class AiResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L34"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "WithStructuredOutput",
    "description": "Represents a response generated by a large language model that includes\nstructured output.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class WithStructuredOutput<A> { constructor(props: {\n    /**\n     * The identifier of the tool which generated the structured output.\n     */\n    readonly id: ToolCallId\n    /**\n     * The name of the tool which generated the structured output.\n     */\n    readonly name: string\n    /**\n     * The structured output generated by the model.\n     */\n    readonly value: A\n    /**\n     * The parts of the response.\n     */\n    readonly parts: ReadonlyArray<Part>\n  }, options?: Schema.MakeOptions) }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L108"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "WithToolCallResults",
    "description": "Represents a response generated by a large language model that includes\ntool call results.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class WithToolCallResults<Tools> { constructor(props: {\n    /**\n     * The tool call results, represented as a mapping between the tool call\n     * identifier and the result of the tool call handler.\n     */\n    readonly results: ReadonlyMap<ToolCallId, AiTool.Success<Tools>>\n    /**\n     * The encoded tool call results, suitable for incorporation into subsequent\n     * requests to the large language model.\n     */\n    readonly encodedResults: ReadonlyMap<ToolCallId, unknown>\n    /**\n     * The parts of the response.\n     */\n    readonly parts: ReadonlyArray<Part>\n  }, options?: Schema.MakeOptions) }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L173"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ContentSourceAnnotation",
    "description": "Represents a content source that was used to generate a model response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ContentSourceAnnotation",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L234"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "FileAnnotation",
    "description": "Represents a file that was used to generate a model response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class FileAnnotation",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L276"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "UrlAnnotation",
    "description": "Represents a web resource that was used to generate a model response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class UrlAnnotation",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L303"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "TextPart",
    "description": "Represents part of the text generated by the model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class TextPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L355"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ReasoningPart",
    "description": "Represents part of the reasoning carried out by the model to generate a\nresponse.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ReasoningPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L382"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "RedactedReasoningPart",
    "description": "Represents part of the reasoning carried out by the model to generate a\nresponse which needed to be encrypted by the model provider for safety\nreasons.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class RedactedReasoningPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L409"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallPart",
    "description": "Represents a request by a model to call a specific tool that it has been\nprovided with.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class ToolCallPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L445"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "MetadataPart",
    "description": "Represents the initial response metadata generated by a model when responding\nto a request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare class MetadataPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L524"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "Usage",
    "description": "Represents information about the number of tokens used by the model to\ngenerate a response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class Usage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L593"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "FinishPart",
    "description": "Represents the final part of a response generated by a large language model.\n\nContains useful information such as tokens used as part of the interaction\nwith the model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class FinishPart",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L656"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L20"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "FromJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const FromJson: Schema.transform<Schema.SchemaClass<unknown, string, never>, typeof AiResponse>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L84"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "StructuredResponseTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const StructuredResponseTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "WithToolCallResultsTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const WithToolCallResultsTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L158"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "PartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const PartTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L220"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "Annotation",
    "description": "Represents annotations that were used to support the message generated by\na model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const Annotation: Schema.Union<[typeof ContentSourceAnnotation, typeof FileAnnotation, typeof UrlAnnotation]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L333"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallId",
    "description": "Represents the identifier generated by a model when a tool call is requested.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const ToolCallId: Schema.brand<typeof Schema.String, \"@effect/ai/ToolCallId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L430"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "FinishReason",
    "description": "Represents the reason why a model finished generation of a response.\n\nPossible finish reasons:\n- `\"stop\"`: The model generated a stop sequence.\n- `\"length\"`: The model exceeded its token budget.\n- `\"content-filter\"`: The model generated content which violated a content filter.\n- `\"tool-calls\"`: The model triggered a tool call.\n- `\"error\"`: The model encountered an error.\n- `\"other\"`: The model stopped for a reason not supported by this protocol.\n- `\"unknown\"`: The model did not specify a finish reason.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const FinishReason: Schema.Literal<[\"stop\", \"length\", \"content-filter\", \"tool-calls\", \"error\", \"other\", \"unknown\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L562"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "Part",
    "description": "Represents an single part of a response received from a large language model.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const Part: Schema.Union<[typeof TextPart, typeof ReasoningPart, typeof RedactedReasoningPart, typeof ToolCallPart, typeof MetadataPart, typeof FinishPart]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L690"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const empty: AiResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L742"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "merge",
    "description": "Combines two responses into a single response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Combination",
    "signature": "declare const merge: { (other: AiResponse): (self: AiResponse) => AiResponse; (self: AiResponse, other: AiResponse): AiResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L753"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "withToolCallsJson",
    "description": "Adds the specified tool calls to the provided `AiResponse`.\n\n**NOTE**: With this method, the tool call parameters will be parsed as a\nJSON string. If your tool call parameters are already parsed, use\n`AiResponse.withToolCallsUnknown`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Combination",
    "signature": "declare const withToolCallsJson: { (toolCalls: Iterable<{ readonly id: string; readonly name: string; readonly params: string; }>): (self: AiResponse) => Effect.Effect<AiResponse, AiError>; (self: AiResponse, toolCalls: Iterable<{ readonly id: string; readonly name: string; readonly params: string; }>): Effect.Effect<AiResponse, AiError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L835"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "is",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const is: (u: unknown) => u is AiResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L716"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "isPart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const isPart: (u: unknown) => u is Part",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L722"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "isStructured",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const isStructured: (u: unknown) => u is WithStructuredOutput<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L728"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "hasToolCallResults",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const hasToolCallResults: (u: unknown) => u is WithToolCallResults<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L735"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ProviderMetadata",
    "description": "Represents additional provider-specific metadata that was returned by the\nmodel. Specific providers will use module augmentation to add their own\nspecific provider metadata.\n\nThe outer record is keyed by provider name, while the inner record is keyed\nby the names of the provider-specific metadata properties.\n\nFor example:\n\n```ts\nconst providerMeta = {\n  \"amazon-bedrock\": {\n    // Provider specific metadata\n  }\n}\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface ProviderMetadata {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L645"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "StructuredResponseTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type StructuredResponseTypeId = typeof StructuredResponseTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L99"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "WithToolCallResultsTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type WithToolCallResultsTypeId = typeof WithToolCallResultsTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L164"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "PartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type PartTypeId = typeof PartTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L226"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "Annotation",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type Annotation = typeof Annotation.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L347"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "ToolCallId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type ToolCallId = typeof ToolCallId.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L436"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "FinishReason",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type FinishReason = typeof FinishReason.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L584"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiResponse.ts",
      "path": "src/AiResponse.ts"
    },
    "project": "@effect/ai",
    "name": "Part",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type Part = typeof Part.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiResponse.ts#L710"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "CurrentSpanTransformer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Context",
    "signature": "declare class CurrentSpanTransformer",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L298"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "addGenAIAnnotations",
    "description": "Applies the specified GenAI telemetry attributes to the provided `Span`.\n\n**NOTE**: This method will mutate the `Span` **in-place**.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const addGenAIAnnotations: { (options: GenAITelemetryAttributeOptions): (span: Span) => void; (span: Span, options: GenAITelemetryAttributeOptions): void; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L267"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "addSpanAttributes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utilities",
    "signature": "declare const addSpanAttributes: (keyPrefix: string, transformKey: (key: string) => string) => <Attributes extends Record<string, any>>(span: Span, attributes: Attributes) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L228"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "BaseAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface BaseAttributes {\n  /**\n   * The Generative AI product as identified by the client or server\n   * instrumentation.\n   */\n  readonly system?: (string & {}) | WellKnownSystem | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L52"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "OperationAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai.operation`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface OperationAttributes {\n  readonly name?: (string & {}) | WellKnownOperationName | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L67"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "TokenAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai.token`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface TokenAttributes {\n  readonly type?: string | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L78"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "UsageAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai.usage`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface UsageAttributes {\n  readonly inputTokens?: number | null | undefined\n  readonly outputTokens?: number | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L89"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "RequestAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai.request`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface RequestAttributes {\n  /**\n   * The name of the GenAI model a request is being made to.\n   */\n  readonly model?: string | null | undefined\n  /**\n   * The temperature setting for the GenAI request.\n   */\n  readonly temperature?: number | null | undefined\n  /**\n   * The temperature setting for the GenAI request.\n   */\n  readonly topK?: number | null | undefined\n  /**\n   * The top_k sampling setting for the GenAI request.\n   */\n  readonly topP?: number | null | undefined\n  /**\n   * The top_p sampling setting for the GenAI request.\n   */\n  readonly maxTokens?: number | null | undefined\n  /**\n   * The encoding formats requested in an embeddings operation, if specified.\n   */\n  readonly encodingFormats?: ReadonlyArray<string> | null | undefined\n  /**\n   * List of sequences that the model will use to stop generating further\n   * tokens.\n   */\n  readonly stopSequences?: ReadonlyArray<string> | null | undefined\n  /**\n   * The frequency penalty setting for the GenAI request.\n   */\n  readonly frequencyPenalty?: number | null | undefined\n  /**\n   * The presence penalty setting for the GenAI request.\n   */\n  readonly presencePenalty?: number | null | undefined\n  /**\n   * The seed setting for the GenAI request. Requests with same seed value\n   * are more likely to return same result.\n   */\n  readonly seed?: number | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L101"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "ResponseAttributes",
    "description": "Telemetry attributes which are part of the GenAI specification and are\nnamespaced by `gen_ai.response`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface ResponseAttributes {\n  /**\n   * The unique identifier for the completion.\n   */\n  readonly id?: string | null | undefined\n  /**\n   * The name of the model that generated the response.\n   */\n  readonly model?: string | null | undefined\n  /**\n   * Array of reasons the model stopped generating tokens, corresponding to\n   * each generation received.\n   */\n  readonly finishReasons?: ReadonlyArray<string> | null | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L153"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "SpanTransformer",
    "description": "Represents a method which receives the elements of the request / response to\na large language model and can be used to modify the span used to trace the\nAPI call.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface SpanTransformer {\n  (options: AiLanguageModelOptions & { readonly response: AiResponse }): void\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L290"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "GenAITelemetryAttributes",
    "description": "The attributes used to describe telemetry in the context of Generative\nArtificial Intelligence (GenAI) Models requests and responses.\n\n{@see https://opentelemetry.io/docs/specs/semconv/attributes-registry/gen-ai/}",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type GenAITelemetryAttributes = Simplify<\n  & AttributesWithPrefix<BaseAttributes, \"gen_ai\">\n  & AttributesWithPrefix<OperationAttributes, \"gen_ai.operation\">\n  & AttributesWithPrefix<TokenAttributes, \"gen_ai.token\">\n  & AttributesWithPrefix<UsageAttributes, \"gen_ai.usage\">\n  & AttributesWithPrefix<RequestAttributes, \"gen_ai.request\">\n  & AttributesWithPrefix<ResponseAttributes, \"gen_ai.response\">\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L22"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "AllAttributes",
    "description": "All telemetry attributes which are part of the GenAI specification.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type AllAttributes = & BaseAttributes\n  & OperationAttributes\n  & TokenAttributes\n  & UsageAttributes\n  & RequestAttributes\n  & ResponseAttributes",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L37"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "WellKnownOperationName",
    "description": "The `gen_ai.operation.name` attribute has the following list of well-known\nvalues.\n\nIf one of them applies, then the respective value **MUST** be used;\notherwise, a custom value **MAY** be used.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type WellKnownOperationName = \"chat\" | \"embeddings\" | \"text_completion\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L179"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "WellKnownSystem",
    "description": "The `gen_ai.system` attribute has the following list of well-known values.\n\nIf one of them applies, then the respective value **MUST** be used;\notherwise, a custom value **MAY** be used.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type WellKnownSystem = | \"anthropic\"\n  | \"aws.bedrock\"\n  | \"az.ai.inference\"\n  | \"az.ai.openai\"\n  | \"cohere\"\n  | \"deepseek\"\n  | \"gemini\"\n  | \"groq\"\n  | \"ibm.watsonx.ai\"\n  | \"mistral_ai\"\n  | \"openai\"\n  | \"perplexity\"\n  | \"vertex_ai\"\n  | \"xai\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L190"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "AttributesWithPrefix",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type AttributesWithPrefix<Attributes, Prefix> = {\n  [Name in keyof Attributes as `${Prefix}.${FormatAttributeName<Name>}`]: Attributes[Name]\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L210"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "FormatAttributeName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type FormatAttributeName<T> = T extends string ?\n  T extends `${infer First}${infer Rest}`\n    ? `${First extends Uppercase<First> ? \"_\" : \"\"}${Lowercase<First>}${FormatAttributeName<Rest>}`\n  : T :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L218"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTelemetry.ts",
      "path": "src/AiTelemetry.ts"
    },
    "project": "@effect/ai",
    "name": "GenAITelemetryAttributeOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type GenAITelemetryAttributeOptions = BaseAttributes & {\n  readonly operation?: OperationAttributes | undefined\n  readonly request?: RequestAttributes | undefined\n  readonly response?: ResponseAttributes | undefined\n  readonly token?: TokenAttributes | undefined\n  readonly usage?: UsageAttributes | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTelemetry.ts#L251"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L18"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "isAiTool",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Guards",
    "signature": "declare const isAiTool: (u: unknown) => u is AiTool<any, any, any, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L122"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "description": "Constructs an `AiTool` from a name and, optionally, a specification for the\ntool call's protocol.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <const Name extends string, Parameters extends Schema.Struct.Fields = {}, Success extends Schema.Schema.Any = typeof Schema.Void, Failure extends Schema.Schema.All = typeof Schema.Never>(name: Name, options?: { readonly description?: string | undefined; readonly parameters?: Parameters; readonly success?: Success; readonly failure?: Failure; }) => AiTool<Name, Schema.Struct<Parameters>, Success, Failure>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L442"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "fromTaggedRequest",
    "description": "Constructs a new `AiTool` from a `Schema.TaggedRequest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromTaggedRequest: <S extends AnyTaggedRequestSchema>(schema: S) => FromTaggedRequest<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L487"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "AiTool",
    "description": "A `AiTool` represents an action that a large language model can take within\nyour application. The results of a tool call can be returned back to the\nlarge language model to be incorporated into its next response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface AiTool<\n  out Name extends string,\n  out Parameters extends AnyStructSchema = Schema.Struct<{}>,\n  out Success extends Schema.Schema.Any = typeof Schema.Void,\n  out Failure extends Schema.Schema.All = typeof Schema.Never,\n  out Requirements = never\n> extends Pipeable {\n  readonly [TypeId]: {\n    readonly _Requirements: Types.Covariant<Requirements>\n  }\n\n  /**\n   * The name of the tool.\n   */\n  readonly name: Name\n\n  /**\n   * The optional description of the tool.\n   */\n  readonly description?: string | undefined\n\n  /**\n   * A key for the tool, used to identify the tool within a `Context`.\n   */\n  readonly key: string\n\n  /**\n   * A `Schema` representing the type of the parameters that a tool handler\n   * must be called with.\n   */\n  readonly parametersSchema: Parameters\n\n  /**\n   * A `Schema` representing the type that a tool returns from its handler\n   * if successful.\n   */\n  readonly successSchema: Success\n\n  /**\n   * A `Schema` representing the type that a tool returns from its handler\n   * if it fails.\n   */\n  readonly failureSchema: Failure\n\n  /**\n   * Adds a requirement on a particular service for the tool call to be able to\n   * be executed.\n   */\n  addRequirement<Requirement>(): AiTool<Name, Parameters, Success, Failure, Requirements | Requirement>\n\n  /**\n   * Set the schema to use for tool handler success.\n   */\n  setSuccess<SuccessSchema extends Schema.Schema.Any>(schema: SuccessSchema): AiTool<\n    Name,\n    Parameters,\n    SuccessSchema,\n    Failure\n  >\n\n  /**\n   * Set the schema to use for tool handler failure.\n   */\n  setFailure<FailureSchema extends Schema.Schema.Any>(schema: FailureSchema): AiTool<\n    Name,\n    Parameters,\n    Success,\n    FailureSchema\n  >\n\n  /**\n   * Set the schema for the tool parameters.\n   */\n  setParameters<ParametersSchema extends Schema.Struct<any> | Schema.Struct.Fields>(\n    schema: ParametersSchema\n  ): AiTool<\n    Name,\n    ParametersSchema extends Schema.Struct<infer _> ? ParametersSchema\n      : ParametersSchema extends Schema.Struct.Fields ? Schema.Struct<ParametersSchema>\n      : never,\n    Success\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L34"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Any extends Pipeable {\n  readonly [TypeId]: {\n    readonly _Requirements: Types.Covariant<any>\n  }\n  readonly name: string\n  readonly description?: string | undefined\n  readonly key: string\n  readonly parametersSchema: AnyStructSchema\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L128"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "AnyWithProtocol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface AnyWithProtocol extends Any {\n  readonly successSchema: Schema.Schema.Any\n  readonly failureSchema: Schema.Schema.All\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L142"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Handler",
    "description": "Represents an `AiTool` that has been implemented within the application.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Handler<Name extends string> {\n  readonly _: unique symbol\n  readonly name: Name\n  readonly handler: (params: any) => Effect.Effect<any, any>\n  readonly context: Context_.Context<never>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L153"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "HandlerResult",
    "description": "Represents the result of calling the handler for a particular tool.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface HandlerResult<Tool extends Any> {\n  /**\n   * The result of executing the handler for a particular tool.\n   */\n  readonly result: Success<Tool>\n  /**\n   * The encoded result of executing the handler for a particular tool, which\n   * is suitable for returning back to the large language model for\n   * incorporation into further responses.\n   */\n  readonly encodedResult: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L188"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "AnyStructSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "export interface AnyStructSchema extends Pipeable {\n  readonly [Schema.TypeId]: any\n  readonly make: any\n  readonly Type: any\n  readonly Encoded: any\n  readonly Context: any\n  readonly ast: AST.AST\n  readonly fields: Schema.Struct.Fields\n  readonly annotations: any\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L341"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "AnyTaggedRequestSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "export interface AnyTaggedRequestSchema extends AnyStructSchema {\n  readonly _tag: string\n  readonly success: Schema.Schema.Any\n  readonly failure: Schema.Schema.All\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L356"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "FromTaggedRequest",
    "description": "A utility type to convert a `Schema.TaggedRequest` into an `AiTool`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "export interface FromTaggedRequest<S extends AnyTaggedRequestSchema>\n  extends AiTool<S[\"_tag\"], S, S[\"success\"], S[\"failure\"]>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L367"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L24"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "HandlerEffect",
    "description": "A utility type which returns the type of the `Effect` that will be used to\nresolve a tool call.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type HandlerEffect<Tool> = [Tool] extends [\n  AiTool<\n    infer _Name,\n    infer _Parameters,\n    infer _Success,\n    infer _Failure,\n    infer _Requirements\n  >\n] ? Effect.Effect<\n    _Success[\"Type\"],\n    AiError | _Failure[\"Type\"],\n    _Parameters[\"Context\"] | _Success[\"Context\"] | _Failure[\"Context\"] | _Requirements\n  >\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L167"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "ByName",
    "description": "A utility mapped type which associates tool names with tools.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ByName<Tools> = {\n  readonly [Tool in Tools as Tool[\"name\"]]: Tool\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L207"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Name",
    "description": "A utility type to extract the `Name` type from an `AiTool`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Name<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Name :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L217"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Parameters",
    "description": "A utility type to extract the type of the parameters which an `AiTool` must\nbe called with.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Parameters<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Parameters[\"Type\"] :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L233"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "ParametersSchema",
    "description": "A utility type to extract the schema type of the parameters which an `AiTool`\nmust be called with.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ParametersSchema<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Parameters :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L249"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Success",
    "description": "A utility type to extract the type of the response that an `AiTool` returns\nfrom its handler if successful.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Success<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Success[\"Type\"] :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L265"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "SuccessSchema",
    "description": "A utility type to extract the schema type of the response that an `AiTool`\nreturns from its handler if successful.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type SuccessSchema<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Success :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L281"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Failure",
    "description": "A utility type to extract the type of the response that an `AiTool` returns\nfrom its handler if it fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Failure<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Failure[\"Type\"] :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L297"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "FailureSchema",
    "description": "A utility type to extract the schema type of the response that an `AiTool`\nreturns from its handler if it fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type FailureSchema<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Failure :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L313"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "Context",
    "description": "A utility type to the `Context` type from an `AiTool`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Context<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? _Parameters[\"Context\"] | _Success[\"Context\"] | _Failure[\"Context\"] | _Requirements :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L328"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiTool.ts",
      "path": "src/AiTool.ts"
    },
    "project": "@effect/ai",
    "name": "ToHandler",
    "description": "A utility type which returns the handler type for an `AiTool`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type ToHandler<Tool> = Tool extends AiTool<\n  infer _Name,\n  infer _Parameters,\n  infer _Success,\n  infer _Failure,\n  infer _Requirements\n> ? Handler<_Name> :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiTool.ts#L377"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "description": "Constructs a new `AiToolkit` from the specified tools.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: <const Tools extends ReadonlyArray<AiTool.Any>>(...tools: Tools) => AiToolkit<Tools[number]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L241"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "merge",
    "description": "Merges this toolkit with one or more other toolkits.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Merging",
    "signature": "declare const merge: <const Toolkits extends ReadonlyArray<Any>>(...toolkits: Toolkits) => AiToolkit<Tools<Toolkits[number]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L251"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "AiToolkit",
    "description": "An `AiToolkit` represents a set of tools that a large language model can\nuse to augment its response.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface AiToolkit<in out Tools extends AiTool.Any>\n  extends Effect.Effect<ToHandler<Tools>, never, AiTool.ToHandler<Tools>>, Inspectable, Pipeable\n{\n  new(_: never): {}\n\n  readonly [TypeId]: TypeId\n\n  /**\n   * A map containing the tools that are part of this toolkit.\n   */\n  readonly tools: AiTool.ByName<Tools>\n\n  /**\n   * Converts this toolkit into a `Context` object containing the handlers for\n   * all tools in the toolkit.\n   */\n  toContext<Handlers extends HandlersFrom<Tools>, EX = never, RX = never>(\n    build: Handlers | Effect.Effect<Handlers, EX, RX>\n  ): Effect.Effect<Context.Context<AiTool.ToHandler<Tools>>, EX, RX>\n\n  /**\n   * Converts this toolkit into a `Layer` containing the handlers for all tools\n   * in the toolkit.\n   */\n  toLayer<Handlers extends HandlersFrom<Tools>, EX = never, RX = never>(\n    build: Handlers | Effect.Effect<Handlers, EX, RX>\n  ): Layer.Layer<AiTool.ToHandler<Tools>, EX, Exclude<RX, Scope.Scope>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L38"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Any {\n  readonly [TypeId]: TypeId\n  readonly tools: Record<string, AiTool.Any>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L71"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "ToHandler",
    "description": "Represents an `AiToolkit` which has been augmented with a handler function\nfor resolving tool call requests.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface ToHandler<in out Tool extends AiTool.Any> {\n  readonly tools: ReadonlyArray<Tool>\n  readonly handle: (toolName: AiTool.Name<Tool>, toolParams: AiTool.Parameters<Tool>) => AiTool.HandlerEffect<Tool>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L83"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Type Ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L29"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "HandlersFrom",
    "description": "A utility mapped type which associates tool names with their handlers.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type HandlersFrom<Tools> = {\n  [Tool in Tools as Tool[\"name\"]]: (params: AiTool.Parameters<Tool>) => AiTool.HandlerEffect<Tool>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L94"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "AiToolkit.ts",
      "path": "src/AiToolkit.ts"
    },
    "project": "@effect/ai",
    "name": "Tools",
    "description": "A utility type which returns the tools in an `AiToolkit`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Utility Types",
    "signature": "type Tools<Toolkit> = Toolkit extends AiToolkit<infer Tool> ? string extends Tool[\"name\"] ? never : Tool : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/AiToolkit.ts#L104"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiChat",
    "description": "Re-exports all named exports from the \"./AiChat.js\" module as `AiChat`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiChat from \"./AiChat.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L4"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiEmbeddingModel",
    "description": "Re-exports all named exports from the \"./AiEmbeddingModel.js\" module as `AiEmbeddingModel`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiEmbeddingModel from \"./AiEmbeddingModel.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L9"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiError",
    "description": "Re-exports all named exports from the \"./AiError.js\" module as `AiError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiError from \"./AiError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L14"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiInput",
    "description": "Re-exports all named exports from the \"./AiInput.js\" module as `AiInput`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiInput from \"./AiInput.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L19"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiLanguageModel",
    "description": "Re-exports all named exports from the \"./AiLanguageModel.js\" module as `AiLanguageModel`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiLanguageModel from \"./AiLanguageModel.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L24"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiModel",
    "description": "Re-exports all named exports from the \"./AiModel.js\" module as `AiModel`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiModel from \"./AiModel.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L29"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiResponse",
    "description": "Re-exports all named exports from the \"./AiResponse.js\" module as `AiResponse`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiResponse from \"./AiResponse.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L34"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiTelemetry",
    "description": "Re-exports all named exports from the \"./AiTelemetry.js\" module as `AiTelemetry`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiTelemetry from \"./AiTelemetry.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L39"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiTool",
    "description": "Re-exports all named exports from the \"./AiTool.js\" module as `AiTool`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiTool from \"./AiTool.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L44"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "AiToolkit",
    "description": "Re-exports all named exports from the \"./AiToolkit.js\" module as `AiToolkit`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as AiToolkit from \"./AiToolkit.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L49"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/ai",
    "name": "Tokenizer",
    "description": "Re-exports all named exports from the \"./Tokenizer.js\" module as `Tokenizer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Tokenizer from \"./Tokenizer.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/index.ts#L54"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Tokenizer.ts",
      "path": "src/Tokenizer.ts"
    },
    "project": "@effect/ai",
    "name": "Tokenizer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tags",
    "signature": "declare class Tokenizer",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/Tokenizer.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Tokenizer.ts",
      "path": "src/Tokenizer.ts"
    },
    "project": "@effect/ai",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const make: (options: { readonly tokenize: (content: AiInput.AiInput) => Effect.Effect<Array<number>, AiError>; }) => Tokenizer.Service",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/Tokenizer.ts#L37"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Tokenizer.ts",
      "path": "src/Tokenizer.ts"
    },
    "project": "@effect/ai",
    "name": "Tokenizer.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "export interface Service {\n    readonly tokenize: (input: AiInput.Raw) => Effect.Effect<Array<number>, AiError>\n    readonly truncate: (input: AiInput.Raw, tokens: number) => Effect.Effect<AiInput.AiInput, AiError>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/ai/ai/src/Tokenizer.ts#L27"
  }
]