[
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc",
    "description": "Re-exports all named exports from the \"./Rpc.js\" module as `Rpc`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Rpc from \"./Rpc.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L4"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient",
    "description": "Re-exports all named exports from the \"./RpcClient.js\" module as `RpcClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcClient from \"./RpcClient.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L9"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClientError",
    "description": "Re-exports all named exports from the \"./RpcClientError.js\" module as `RpcClientError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcClientError from \"./RpcClientError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L14"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcGroup",
    "description": "Re-exports all named exports from the \"./RpcGroup.js\" module as `RpcGroup`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcGroup from \"./RpcGroup.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L19"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcMessage",
    "description": "Re-exports all named exports from the \"./RpcMessage.js\" module as `RpcMessage`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcMessage from \"./RpcMessage.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L24"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcMiddleware",
    "description": "Re-exports all named exports from the \"./RpcMiddleware.js\" module as `RpcMiddleware`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcMiddleware from \"./RpcMiddleware.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L29"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcSchema",
    "description": "Re-exports all named exports from the \"./RpcSchema.js\" module as `RpcSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcSchema from \"./RpcSchema.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L34"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcSerialization",
    "description": "Re-exports all named exports from the \"./RpcSerialization.js\" module as `RpcSerialization`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcSerialization from \"./RpcSerialization.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L39"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcServer",
    "description": "Re-exports all named exports from the \"./RpcServer.js\" module as `RpcServer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcServer from \"./RpcServer.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L44"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcTest",
    "description": "Re-exports all named exports from the \"./RpcTest.js\" module as `RpcTest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcTest from \"./RpcTest.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L49"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcWorker",
    "description": "Re-exports all named exports from the \"./RpcWorker.js\" module as `RpcWorker`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as RpcWorker from \"./RpcWorker.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/index.ts#L54"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L25"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ForkTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Fork",
    "signature": "declare const ForkTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L745"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "isRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isRpc: (u: unknown) => u is Rpc<any, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <const Tag extends string, Payload extends Schema.Schema.Any | Schema.Struct.Fields = typeof Schema.Void, Success extends Schema.Schema.Any = typeof Schema.Void, Error extends Schema.Schema.All = typeof Schema.Never, const Stream extends boolean = false>(tag: Tag, options?: { readonly payload?: Payload; readonly success?: Success; readonly error?: Error; readonly stream?: Stream; readonly primaryKey?: [Payload] extends [Schema.Struct.Fields] ? ((payload: Schema.Simplify<Schema.Struct.Type<NoInfer<Payload>>>) => string) : never; }) => Rpc<Tag, Payload extends Schema.Struct.Fields ? Schema.Struct<Payload> : Payload, Stream extends true ? RpcSchema.Stream<Success, Error> : Success, Stream extends true ? typeof Schema.Never : Error>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L620"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "fromTaggedRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromTaggedRequest: <S extends AnyTaggedRequestSchema>(schema: S) => From<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L699"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "exitSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const exitSchema: <R extends Any>(self: R) => Schema.Schema<Exit<R>, ExitEncoded<R>, Context<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L717"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "fork",
    "description": "You can use `fork` to wrap a response Effect or Stream, to ensure that the\nresponse is executed concurrently regardless of the RpcServer concurrency\nsetting.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Fork",
    "signature": "declare const fork: <A>(value: A) => Fork<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L770"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "isFork",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Fork",
    "signature": "declare const isFork: (u: object) => u is Fork<any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L776"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc",
    "description": "Represents an API endpoint. An API endpoint is mapped to a single route on\nthe underlying `HttpRouter`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Rpc<\n  in out Tag extends string,\n  out Payload extends AnySchema = typeof Schema.Void,\n  out Success extends Schema.Schema.Any = typeof Schema.Void,\n  out Error extends Schema.Schema.All = typeof Schema.Never,\n  out Middleware extends RpcMiddleware.TagClassAny = never\n> extends Pipeable {\n  new(_: never): {}\n\n  readonly [TypeId]: TypeId\n  readonly _tag: Tag\n  readonly key: string\n  readonly payloadSchema: Payload\n  readonly successSchema: Success\n  readonly errorSchema: Error\n  readonly annotations: Context_.Context<never>\n  readonly middlewares: ReadonlySet<Middleware>\n\n  /**\n   * Set the schema for the success response of the rpc.\n   */\n  setSuccess<S extends Schema.Schema.Any>(schema: S): Rpc<\n    Tag,\n    Payload,\n    S,\n    Error,\n    Middleware\n  >\n\n  /**\n   * Set the schema for the error response of the rpc.\n   */\n  setError<E extends Schema.Schema.Any>(schema: E): Rpc<\n    Tag,\n    Payload,\n    Success,\n    E,\n    Middleware\n  >\n\n  /**\n   * Set the schema for the payload of the rpc.\n   */\n  setPayload<P extends Schema.Struct<any> | Schema.Struct.Fields>(\n    schema: P\n  ): Rpc<\n    Tag,\n    P extends Schema.Struct<infer _> ? P : P extends Schema.Struct.Fields ? Schema.Struct<P> : never,\n    Success,\n    Error,\n    Middleware\n  >\n\n  /**\n   * Add an `RpcMiddleware` to this procedure.\n   */\n  middleware<M extends RpcMiddleware.TagClassAny>(middleware: M): Rpc<\n    Tag,\n    Payload,\n    Success,\n    Error,\n    Middleware | M\n  >\n\n  /**\n   * Set the schema for the error response of the rpc.\n   */\n  prefix<const Prefix extends string>(prefix: Prefix): Rpc<\n    `${Prefix}${Tag}`,\n    Payload,\n    Success,\n    Error,\n    Middleware\n  >\n\n  /**\n   * Add an annotation on the rpc.\n   */\n  annotate<I, S>(\n    tag: Context_.Tag<I, S>,\n    value: S\n  ): Rpc<Tag, Payload, Success, Error, Middleware>\n\n  /**\n   * Merge the annotations of the rpc with the provided context.\n   */\n  annotateContext<I>(\n    context: Context_.Context<I>\n  ): Rpc<Tag, Payload, Success, Error, Middleware>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L46"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Handler",
    "description": "Represents an implemented rpc.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Handler<Tag extends string> {\n  readonly _: unique symbol\n  readonly tag: Tag\n  readonly handler: (request: any, options: {\n    readonly clientId: number\n    readonly headers: Headers\n  }) => Effect<any, any> | Stream<any, any>\n  readonly context: Context<never>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L143"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly _tag: string\n  readonly key: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L157"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "AnyWithProps",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface AnyWithProps {\n  readonly [TypeId]: TypeId\n  readonly _tag: string\n  readonly key: string\n  readonly payloadSchema: AnySchema\n  readonly successSchema: Schema.Schema.Any\n  readonly errorSchema: Schema.Schema.All\n  readonly annotations: Context_.Context<never>\n  readonly middlewares: ReadonlySet<RpcMiddleware.TagClassAnyWithProps>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L167"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "From",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface From<S extends AnyTaggedRequestSchema> extends Rpc<S[\"_tag\"], S, S[\"success\"], S[\"failure\"]> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L466"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "AnySchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export interface AnySchema extends Pipeable {\n  readonly [Schema.TypeId]: any\n  readonly Type: any\n  readonly Encoded: any\n  readonly Context: any\n  readonly make?: (params: any, ...rest: ReadonlyArray<any>) => any\n  readonly ast: AST.AST\n  readonly annotations: any\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L675"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "AnyTaggedRequestSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export interface AnyTaggedRequestSchema extends AnySchema {\n  readonly _tag: string\n  readonly success: Schema.Schema.Any\n  readonly failure: Schema.Schema.All\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L689"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Fork",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Fork",
    "signature": "export interface Fork<A> {\n  readonly [ForkTypeId]: ForkTypeId\n  readonly value: A\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L757"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L31"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Tag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Tag<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Tag\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L182"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Success",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Success<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Success[\"Type\"]\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L195"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessEncoded<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Success[\"Encoded\"]\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L208"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessExit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessExit<R> = Success<R> extends infer T ? T extends Stream<infer _A, infer _E, infer _Env> ? void : T\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L221"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessExitEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessExitEncoded<R> = SuccessEncoded<R> extends infer T ?\n  T extends Stream<infer _A, infer _E, infer _Env> ? void : T\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L228"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessChunk",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessChunk<R> = Success<R> extends Stream<infer _A, infer _E, infer _Env> ? _A : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L236"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessChunkEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessChunkEncoded<R> = SuccessEncoded<R> extends Stream<infer _A, infer _E, infer _Env> ? _A : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L242"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ErrorSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorSchema<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Error | _Middleware\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L248"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Error<R> = Schema.Schema.Type<ErrorSchema<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L261"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ErrorEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorEncoded<R> = Schema.Schema.Encoded<ErrorSchema<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L267"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ErrorExit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorExit<R> = Success<R> extends Stream<infer _A, infer _E, infer _Env> ? _E | Error<R> : Error<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L272"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ErrorExitEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorExitEncoded<R> = SuccessEncoded<R> extends Stream<infer _A, infer _E, infer _Env>\n  ? _E | ErrorEncoded<R>\n  : ErrorEncoded<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L278"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Exit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Exit<R> = Exit_<SuccessExit<R>, ErrorExit<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L286"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ExitEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExitEncoded<R, Defect> = Schema.ExitEncoded<SuccessExitEncoded<R>, ErrorExitEncoded<R>, Defect>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L292"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "PayloadConstructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PayloadConstructor<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ?\n  _Payload extends { readonly fields: Schema.Struct.Fields } ?\n    Schema.Simplify<Schema.Struct.Constructor<_Payload[\"fields\"]>>\n  : _Payload[\"Type\"]\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L298"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Payload",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Payload<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Payload[\"Type\"]\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L314"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? _Payload[\"Context\"] | _Success[\"Context\"] | _Error[\"Context\"]\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L327"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Middleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Middleware<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? Context_.Tag.Identifier<_Middleware>\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L340"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "MiddlewareClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type MiddlewareClient<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ?\n  _Middleware extends { readonly requiredForClient: true }\n    ? RpcMiddleware.ForClient<Context_.Tag.Identifier<_Middleware>>\n  : never\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L353"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "AddError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AddError<R, Error> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? Rpc<\n    _Tag,\n    _Payload,\n    _Success,\n    _Error | Error,\n    _Middleware\n  > :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L369"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "AddMiddleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AddMiddleware<R, Middleware> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? Rpc<\n    _Tag,\n    _Payload,\n    _Success,\n    _Error,\n    _Middleware | Middleware\n  > :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L388"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ToHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ToHandler<R> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? Handler<_Tag> :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L407"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ToHandlerFn",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ToHandlerFn<Current, R> = (\n  payload: Payload<Current>,\n  options: {\n    readonly clientId: number\n    readonly headers: Headers\n  }\n) => ResultFrom<Current, R> | Fork<ResultFrom<Current, R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L420"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "IsStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type IsStream<R, Tag> = R extends\n  Rpc<Tag, infer _Payload, RpcSchema.Stream<infer _A, infer _E>, infer _Error, infer _Middleware> ? true : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L432"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ExtractTag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExtractTag<R, Tag> = R extends\n  Rpc<Tag, infer _Payload, infer _Success, infer _Error, infer _Middleware> ? R : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L439"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ExtractProvides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExtractProvides<R, Tag> = R extends\n  Rpc<Tag, infer _Payload, infer _Success, infer _Error, infer _Middleware> ? _Middleware extends {\n    readonly provides: Context_.Tag<infer _I, infer _S>\n  } ? _I :\n  never :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L446"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ExcludeProvides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExcludeProvides<Env, R, Tag> = Exclude<\n  Env,\n  ExtractProvides<R, Tag>\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L457"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ResultFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ResultFrom<R, Context> = R extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? [_Success] extends [RpcSchema.Stream<infer _SA, infer _SE>] ?\n      | Stream<\n        _SA[\"Type\"],\n        _SE[\"Type\"] | _Error[\"Type\"],\n        Context\n      >\n      | Effect<\n        ReadonlyMailbox<_SA[\"Type\"], _SE[\"Type\"] | _Error[\"Type\"]>,\n        _SE[\"Type\"] | Schema.Schema.Type<_Error>,\n        Context\n      > :\n  Effect<\n    _Success[\"Type\"],\n    _Error[\"Type\"],\n    Context\n  > :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L472"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Prefixed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Prefixed<Rpcs, Prefix> = Rpcs extends Rpc<\n  infer _Tag,\n  infer _Payload,\n  infer _Success,\n  infer _Error,\n  infer _Middleware\n> ? Rpc<\n    `${Prefix}${_Tag}`,\n    _Payload,\n    _Success,\n    _Error,\n    _Middleware\n  >\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L500"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "ForkTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Fork",
    "signature": "type ForkTypeId = typeof ForkTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L751"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "Protocol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare class Protocol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L807"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "makeNoSerialization",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "declare const makeNoSerialization: <Rpcs extends Rpc.Any, E, const Flatten extends boolean = false>(group: RpcGroup.RpcGroup<Rpcs>, options: { readonly onFromClient: (options: { readonly message: FromClient<Rpcs>; readonly context: Context.Context<never>; readonly discard: boolean; }) => Effect.Effect<void, E>; readonly supportsAck?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly generateRequestId?: (() => RequestId) | undefined; readonly disableTracing?: boolean | undefined; readonly flatten?: Flatten | undefined; }) => Effect.Effect<{ readonly client: Flatten extends true ? RpcClient.Flat<Rpcs, E> : RpcClient<Rpcs, E>; readonly write: (message: FromServer<Rpcs>) => Effect.Effect<void>; }, never, Scope.Scope | Rpc.MiddlewareClient<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L204"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "declare const make: <Rpcs extends Rpc.Any, const Flatten extends boolean = false>(group: RpcGroup.RpcGroup<Rpcs>, options?: { readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly generateRequestId?: (() => RequestId) | undefined; readonly disableTracing?: boolean | undefined; readonly flatten?: Flatten | undefined; } | undefined) => Effect.Effect<Flatten extends true ? RpcClient.Flat<Rpcs, RpcClientError> : RpcClient<Rpcs, RpcClientError>, never, Protocol | Rpc.MiddlewareClient<Rpcs> | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L608"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "currentHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const currentHeaders: FiberRef.FiberRef<Headers.Headers>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L765"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "withHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const withHeaders: { (headers: Headers.Input): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, headers: Headers.Input): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L774"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "withHeadersEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const withHeadersEffect: { <E2, R2>(headers: Effect.Effect<Headers.Input, E2, R2>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E | E2, R | R2>; <A, E, R, E2, R2>(effect: Effect.Effect<A, E, R>, headers: Effect.Effect<Headers.Input, E2, R2>): Effect.Effect<A, E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L787"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolHttp: (client: HttpClient.HttpClient) => Effect.Effect<Protocol[\"Type\"], never, RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L828"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolHttp: (options: { readonly url: string; readonly transformClient?: <E, R>(client: HttpClient.HttpClient.With<E, R>) => HttpClient.HttpClient.With<E, R>; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L907"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolSocket: (options?: { readonly retryTransientErrors?: boolean | undefined; }) => Effect.Effect<Protocol[\"Type\"], never, Scope.Scope | RpcSerialization.RpcSerialization | Socket.Socket>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L926"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWorker: (options: { readonly size: number; readonly concurrency?: number | undefined; readonly targetUtilization?: number | undefined; } | { readonly minSize: number; readonly maxSize: number; readonly concurrency?: number | undefined; readonly targetUtilization?: number | undefined; readonly timeToLive: Duration.DurationInput; }) => Effect.Effect<Protocol[\"Type\"], WorkerError, Scope.Scope | Worker.PlatformWorker | Worker.Spawner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L1055"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolWorker: (options: { readonly size: number; readonly concurrency?: number | undefined; readonly targetUtilization?: number | undefined; } | { readonly minSize: number; readonly maxSize: number; readonly concurrency?: number | undefined; readonly targetUtilization?: number | undefined; readonly timeToLive: Duration.DurationInput; }) => Layer.Layer<Protocol, WorkerError, Worker.PlatformWorker | Worker.Spawner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L1206"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolSocket: (options?: { readonly retryTransientErrors?: boolean | undefined; }) => Layer.Layer<Protocol, never, Socket.Socket | RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L1225"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type { [K in keyof (RpcClient.From<Exclude<Rpcs, { readonly _tag: `${string}.${string}`; }>, E, \"\"> & { readonly [CurrentPrefix in RpcClient.Prefixes<Rpcs>]: RpcClient.From<Extract<Rpcs, { readonly _tag: `${CurrentPrefix}.${string}`; }>, E, CurrentPrefix>; })]: (RpcClient.From<Exclude<Rpcs, { readonly _tag: `${string}.${string}`; }>, E, \"\"> & { readonly [CurrentPrefix in RpcClient.Prefixes<Rpcs>]: RpcClient.From<Extract<Rpcs, { readonly _tag: `${CurrentPrefix}.${string}`; }>, E, CurrentPrefix>; })[K]; } = Schema.Simplify<\n  & RpcClient.From<RpcClient.NonPrefixed<Rpcs>, E, \"\">\n  & {\n    readonly [CurrentPrefix in RpcClient.Prefixes<Rpcs>]: RpcClient.From<\n      RpcClient.Prefixed<Rpcs, CurrentPrefix>,\n      E,\n      CurrentPrefix\n    >\n  }\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L51"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "FromGroup",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type { [K in keyof (RpcClient.From<Exclude<RpcGroup.Rpcs<Group>, { readonly _tag: `${string}.${string}`; }>, E, \"\"> & { readonly [CurrentPrefix in RpcClient.Prefixes<RpcGroup.Rpcs<Group>>]: RpcClient.From<Extract<RpcGroup.Rpcs<Group>, { readonly _tag: `${CurrentPrefix}.${string}`; }>, E, CurrentPrefix>; })]: (RpcClient.From<Exclude<RpcGroup.Rpcs<Group>, { readonly _tag: `${string}.${string}`; }>, E, \"\"> & { readonly [CurrentPrefix in RpcClient.Prefixes<RpcGroup.Rpcs<Group>>]: RpcClient.From<Extract<RpcGroup.Rpcs<Group>, { readonly _tag: `${CurrentPrefix}.${string}`; }>, E, CurrentPrefix>; })[K]; } = RpcClient<RpcGroup.Rpcs<Group>, E>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L196"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient.Prefixes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type Prefixes<Rpcs> = Rpcs[\"_tag\"] extends infer Tag\n    ? Tag extends `${infer Prefix}.${string}` ? Prefix : never\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L71"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient.NonPrefixed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type NonPrefixed<Rpcs> = Exclude<Rpcs, { readonly _tag: `${string}.${string}` }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L79"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient.Prefixed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type Prefixed<Rpcs, Prefix> = Extract<\n    Rpcs,\n    { readonly _tag: `${Prefix}.${string}` }\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L85"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient.From",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type From<Rpcs, E, Prefix> = {\n    readonly [\n      Current in Rpcs as Current[\"_tag\"] extends `${Prefix}.${infer Method}` ? Method\n        : Current[\"_tag\"]\n    ]: <\n      const AsMailbox extends boolean = false,\n      const Discard = false\n    >(\n      input: Rpc.PayloadConstructor<Current>,\n      options?: Rpc.Success<Current> extends Stream.Stream<infer _A, infer _E, infer _R> ? {\n          readonly asMailbox?: AsMailbox | undefined\n          readonly streamBufferSize?: number | undefined\n          readonly headers?: Headers.Input | undefined\n          readonly context?: Context.Context<never> | undefined\n        } :\n        {\n          readonly headers?: Headers.Input | undefined\n          readonly context?: Context.Context<never> | undefined\n          readonly discard?: Discard | undefined\n        }\n    ) => Current extends Rpc.Rpc<\n      infer _Tag,\n      infer _Payload,\n      infer _Success,\n      infer _Error,\n      infer _Middleware\n    > ? [_Success] extends [RpcSchema.Stream<infer _A, infer _E>] ? AsMailbox extends true ? Effect.Effect<\n            Mailbox.ReadonlyMailbox<_A[\"Type\"], _E[\"Type\"] | _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"]>,\n            never,\n            | Scope.Scope\n            | _Payload[\"Context\"]\n            | _Success[\"Context\"]\n            | _Error[\"Context\"]\n            | _Middleware[\"failure\"][\"Context\"]\n          >\n        : Stream.Stream<\n          _A[\"Type\"],\n          _E[\"Type\"] | _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"],\n          _Payload[\"Context\"] | _Success[\"Context\"] | _Error[\"Context\"] | _Middleware[\"failure\"][\"Context\"]\n        >\n      : Effect.Effect<\n        Discard extends true ? void : _Success[\"Type\"],\n        Discard extends true ? E : _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"],\n        _Payload[\"Context\"] | _Success[\"Context\"] | _Error[\"Context\"] | _Middleware[\"failure\"][\"Context\"]\n      > :\n      never\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L94"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClient.ts",
      "path": "src/RpcClient.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClient.Flat",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "type Flat<Rpcs, E> = <\n    const Tag extends Rpcs[\"_tag\"],\n    const AsMailbox extends boolean = false,\n    const Discard = false\n  >(\n    tag: Tag,\n    payload: Rpc.PayloadConstructor<Rpc.ExtractTag<Rpcs, Tag>>,\n    options?: Rpc.Success<Rpc.ExtractTag<Rpcs, Tag>> extends Stream.Stream<infer _A, infer _E, infer _R> ? {\n        readonly asMailbox?: AsMailbox | undefined\n        readonly streamBufferSize?: number | undefined\n        readonly headers?: Headers.Input | undefined\n        readonly context?: Context.Context<never> | undefined\n      } :\n      {\n        readonly headers?: Headers.Input | undefined\n        readonly context?: Context.Context<never> | undefined\n        readonly discard?: Discard | undefined\n      }\n  ) => Rpc.ExtractTag<Rpcs, Tag> extends Rpc.Rpc<\n    infer _Tag,\n    infer _Payload,\n    infer _Success,\n    infer _Error,\n    infer _Middleware\n  > ? [_Success] extends [RpcSchema.Stream<infer _A, infer _E>] ? AsMailbox extends true ? Effect.Effect<\n          Mailbox.ReadonlyMailbox<_A[\"Type\"], _E[\"Type\"] | _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"]>,\n          never,\n          | Scope.Scope\n          | _Payload[\"Context\"]\n          | _Success[\"Context\"]\n          | _Error[\"Context\"]\n          | _Middleware[\"failure\"][\"Context\"]\n        >\n      : Stream.Stream<\n        _A[\"Type\"],\n        _E[\"Type\"] | _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"],\n        _Payload[\"Context\"] | _Success[\"Context\"] | _Error[\"Context\"] | _Middleware[\"failure\"][\"Context\"]\n      >\n    : Effect.Effect<\n      Discard extends true ? void : _Success[\"Type\"],\n      Discard extends true ? E : _Error[\"Type\"] | E | _Middleware[\"failure\"][\"Type\"],\n      _Payload[\"Context\"] | _Success[\"Context\"] | _Error[\"Context\"] | _Middleware[\"failure\"][\"Context\"]\n    > :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClient.ts#L146"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RpcClientError.ts",
      "path": "src/RpcClientError.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcClientError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Errors",
    "signature": "declare class RpcClientError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClientError.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcClientError.ts",
      "path": "src/RpcClientError.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClientError.ts#L10"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcClientError.ts",
      "path": "src/RpcClientError.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Symbols",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcClientError.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L22"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "declare const make: <const Rpcs extends ReadonlyArray<Rpc.Any>>(...rpcs: Rpcs) => RpcGroup<Rpcs[number]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L368"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcGroup",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "export interface RpcGroup<in out R extends Rpc.Any> extends Pipeable {\n  new(_: never): {}\n\n  readonly [TypeId]: TypeId\n  readonly requests: ReadonlyMap<string, R>\n  readonly annotations: Context.Context<never>\n\n  /**\n   * Add one or more procedures to the group.\n   */\n  add<const Rpcs2 extends ReadonlyArray<Rpc.Any>>(\n    ...rpcs: Rpcs2\n  ): RpcGroup<R | Rpcs2[number]>\n\n  /**\n   * Merge this group with one or more other groups.\n   */\n  merge<const Groups extends ReadonlyArray<Any>>(\n    ...groups: Groups\n  ): RpcGroup<R | Rpcs<Groups[number]>>\n\n  /**\n   * Add middleware to all the procedures added to the group until this point.\n   */\n  middleware<M extends RpcMiddleware.TagClassAny>(middleware: M): RpcGroup<Rpc.AddMiddleware<R, M>>\n\n  /**\n   * Add a prefix to the procedures in this group, returning a new group\n   */\n  prefix<const Prefix extends string>(prefix: Prefix): RpcGroup<Rpc.Prefixed<R, Prefix>>\n\n  /**\n   * Implement the handlers for the procedures in this group, returning a\n   * context object.\n   */\n  toHandlersContext<\n    Handlers extends HandlersFrom<R>,\n    EX = never,\n    RX = never\n  >(\n    build:\n      | Handlers\n      | Effect.Effect<Handlers, EX, RX>\n  ): Effect.Effect<\n    Context.Context<Rpc.ToHandler<R>>,\n    EX,\n    | RX\n    | HandlersContext<R, Handlers>\n  >\n\n  /**\n   * Implement the handlers for the procedures in this group.\n   */\n  toLayer<\n    Handlers extends HandlersFrom<R>,\n    EX = never,\n    RX = never\n  >(\n    build:\n      | Handlers\n      | Effect.Effect<Handlers, EX, RX>\n  ): Layer.Layer<\n    Rpc.ToHandler<R>,\n    EX,\n    | Exclude<RX, Scope>\n    | HandlersContext<R, Handlers>\n  >\n\n  of<const Handlers extends HandlersFrom<R>>(handlers: Handlers): Handlers\n\n  /**\n   * Implement a single handler from the group.\n   */\n  toLayerHandler<\n    const Tag extends R[\"_tag\"],\n    Handler extends HandlerFrom<R, Tag>,\n    EX = never,\n    RX = never\n  >(\n    tag: Tag,\n    build:\n      | Handler\n      | Effect.Effect<Handler, EX, RX>\n  ): Layer.Layer<\n    Rpc.Handler<Tag>,\n    EX,\n    | Exclude<RX, Scope>\n    | HandlerContext<R, Tag, Handler>\n  >\n\n  /**\n   * Retrieve a handler for a specific procedure in the group.\n   */\n  accessHandler<const Tag extends R[\"_tag\"]>(tag: Tag): Effect.Effect<\n    (\n      payload: Rpc.Payload<Extract<R, { readonly _tag: Tag }>>,\n      headers: Headers\n    ) => Rpc.ResultFrom<Extract<R, { readonly _tag: Tag }>, never>,\n    never,\n    Rpc.Handler<Tag>\n  >\n\n  /**\n   * Annotate the group with a value.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): RpcGroup<R>\n\n  /**\n   * Annotate the Rpc's above this point with a value.\n   */\n  annotateRpcs<I, S>(tag: Context.Tag<I, S>, value: S): RpcGroup<R>\n\n  /**\n   * Annotate the group with a context object.\n   */\n  annotateContext<S>(context: Context.Context<S>): RpcGroup<R>\n\n  /**\n   * Annotate the Rpc's above this point with a context object.\n   */\n  annotateRpcsContext<S>(context: Context.Context<S>): RpcGroup<R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L34"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "export interface Any {\n  readonly [TypeId]: TypeId\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L161"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L28"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "HandlersFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "type HandlersFrom<Rpc> = {\n  readonly [Current in Rpc as Current[\"_tag\"]]: Rpc.ToHandlerFn<Current>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L169"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "HandlerFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "type HandlerFrom<Rpc, Tag> = Extract<Rpc, { readonly _tag: Tag }> extends\n  infer Current ? Current extends Rpc.Any ? Rpc.ToHandlerFn<Current> : never : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L177"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "HandlersContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "type HandlersContext<Rpcs, Handlers> = keyof Handlers extends infer K ?\n  K extends keyof Handlers & string ? HandlerContext<Rpcs, K, Handlers[K]> : never :\n  never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L184"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "HandlerContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "type HandlerContext<Rpcs, K, Handler> = [Rpc.IsStream<Rpcs, K>] extends\n  [true] ? Handler extends (...args: any) =>\n    | Stream.Stream<infer _A, infer _E, infer _R>\n    | Rpc.Fork<Stream.Stream<infer _A, infer _E, infer _R>>\n    | Effect.Effect<\n      ReadonlyMailbox<infer _A, infer _E>,\n      infer _EX,\n      infer _R\n    >\n    | Rpc.Fork<\n      Effect.Effect<\n        ReadonlyMailbox<infer _A, infer _E>,\n        infer _EX,\n        infer _R\n      >\n    > ? Exclude<Rpc.ExcludeProvides<_R, Rpcs, K>, Scope> :\n  never :\n  Handler extends (\n    ...args: any\n  ) => Effect.Effect<infer _A, infer _E, infer _R> | Rpc.Fork<Effect.Effect<infer _A, infer _E, infer _R>> ?\n    Rpc.ExcludeProvides<_R, Rpcs, K>\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L192"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcGroup.ts",
      "path": "src/RpcGroup.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpcs",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "groups",
    "signature": "type Rpcs<Group> = Group extends RpcGroup<infer R> ? string extends R[\"_tag\"] ? never : R : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcGroup.ts#L219"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestIdTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "declare const RequestIdTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "constEof",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "declare const constEof: Eof",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L136"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "constPing",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "declare const constPing: Ping",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L142"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseIdTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "declare const ResponseIdTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L169"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "constPong",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "declare const constPong: Pong",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L285"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "declare const RequestId: (id: bigint | string) => RequestId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseDefectEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "declare const ResponseDefectEncoded: (input: unknown) => ResponseDefectEncoded",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L249"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface RequestEncoded {\n  readonly _tag: \"Request\"\n  readonly id: string\n  readonly tag: string\n  readonly payload: unknown\n  readonly headers: ReadonlyArray<[string, string]>\n  readonly traceId?: string | undefined\n  readonly spanId?: string | undefined\n  readonly sampled?: boolean | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L53"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface Request<A extends Rpc.Any> {\n  readonly _tag: \"Request\"\n  readonly id: RequestId\n  readonly tag: Rpc.Tag<A>\n  readonly payload: Rpc.Payload<A>\n  readonly headers: Headers\n  readonly traceId?: string | undefined\n  readonly spanId?: string | undefined\n  readonly sampled?: boolean | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L68"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Ack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface Ack {\n  readonly _tag: \"Ack\"\n  readonly requestId: RequestId\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L83"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Interrupt",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface Interrupt {\n  readonly _tag: \"Interrupt\"\n  readonly requestId: RequestId\n  readonly interruptors: ReadonlyArray<FiberId.FiberId>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L92"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "AckEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface AckEncoded {\n  readonly _tag: \"Ack\"\n  readonly requestId: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L102"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "InterruptEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface InterruptEncoded {\n  readonly _tag: \"Interrupt\"\n  readonly requestId: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L111"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Eof",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface Eof {\n  readonly _tag: \"Eof\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L120"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Ping",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "export interface Ping {\n  readonly _tag: \"Ping\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L128"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseChunkEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseChunkEncoded {\n  readonly _tag: \"Chunk\"\n  readonly requestId: string\n  readonly values: NonEmptyReadonlyArray<unknown>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L187"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseChunk",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseChunk<A extends Rpc.Any> {\n  readonly _tag: \"Chunk\"\n  readonly clientId: number\n  readonly requestId: RequestId\n  readonly values: NonEmptyReadonlyArray<Rpc.SuccessChunk<A>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L197"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseExitEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseExitEncoded {\n  readonly _tag: \"Exit\"\n  readonly requestId: string\n  readonly exit: Schema.ExitEncoded<unknown, unknown, unknown>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L208"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ClientProtocolError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ClientProtocolError {\n  readonly _tag: \"ClientProtocolError\"\n  readonly error: RpcClientError\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L218"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseExit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseExit<A extends Rpc.Any> {\n  readonly _tag: \"Exit\"\n  readonly clientId: number\n  readonly requestId: RequestId\n  readonly exit: Rpc.Exit<A>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L227"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseDefectEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseDefectEncoded {\n  readonly _tag: \"Defect\"\n  readonly defect: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L238"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseDefect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ResponseDefect {\n  readonly _tag: \"Defect\"\n  readonly clientId: number\n  readonly defect: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L258"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ClientEnd",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface ClientEnd {\n  readonly _tag: \"ClientEnd\"\n  readonly clientId: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L268"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "Pong",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "export interface Pong {\n  readonly _tag: \"Pong\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L277"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "FromClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "type FromClient<A> = Request<A> | Ack | Interrupt | Eof",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L16"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "FromClientEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "type FromClientEncoded = RequestEncoded | AckEncoded | InterruptEncoded | Ping | Eof",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L22"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestIdTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "type RequestIdTypeId = typeof RequestIdTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L34"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "request",
    "signature": "type RequestId = Branded<bigint, RequestIdTypeId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L40"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "FromServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "type FromServer<A> = | ResponseChunk<A>\n  | ResponseExit<A>\n  | ResponseDefect\n  | ClientEnd",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L148"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "FromServerEncoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "type FromServerEncoded = | ResponseChunkEncoded\n  | ResponseExitEncoded\n  | ResponseDefectEncoded\n  | Pong\n  | ClientProtocolError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L158"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseIdTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "type ResponseIdTypeId = typeof ResponseIdTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L175"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMessage.ts",
      "path": "src/RpcMessage.ts"
    },
    "project": "@effect/rpc",
    "name": "ResponseId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "response",
    "signature": "type ResponseId = Branded<number, ResponseIdTypeId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMessage.ts#L181"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L18"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "Tag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Tag: <Self>() => <const Name extends string, const Options extends { readonly wrap?: boolean; readonly optional?: boolean; readonly failure?: Schema.Schema.All; readonly provides?: Context.Tag<any, any>; readonly requiredForClient?: boolean; }>(id: Name, options?: Options | undefined) => TagClass<Self, Name, Options>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L233"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "layerClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "client",
    "signature": "declare const layerClient: <Id, S, R, EX = never, RX = never>(tag: Context.Tag<Id, S>, service: RpcMiddlewareClient<R> | Effect.Effect<RpcMiddlewareClient<R>, EX, RX>) => Layer.Layer<ForClient<Id>, EX, R | Exclude<RX, Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L286"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcMiddleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcMiddleware<Provides, E> {\n  (options: {\n    readonly clientId: number\n    readonly rpc: Rpc.AnyWithProps\n    readonly payload: unknown\n    readonly headers: Headers\n  }): Effect.Effect<Provides, E>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L30"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcMiddlewareWrap",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcMiddlewareWrap<Provides, E> {\n  (options: {\n    readonly clientId: number\n    readonly rpc: Rpc.AnyWithProps\n    readonly payload: unknown\n    readonly headers: Headers\n    readonly next: Effect.Effect<SuccessValue, E, Provides>\n  }): Effect.Effect<SuccessValue, E>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L43"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "SuccessValue",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SuccessValue {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L57"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcMiddlewareClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcMiddlewareClient<R = never> {\n  (options: {\n    readonly rpc: Rpc.AnyWithProps\n    readonly request: Request<Rpc.Any>\n  }): Effect.Effect<Request<Rpc.Any>, never, R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L65"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "ForClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ForClient<Id> {\n  readonly _: unique symbol\n  readonly id: Id\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L76"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any {\n  (options: {\n    readonly rpc: Rpc.AnyWithProps\n    readonly payload: unknown\n    readonly headers: Headers\n    readonly next?: Effect.Effect<any, any, any>\n  }): Effect.Effect<any, any>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L85"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClass<\n  Self,\n  Name extends string,\n  Options\n> extends\n  TagClass.Base<\n    Self,\n    Name,\n    Options,\n    TagClass.Wrap<Options> extends true ? RpcMiddlewareWrap<\n        TagClass.Provides<Options>,\n        TagClass.Failure<Options>\n      > :\n      RpcMiddleware<\n        TagClass.Service<Options>,\n        TagClass.FailureService<Options>\n      >\n  >\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L98"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClassAny",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassAny extends Context.Tag<any, any> {\n  readonly [TypeId]: TypeId\n  readonly optional: boolean\n  readonly provides?: Context.Tag<any, any> | undefined\n  readonly failure: Schema.Schema.All\n  readonly requiredForClient: boolean\n  readonly wrap: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L207"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClassAnyWithProps",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassAnyWithProps extends Context.Tag<any, RpcMiddleware<any, any> | RpcMiddlewareWrap<any, any>> {\n  readonly [TypeId]: TypeId\n  readonly optional: boolean\n  readonly provides?: Context.Tag<any, any>\n  readonly failure: Schema.Schema.All\n  readonly requiredForClient: boolean\n  readonly wrap: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L220"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L24"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Base",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Base<Self, Name extends string, Options, Service> extends Context.Tag<Self, Service> {\n    new(_: never): Context.TagClassShape<Name, Service>\n    readonly [TypeId]: TypeId\n    readonly optional: Optional<Options>\n    readonly failure: FailureSchema<Options>\n    readonly provides: Options extends { readonly provides: Context.Tag<any, any> } ? Options[\"provides\"]\n      : undefined\n    readonly requiredForClient: RequiredForClient<Options>\n    readonly wrap: Wrap<Options>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L191"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Provides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Provides<Options> = Options extends {\n    readonly provides: Context.Tag<any, any>\n    readonly optional?: false\n  } ? Context.Tag.Identifier<Options[\"provides\"]>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L127"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Service<Options> = Options extends { readonly provides: Context.Tag<any, any> }\n    ? Context.Tag.Service<Options[\"provides\"]>\n    : void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L137"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.FailureSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureSchema<Options> = Options extends\n    { readonly failure: Schema.Schema.All; readonly optional?: false } ? Options[\"failure\"]\n    : typeof Schema.Never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L145"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Failure",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Failure<Options> = Options extends\n    { readonly failure: Schema.Schema<infer _A, infer _I, infer _R>; readonly optional?: false } ? _A\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L153"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.FailureContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureContext<Options> = Schema.Schema.Context<FailureSchema<Options>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L161"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.FailureService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureService<Options> = Optional<Options> extends true ? unknown : Failure<Options>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L167"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Optional",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Optional<Options> = Options extends { readonly optional: true } ? true : false",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L173"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.RequiredForClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type RequiredForClient<Options> = Options extends { readonly requiredForClient: true } ? true : false",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L179"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcMiddleware.ts",
      "path": "src/RpcMiddleware.ts"
    },
    "project": "@effect/rpc",
    "name": "TagClass.Wrap",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Wrap<Options> = Options extends { readonly wrap: true } ? true : false",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcMiddleware.ts#L185"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamSchemaId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "declare const StreamSchemaId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L17"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "isStreamSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "declare const isStreamSchema: (schema: Schema.Schema.All) => schema is Stream<any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "isStreamSerializable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "declare const isStreamSerializable: (schema: Schema.WithResult.Any) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L30"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "getStreamSchemas",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "declare const getStreamSchemas: (ast: AST.AST) => Option.Option<{ readonly success: Schema.Schema.Any; readonly failure: Schema.Schema.All; }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "Stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "declare const Stream: <A extends Schema.Schema.Any, E extends Schema.Schema.All>({ failure, success }: { readonly failure: E; readonly success: A; }) => Stream<A, E>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L63"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcSchema.ts",
      "path": "src/RpcSchema.ts"
    },
    "project": "@effect/rpc",
    "name": "Stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Stream",
    "signature": "export interface Stream<A extends Schema.Schema.Any, E extends Schema.Schema.All> extends\n  Schema.Schema<\n    Stream_.Stream<A[\"Type\"], E[\"Type\"]>,\n    Stream_.Stream<A[\"Encoded\"], E[\"Encoded\"]>,\n    A[\"Context\"] | E[\"Context\"]\n  >\n{\n  readonly success: A\n  readonly failure: E\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSchema.ts#L48"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcSerialization",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare class RpcSerialization",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L14"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "json",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const json: { unsafeMake(): Parser; readonly contentType: string; readonly includesFraming: boolean; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L33"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "ndjson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const ndjson: { unsafeMake(): Parser; readonly contentType: string; readonly includesFraming: boolean; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L49"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "msgPack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const msgPack: { unsafeMake(): Parser; readonly contentType: string; readonly includesFraming: boolean; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L358"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "layerJson",
    "description": "A rpc serialization layer that uses JSON for serialization.\n\nUse this if your protocol supports framing for messages, otherwise use\n{@link layerNdjson}.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const layerJson: Layer.Layer<RpcSerialization, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L402"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "layerNdjson",
    "description": "A rpc serialization layer that uses NDJSON for serialization.\n\nUse this if your protocol does not support framing for messages, otherwise\nuse {@link layerJson}.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const layerNdjson: Layer.Layer<RpcSerialization, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L413"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "layerMsgPack",
    "description": "A rpc serialization layer that uses MessagePack for serialization.\n\nMessagePack has a more compact binary format compared to JSON and NDJSON. It\nalso has better support for binary data.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const layerMsgPack: Layer.Layer<RpcSerialization, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L445"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "jsonRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const jsonRpc: (options?: { readonly contentType?: string | undefined; }) => RpcSerialization[\"Type\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L89"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "ndJsonRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const ndJsonRpc: (options?: { readonly contentType?: string | undefined; }) => RpcSerialization[\"Type\"]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L124"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "layerJsonRpc",
    "description": "A rpc serialization layer that uses JSON-RPC for serialization.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const layerJsonRpc: (options?: { readonly contentType?: string | undefined; }) => Layer.Layer<RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L421"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "layerNdJsonRpc",
    "description": "A rpc serialization layer that uses JSON-RPC for serialization seperated by\nnew lines.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "declare const layerNdJsonRpc: (options?: { readonly contentType?: string | undefined; }) => Layer.Layer<RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L432"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcSerialization.ts",
      "path": "src/RpcSerialization.ts"
    },
    "project": "@effect/rpc",
    "name": "Parser",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "serialization",
    "signature": "export interface Parser {\n  readonly decode: (data: Uint8Array | string) => ReadonlyArray<unknown>\n  readonly encode: (response: unknown) => Uint8Array | string | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcSerialization.ts#L24"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "Protocol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare class Protocol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L764"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeNoSerialization",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "server",
    "signature": "declare const makeNoSerialization: <Rpcs extends Rpc.Any>(group: RpcGroup.RpcGroup<Rpcs>, options: { readonly onFromServer: (response: FromServer<Rpcs>) => Effect.Effect<void>; readonly disableTracing?: boolean | undefined; readonly disableSpanPropagation?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly disableClientAcks?: boolean | undefined; readonly concurrency?: number | \"unbounded\" | undefined; readonly disableFatalDefects?: boolean | undefined; }) => Effect.Effect<RpcServer<Rpcs>, never, Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs> | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L70"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "server",
    "signature": "declare const make: <Rpcs extends Rpc.Any>(group: RpcGroup.RpcGroup<Rpcs>, options?: { readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly concurrency?: number | \"unbounded\" | undefined; readonly disableFatalDefects?: boolean | undefined; } | undefined) => Effect.Effect<never, never, Protocol | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L461"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolSocketServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolSocketServer: Effect.Effect<{ readonly run: (f: (clientId: number, data: FromClientEncoded) => Effect.Effect<void>) => Effect.Effect<never>; readonly disconnects: Mailbox.ReadonlyMailbox<number>; readonly send: (clientId: number, response: FromServerEncoded, transferables?: ReadonlyArray<globalThis.Transferable>) => Effect.Effect<void>; readonly end: (clientId: number) => Effect.Effect<void>; readonly clientIds: Effect.Effect<ReadonlySet<number>>; readonly initialMessage: Effect.Effect<Option.Option<unknown>>; readonly supportsAck: boolean; readonly supportsTransferables: boolean; readonly supportsSpanPropagation: boolean; }, never, Scope.Scope | RpcSerialization.RpcSerialization | SocketServer.SocketServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L791"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolSocketServer",
    "description": "A rpc protocol that uses `SocketServer` for communication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolSocketServer: Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization | SocketServer.SocketServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L806"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWithHttpAppWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWithHttpAppWebsocket: Effect.Effect<{ readonly protocol: Protocol[\"Type\"]; readonly httpApp: HttpApp.Default<never, Scope.Scope>; }, never, RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L816"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWebsocket: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: Context.Tag<I, HttpRouter.HttpRouter.Service<any, any>>; }) => Effect.Effect<Protocol[\"Type\"], never, RpcSerialization.RpcSerialization | I>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L840"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWebsocketRouter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWebsocketRouter: (options: { readonly path: HttpRouter.PathInput; }) => Effect.Effect<Protocol[\"Type\"], never, RpcSerialization.RpcSerialization | HttpLayerRouter.HttpRouter>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L864"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWithHttpApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWithHttpApp: Effect.Effect<{ readonly protocol: Protocol[\"Type\"]; readonly httpApp: HttpApp.Default<never, Scope.Scope>; }, never, RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L915"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolHttp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolHttp: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; }) => Effect.Effect<{ readonly run: (f: (clientId: number, data: FromClientEncoded) => Effect.Effect<void>) => Effect.Effect<never>; readonly disconnects: Mailbox.ReadonlyMailbox<number>; readonly send: (clientId: number, response: FromServerEncoded, transferables?: ReadonlyArray<globalThis.Transferable>) => Effect.Effect<void>; readonly end: (clientId: number) => Effect.Effect<void>; readonly clientIds: Effect.Effect<ReadonlySet<number>>; readonly initialMessage: Effect.Effect<Option.Option<unknown>>; readonly supportsAck: boolean; readonly supportsTransferables: boolean; readonly supportsSpanPropagation: boolean; }, never, RpcSerialization.RpcSerialization | I>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1054"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolHttpRouter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolHttpRouter: (options: { readonly path: HttpRouter.PathInput; }) => Effect.Effect<{ readonly run: (f: (clientId: number, data: FromClientEncoded) => Effect.Effect<void>) => Effect.Effect<never>; readonly disconnects: Mailbox.ReadonlyMailbox<number>; readonly send: (clientId: number, response: FromServerEncoded, transferables?: ReadonlyArray<globalThis.Transferable>) => Effect.Effect<void>; readonly end: (clientId: number) => Effect.Effect<void>; readonly clientIds: Effect.Effect<ReadonlySet<number>>; readonly initialMessage: Effect.Effect<Option.Option<unknown>>; readonly supportsAck: boolean; readonly supportsTransferables: boolean; readonly supportsSpanPropagation: boolean; }, never, RpcSerialization.RpcSerialization | HttpLayerRouter.HttpRouter>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1069"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolWorkerRunner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolWorkerRunner: Effect.Effect<{ readonly run: (f: (clientId: number, data: FromClientEncoded) => Effect.Effect<void>) => Effect.Effect<never>; readonly disconnects: Mailbox.ReadonlyMailbox<number>; readonly send: (clientId: number, response: FromServerEncoded, transferables?: ReadonlyArray<globalThis.Transferable>) => Effect.Effect<void>; readonly end: (clientId: number) => Effect.Effect<void>; readonly clientIds: Effect.Effect<ReadonlySet<number>>; readonly initialMessage: Effect.Effect<Option.Option<unknown>>; readonly supportsAck: boolean; readonly supportsTransferables: boolean; readonly supportsSpanPropagation: boolean; }, WorkerError, Scope.Scope | WorkerRunner.PlatformRunner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1082"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolWorkerRunner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolWorkerRunner: Layer.Layer<Protocol, WorkerError, WorkerRunner.PlatformRunner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1137"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "toHttpApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "http app",
    "signature": "declare const toHttpApp: <Rpcs extends Rpc.Any>(group: RpcGroup.RpcGroup<Rpcs>, options?: { readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; } | undefined) => Effect.Effect<HttpApp.Default<never, Scope.Scope>, never, Scope.Scope | RpcSerialization.RpcSerialization | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1177"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "toHttpAppWebsocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "http app",
    "signature": "declare const toHttpAppWebsocket: <Rpcs extends Rpc.Any>(group: RpcGroup.RpcGroup<Rpcs>, options?: { readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; } | undefined) => Effect.Effect<HttpApp.Default<never, Scope.Scope>, never, Scope.Scope | RpcSerialization.RpcSerialization | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1212"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "makeProtocolStdio",
    "description": "Create a protocol that uses the provided `Stream` and `Sink` for communication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const makeProtocolStdio: <EIn, EOut, RIn, ROut>(options: { readonly stdin: Stream.Stream<Uint8Array, EIn, RIn>; readonly stdout: Sink.Sink<void, Uint8Array | string, unknown, EOut, ROut>; }) => Effect.Effect<{ readonly run: (f: (clientId: number, data: FromClientEncoded) => Effect.Effect<void>) => Effect.Effect<never>; readonly disconnects: Mailbox.ReadonlyMailbox<number>; readonly send: (clientId: number, response: FromServerEncoded, transferables?: ReadonlyArray<globalThis.Transferable>) => Effect.Effect<void>; readonly end: (clientId: number) => Effect.Effect<void>; readonly clientIds: Effect.Effect<ReadonlySet<number>>; readonly initialMessage: Effect.Effect<Option.Option<unknown>>; readonly supportsAck: boolean; readonly supportsTransferables: boolean; readonly supportsSpanPropagation: boolean; }, never, Scope.Scope | RpcSerialization.RpcSerialization | RIn | Exclude<ROut, Scope.Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1286"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "server",
    "signature": "declare const layer: <Rpcs extends Rpc.Any>(group: RpcGroup.RpcGroup<Rpcs>, options?: { readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly concurrency?: number | \"unbounded\" | undefined; }) => Layer.Layer<never, never, Protocol | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L711"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerHttpRouter",
    "description": "Create a RPC server that registers a HTTP route with a `HttpLayerRouter`.\n\nIt defaults to using websockets for communication, but can be configured to\nuse HTTP.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerHttpRouter: <Rpcs extends Rpc.Any>(options: { readonly group: RpcGroup.RpcGroup<Rpcs>; readonly path: HttpRouter.PathInput; readonly protocol?: \"http\" | \"websocket\" | undefined; readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly concurrency?: number | \"unbounded\" | undefined; }) => Layer.Layer<never, never, RpcSerialization.RpcSerialization | HttpLayerRouter.HttpRouter | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L736"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolWebsocket",
    "description": "A rpc protocol that uses websockets for communication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolWebsocket: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L887"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolWebsocketRouter",
    "description": "A rpc protocol that uses websockets for communication.\n\nUses a `HttpLayerRouter` to provide the websocket endpoint.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolWebsocketRouter: (options: { readonly path: HttpLayerRouter.PathInput; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization | HttpLayerRouter.HttpRouter>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L906"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolHttp",
    "description": "A rpc protocol that uses streaming http for communication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolHttp: <I = HttpRouter.Default>(options: { readonly path: HttpRouter.PathInput; readonly routerTag?: HttpRouter.HttpRouter.TagClass<I, string, any, any>; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1149"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolHttpRouter",
    "description": "A rpc protocol that uses streaming http for communication.\n\nUses a `HttpLayerRouter` to provide the http endpoint.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolHttpRouter: (options: { readonly path: HttpRouter.PathInput; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization | HttpLayerRouter.HttpRouter>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1168"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "toWebHandler",
    "description": "Construct an http web handler from an `RpcGroup`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const toWebHandler: <Rpcs extends Rpc.Any, LE>(group: RpcGroup.RpcGroup<Rpcs>, options: { readonly layer: Layer.Layer<Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs> | RpcSerialization.RpcSerialization | HttpRouter.HttpRouter.DefaultServices, LE>; readonly disableTracing?: boolean | undefined; readonly spanPrefix?: string | undefined; readonly spanAttributes?: Record<string, unknown> | undefined; readonly middleware?: (httpApp: HttpApp.Default) => HttpApp.Default<never, HttpRouter.HttpRouter.DefaultServices>; readonly memoMap?: Layer.MemoMap; }) => { readonly handler: (request: globalThis.Request, context?: Context.Context<never> | undefined) => Promise<Response>; readonly dispose: () => Promise<void>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1249"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "layerProtocolStdio",
    "description": "Create a protocol that uses the provided `Stream` and `Sink` for communication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "protocol",
    "signature": "declare const layerProtocolStdio: <EIn, EOut, RIn, ROut>(options: { readonly stdin: Stream.Stream<Uint8Array, EIn, RIn>; readonly stdout: Sink.Sink<void, Uint8Array | string, unknown, EOut, ROut>; }) => Layer.Layer<Protocol, never, RpcSerialization.RpcSerialization | RIn | ROut>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L1350"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcServer.ts",
      "path": "src/RpcServer.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "server",
    "signature": "export interface RpcServer<A extends Rpc.Any> {\n  readonly write: (clientId: number, message: FromClient<A>) => Effect.Effect<void>\n  readonly disconnect: (clientId: number) => Effect.Effect<void>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcServer.ts#L61"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcTest.ts",
      "path": "src/RpcTest.ts"
    },
    "project": "@effect/rpc",
    "name": "makeClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeClient: <Rpcs extends Rpc.Any, const Flatten extends boolean = false>(group: RpcGroup.RpcGroup<Rpcs>, options?: { flatten?: Flatten | undefined; }) => Effect.Effect<Flatten extends true ? RpcClient.RpcClient.Flat<Rpcs> : RpcClient.RpcClient<Rpcs>, never, Scope.Scope | Rpc.ToHandler<Rpcs> | Rpc.Middleware<Rpcs> | Rpc.MiddlewareClient<Rpcs>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcTest.ts#L15"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "RpcWorker.ts",
      "path": "src/RpcWorker.ts"
    },
    "project": "@effect/rpc",
    "name": "InitialMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "initial message",
    "signature": "declare class InitialMessage",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcWorker.ts#L17"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcWorker.ts",
      "path": "src/RpcWorker.ts"
    },
    "project": "@effect/rpc",
    "name": "makeInitialMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "initial message",
    "signature": "declare const makeInitialMessage: <A, I, R, E, R2>(schema: Schema.Schema<A, I, R>, effect: Effect.Effect<A, E, R2>) => Effect.Effect<readonly [data: unknown, transferables: ReadonlyArray<globalThis.Transferable>], E | ParseError, R | R2>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcWorker.ts#L48"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcWorker.ts",
      "path": "src/RpcWorker.ts"
    },
    "project": "@effect/rpc",
    "name": "layerInitialMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "initial message",
    "signature": "declare const layerInitialMessage: <A, I, R, R2>(schema: Schema.Schema<A, I, R>, build: Effect.Effect<A, never, R2>) => Layer.Layer<InitialMessage, never, R | R2>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcWorker.ts#L68"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcWorker.ts",
      "path": "src/RpcWorker.ts"
    },
    "project": "@effect/rpc",
    "name": "initialMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "initial message",
    "signature": "declare const initialMessage: <A, I, R>(schema: Schema.Schema<A, I, R>) => Effect.Effect<A, NoSuchElementException | ParseError, Protocol | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcWorker.ts#L83"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcWorker.ts",
      "path": "src/RpcWorker.ts"
    },
    "project": "@effect/rpc",
    "name": "InitialMessage.Encoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "initial message",
    "signature": "export interface Encoded {\n    readonly _tag: \"InitialMessage\"\n    readonly value: unknown\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcWorker.ts#L36"
  }
]