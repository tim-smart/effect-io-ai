[
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequestTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const StreamRequestTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L146"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "currentHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const currentHeaders: FiberRef.FiberRef<Headers.Headers>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L304"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "annotateHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const annotateHeaders: { (headers: Headers.Input): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(self: Effect.Effect<A, E, R>, headers: Headers.Input): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L313"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "provideServiceEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const provideServiceEffect: { <I, S, E, R2>(tag: Context.Tag<I, S>, effect: Effect.Effect<S, E, R2>): <Req extends Schema.TaggedRequest.All, R>(self: Rpc<Req, R>) => Rpc<Req, Exclude<R, I> | R2>; <Req extends Schema.TaggedRequest.All, R, I, S, E, R2>(self: Rpc<Req, R>, tag: Context.Tag<I, S>, effect: Effect.Effect<S, E, R2>): Rpc<Req, Exclude<R, I> | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L387"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "provideService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const provideService: { <I, S>(tag: Context.Tag<I, S>, service: S): <Req extends Schema.TaggedRequest.All, R>(self: Rpc<Req, R>) => Rpc<Req, Exclude<R, I>>; <Req extends Schema.TaggedRequest.All, R, I, S>(self: Rpc<Req, R>, tag: Context.Tag<I, S>, service: S): Rpc<Req, Exclude<R, I>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L413"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "isRpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isRpc: (u: unknown) => u is Rpc<any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L39"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "effect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const effect: <Req extends Schema.TaggedRequest.All, R>(schema: Schema.Schema<Req, any, unknown>, handler: (request: Req) => Effect.Effect<EffectRequest.Request.Success<Req>, EffectRequest.Request.Error<Req>, R>) => Rpc<Req, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L129"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const StreamRequest: <Self>() => <Tag extends string, E, IE, RE, A, IA, RA, Payload extends Schema.Struct.Fields>(tag: Tag, options: { readonly failure: Schema.Schema<E, IE, RE>; readonly success: Schema.Schema<A, IA, RA>; readonly payload: Payload; }) => StreamRequestConstructor<Tag, Self, Schema.Schema.Context<Payload[keyof Payload]>, Types.Simplify<Schema.Struct.Encoded<Payload>>, Types.Simplify<Schema.Struct.Type<Payload>>, RE | RA, IE, E, IA, A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L196"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const stream: <Req extends StreamRequest.Any, R>(schema: Schema.Schema<Req, any, unknown>, handler: (request: Req) => Stream.Stream<Req extends Schema.WithResult<infer A, infer _I, infer _E, infer _EI, infer _R> ? A : never, Req extends Schema.WithResult<infer _A, infer _I, infer E, infer _EI, infer _R> ? E : never, R>) => Rpc<Req, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L229"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const RequestSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => Schema.Schema<RequestFrom<A>, RequestFrom<I>, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L289"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "schemaHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "headers",
    "signature": "declare const schemaHeaders: <R, I extends Record.ReadonlyRecord<string, string | undefined>, A>(schema: Schema.Schema<R, I, A>) => Effect.Effect<R, ParseResult.ParseError, A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L325"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "requests",
    "signature": "declare const request: <A extends Schema.TaggedRequest.All>(request: A, options?: { readonly spanPrefix?: string; }) => Effect.Effect<Request<A>, never, Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L336"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "call",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "requests",
    "signature": "declare const call: <A extends Schema.TaggedRequest.All, R extends RequestResolver.RequestResolver<Request<A>> | Effect.Effect<RequestResolver.RequestResolver<Request<A>>, never, any>>(req: A, resolver: R, options?: { readonly spanPrefix?: string; }) => R extends Effect.Effect<infer _A, infer _E, infer R> ? Rpc.Result<A, R> : Rpc.Result<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L363"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcEffect<Req extends Schema.TaggedRequest.All, R> extends Rpc.Proto<Req> {\n  readonly _tag: \"Effect\"\n  readonly handler: (\n    request: Req\n  ) => Effect.Effect<\n    EffectRequest.Request.Success<Req>,\n    EffectRequest.Request.Error<Req>,\n    R\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L51"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcStream<Req extends Schema.TaggedRequest.All, R> extends Rpc.Proto<Req> {\n  readonly _tag: \"Stream\"\n  readonly handler: (\n    request: Req\n  ) => Stream.Stream<\n    Req extends Schema.WithResult<infer A, infer _I, infer _E, infer _EI, infer _R> ? A : never,\n    Req extends Schema.WithResult<infer _A, infer _I, infer E, infer _EI, infer _R> ? E : never,\n    R\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L66"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export interface StreamRequest<Tag extends string, SR, SI, S, RR, EI, E, AI, A>\n  extends EffectRequest.Request<Stream.Stream<A, E, never>>, Schema.SerializableWithResult<S, SI, SR, A, AI, E, EI, RR>\n{\n  readonly [StreamRequestTypeId]: StreamRequestTypeId\n  readonly _tag: Tag\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L158"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequestConstructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export interface StreamRequestConstructor<Tag extends string, Self, R, IS, S, RR, IE, E, IA, A>\n  extends Schema.Schema<Self, Types.Simplify<IS & { readonly _tag: Tag }>, R>\n{\n  new(\n    props: Types.Equals<S, {}> extends true ? void : S,\n    disableValidation?: boolean\n  ): StreamRequest<Tag, R, IS & { readonly _tag: Tag }, Self, RR, IE, E, IA, A> & S\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L183"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Request<A extends Schema.TaggedRequest.All> extends\n  EffectRequest.Request<\n    EffectRequest.Request.Success<A>,\n    EffectRequest.Request.Error<A>\n  >,\n  PrimaryKey.PrimaryKey,\n  Schema.WithResult<\n    Schema.WithResult.Context<A>,\n    Schema.Schema.Encoded<A[typeof Schema.symbolWithResult][\"failure\"]>,\n    Schema.Schema.Type<A[typeof Schema.symbolWithResult][\"failure\"]>,\n    Schema.Schema.Encoded<A[typeof Schema.symbolWithResult][\"success\"]>,\n    Schema.Schema.Type<A[typeof Schema.symbolWithResult][\"success\"]>\n  >\n{\n  readonly request: A\n  readonly traceId: string\n  readonly spanId: string\n  readonly sampled: boolean\n  readonly headers: Headers.Headers\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L252"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "RequestFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RequestFrom<A> {\n  readonly request: A\n  readonly traceId: string\n  readonly spanId: string\n  readonly sampled: boolean\n  readonly headers: Record<string, string>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L277"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L33"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Rpc<Req, R> = RpcEffect<Req, R> | RpcStream<Req, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L45"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequestTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type StreamRequestTypeId = typeof StreamRequestTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L152"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc.Proto",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Proto<Req extends Schema.TaggedRequest.All> extends Pipeable {\n    readonly [TypeId]: TypeId\n    readonly _tag: string\n    readonly schema: Schema.Schema<Req, any, unknown>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L86"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<A> = A extends Rpc<infer Req, infer R>\n    ? R | Schema.SerializableWithResult.Context<Req>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L96"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc.Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Request<A> = Schema.Schema.Type<A[\"schema\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L104"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc.Result",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Result<A, R> = StreamRequestTypeId extends keyof A ?\n    EffectRequest.Request.Success<A> :\n    Effect.Effect<EffectRequest.Request.Success<A>, EffectRequest.Request.Error<A>, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L110"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "Rpc.ResultUndecoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ResultUndecoded<A, R> = A extends\n    Schema.WithResult<infer _A, infer I, infer E, infer _EI, infer _R>\n    ? StreamRequestTypeId extends keyof A ? Stream.Stream<I, E, R>\n    : Effect.Effect<I, E, R>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L118"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Rpc.ts",
      "path": "src/Rpc.ts"
    },
    "project": "@effect/rpc",
    "name": "StreamRequest.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "type Any = | StreamRequest<string, any, any, any, any, any, any, any, any>\n    | StreamRequest<string, any, any, any, any, never, never, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/Rpc.ts#L174"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcResolver.ts",
      "path": "src/RpcResolver.ts"
    },
    "project": "@effect/rpc",
    "name": "annotateHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const annotateHeaders: { (headers: Headers.Input): <Req extends Schema.TaggedRequest.All, R>(self: RequestResolver.RequestResolver<Rpc.Request<Req>, R>) => RequestResolver.RequestResolver<Rpc.Request<Req>, R>; <Req extends Schema.TaggedRequest.All, R>(self: RequestResolver.RequestResolver<Rpc.Request<Req>, R>, headers: Headers.Input): RequestResolver.RequestResolver<Rpc.Request<Req>, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolver.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcResolver.ts",
      "path": "src/RpcResolver.ts"
    },
    "project": "@effect/rpc",
    "name": "annotateHeadersEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const annotateHeadersEffect: { <E, R2>(headers: Effect.Effect<Headers.Input, E, R2>): <Req extends Schema.TaggedRequest.All, R>(self: RequestResolver.RequestResolver<Rpc.Request<Req>, R>) => RequestResolver.RequestResolver<Rpc.Request<Req>, R | R2>; <Req extends Schema.TaggedRequest.All, R, E, R2>(self: RequestResolver.RequestResolver<Rpc.Request<Req>, R>, headers: Effect.Effect<Headers.Input, E, R2>): RequestResolver.RequestResolver<Rpc.Request<Req>, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolver.ts#L140"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcResolver.ts",
      "path": "src/RpcResolver.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <HR, E>(handler: (u: ReadonlyArray<unknown>) => Stream.Stream<unknown, E, HR>) => <R extends Router.RpcRouter<any, any>>() => RequestResolver.RequestResolver<Rpc.Request<Router.RpcRouter.Request<R>>, Schema.SerializableWithResult.Context<Router.RpcRouter.Request<R>> | HR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolver.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcResolver.ts",
      "path": "src/RpcResolver.ts"
    },
    "project": "@effect/rpc",
    "name": "toClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toClient: <R extends RequestResolver.RequestResolver<Rpc.Request<any>, never> | Effect.Effect<RequestResolver.RequestResolver<Rpc.Request<any>, never>, never, any>>(resolver: R, options?: { readonly spanPrefix?: string; }) => Client<R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolver.ts#L195"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcResolver.ts",
      "path": "src/RpcResolver.ts"
    },
    "project": "@effect/rpc",
    "name": "Client",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Client<R> = R extends Effect.Effect<RequestResolver.RequestResolver<Rpc.Request<infer RReq>>, infer _E, infer R> ?\n  (<Req extends RReq>(request: Req) => Rpc.Rpc.Result<Req, R>)\n  : R extends RequestResolver.RequestResolver<Rpc.Request<infer RReq>, never> ?\n    (<Req extends RReq>(request: Req) => Rpc.Rpc.Result<Req>)\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolver.ts#L181"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcResolverNoStream.ts",
      "path": "src/RpcResolverNoStream.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <HR, E>(handler: (u: ReadonlyArray<unknown>) => Effect.Effect<unknown, E, HR>) => <R extends Router.RpcRouter<any, any>>() => RequestResolver.RequestResolver<Rpc.Request<Router.RpcRouter.Request<R>>, Schema.SerializableWithResult.Context<Router.RpcRouter.Request<R>> | HR>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcResolverNoStream.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L24"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "provideServiceEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const provideServiceEffect: { <I, S, E, R2>(tag: Context.Tag<I, S>, effect: Effect.Effect<S, E, R2>): <Reqs extends Schema.TaggedRequest.All, R>(self: RpcRouter<Reqs, R>) => RpcRouter<Reqs, Exclude<R, I> | R2>; <Reqs extends Schema.TaggedRequest.All, R, I, S, E, R2>(self: RpcRouter<Reqs, R>, tag: Context.Tag<I, S>, effect: Effect.Effect<S, E, R2>): RpcRouter<Reqs, Exclude<R, I> | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L138"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "provideService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const provideService: { <I, S>(tag: Context.Tag<I, S>, service: S): <Reqs extends Schema.TaggedRequest.All, R>(self: RpcRouter<Reqs, R>) => RpcRouter<Reqs, Exclude<R, I>>; <Reqs extends Schema.TaggedRequest.All, R, I, S>(self: RpcRouter<Reqs, R>, tag: Context.Tag<I, S>, service: S): RpcRouter<Reqs, Exclude<R, I>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L158"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "toHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toHandler: { (options?: { readonly spanPrefix?: string; }): <R extends RpcRouter<any, any>>(self: R) => (u: unknown) => Stream.Stream<RpcRouter.Response, ParseError, RpcRouter.Context<R>>; <R extends RpcRouter<any, any>>(self: R, options?: { readonly spanPrefix?: string; }): (u: unknown) => Stream.Stream<RpcRouter.Response, ParseError, RpcRouter.Context<R>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L184"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "toHandlerNoStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toHandlerNoStream: { (options?: { readonly spanPrefix?: string; }): <R extends RpcRouter<any, any>>(self: R) => (u: unknown) => Effect.Effect<RpcRouter.ResponseEffect, ParseError, RpcRouter.Context<R>>; <R extends RpcRouter<any, any>>(self: R, options?: { readonly spanPrefix?: string; }): (u: unknown) => Effect.Effect<RpcRouter.ResponseEffect, ParseError, RpcRouter.Context<R>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L294"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "isRpcRouter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isRpcRouter: (u: unknown) => u is RpcRouter<any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L36"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <Rpcs extends ReadonlyArray<Rpc.Rpc<any, any> | RpcRouter<any, any>>>(...rpcs: Rpcs) => RpcRouter<Rpc.Rpc.Request<Extract<Rpcs[number], { readonly [Rpc.TypeId]: Rpc.TypeId; }>> | RpcRouter.Request<Extract<Rpcs[number], { readonly [TypeId]: TypeId; }>>, Rpc.Rpc.Context<Extract<Rpcs[number], { readonly [Rpc.TypeId]: Rpc.TypeId; }>> | RpcRouter.Context<Extract<Rpcs[number], { readonly [TypeId]: TypeId; }>>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L107"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "toHandlerRaw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toHandlerRaw: <R extends RpcRouter<any, any>>(router: R) => <Req extends RpcRouter.Request<R>>(request: Req) => Rpc.Rpc.Result<Req, RpcRouter.ContextRaw<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L374"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "toHandlerUndecoded",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toHandlerUndecoded: <R extends RpcRouter<any, any>>(router: R) => <Req extends RpcRouter.Request<R>>(request: Req) => Rpc.Rpc.ResultUndecoded<Req, RpcRouter.Context<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L408"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RpcRouter<Reqs extends Schema.TaggedRequest.All, R> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly rpcs: ReadonlySet<Rpc.Rpc<Reqs, R>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L42"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L30"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<A> = A extends RpcRouter<infer Req, infer R>\n    ? R | Schema.SerializableWithResult.Context<Req>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L56"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter.ContextRaw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ContextRaw<A> = A extends RpcRouter<infer Req, infer R>\n    ? R | Schema.Serializable.Context<Req>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L64"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter.Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Request<A> = A extends RpcRouter<infer Req, infer _R> ? Req\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L72"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter.Response",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Response = [\n    index: number,\n    response: Schema.ExitEncoded<any, any, unknown> | ReadonlyArray<Schema.ExitEncoded<any, any, unknown>>\n  ]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L79"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "RpcRouter.ts",
      "path": "src/RpcRouter.ts"
    },
    "project": "@effect/rpc",
    "name": "RpcRouter.ResponseEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ResponseEffect = | Schema.ExitEncoded<any, any, unknown>\n    | ReadonlyArray<Schema.ExitEncoded<any, any, unknown>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/rpc/src/RpcRouter.ts#L88"
  }
]