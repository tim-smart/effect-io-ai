[
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const CommandTypeId: typeof CommandTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isCommand",
    "description": "Returns `true` if the specified value is a `Command`, otherwise returns\n`false`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "export declare const isCommand: (u: unknown) => u is Command"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "env",
    "description": "Specify the environment variables that will be used when running this command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const env: { (environment: Record<string, string | undefined>): (self: Command) => Command; (self: Command, environment: Record<string, string | undefined>): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "exitCode",
    "description": "Returns the exit code of the command after the process has completed\nexecution.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const exitCode: (self: Command) => Effect<ExitCode, PlatformError, CommandExecutor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "feed",
    "description": "Feed a string to standard input (default encoding of UTF-8).",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const feed: { (input: string): (self: Command) => Command; (self: Command, input: string): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "flatten",
    "description": "Flatten this command to a non-empty array of standard commands.\n\nFor a `StandardCommand`, this simply returns a `1` element array\nFor a `PipedCommand`, all commands in the pipe will be extracted out into\na array from left to right",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const flatten: (self: Command) => NonEmptyReadonlyArray<StandardCommand>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "lines",
    "description": "Runs the command returning the output as an array of lines with the specified\nencoding.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const lines: (command: Command, encoding?: string) => Effect<Array<string>, PlatformError, CommandExecutor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "Create a command with the specified process name and an optional list of\narguments.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: (command: string, ...args: Array<string>) => Command"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "pipeTo",
    "description": "Pipe one command to another command from left to right.\n\nConceptually, the equivalent of piping one shell command to another:\n\n```sh\ncommand1 | command2\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const pipeTo: { (into: Command): (self: Command) => Command; (self: Command, into: Command): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "runInShell",
    "description": "Allows for specifying whether or not a `Command` should be run inside a\nshell.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const runInShell: { (shell: string | boolean): (self: Command) => Command; (self: Command, shell: string | boolean): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "start",
    "description": "Start running the command and return a handle to the running process.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const start: (command: Command) => Effect<Process, PlatformError, CommandExecutor | Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": "Start running the command and return the output as a `Stream`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const stream: (command: Command) => Stream<Uint8Array, PlatformError, CommandExecutor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "streamLines",
    "description": "Runs the command returning the output as an stream of lines with the\nspecified encoding.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const streamLines: (command: Command, encoding?: string) => Stream<string, PlatformError, CommandExecutor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "string",
    "description": "Runs the command returning the entire output as a string with the\nspecified encoding.\n\nIf an encoding is not specified, the encoding will default to `utf-8`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "export declare const string: { (encoding?: string): (command: Command) => Effect<string, PlatformError, CommandExecutor>; (command: Command, encoding?: string): Effect<string, PlatformError, CommandExecutor>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stderr",
    "description": "Specify the standard error stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const stderr: { (stderr: Command.Output): (self: Command) => Command; (self: Command, stderr: Command.Output): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stdin",
    "description": "Specify the standard input stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const stdin: { (stdin: Command.Input): (self: Command) => Command; (self: Command, stdin: Command.Input): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stdout",
    "description": "Specify the standard output stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const stdout: { (stdout: Command.Output): (self: Command) => Command; (self: Command, stdout: Command.Output): Command; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "workingDirectory",
    "description": "Set the working directory that will be used when this command will be run.\n\nFor piped commands, the working directory of each command will be set to the\nspecified working directory.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const workingDirectory: { (cwd: string): (self: Command) => Command; (self: Command, cwd: string): Command; }"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PipedCommand",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PipedCommand extends Command.Proto {\n  readonly _tag: \"PipedCommand\"\n  readonly left: Command\n  readonly right: Command\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "StandardCommand",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface StandardCommand extends Command.Proto {\n  readonly _tag: \"StandardCommand\"\n  readonly command: string\n  readonly args: ReadonlyArray<string>\n  readonly env: HashMap<string, string>\n  readonly cwd: Option<string>\n  readonly shell: boolean | string\n  readonly stdin: Command.Input\n  readonly stdout: Command.Output\n  readonly stderr: Command.Output\n  readonly gid: Option<number>\n  readonly uid: Option<number>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Command",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Command = StandardCommand | PipedCommand"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandInput",
    "description": "Configures the pipe that is established between the parent and child\nprocesses' `stdin` stream.\n\nDefaults to \"pipe\"",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type CommandInput = \"inherit\" | \"pipe\" | Stream<Uint8Array, PlatformError>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandOutput",
    "description": "Configures the pipes that are established between the parent and child\nprocesses `stderr` and `stdout` streams.\n\nDefaults to \"pipe\"",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type CommandOutput = \"inherit\" | \"pipe\" | Sink<Uint8Array, Uint8Array>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command",
      "path": [
        "src",
        "Command.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export type CommandTypeId = typeof CommandTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandExecutor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const CommandExecutor: Tag<CommandExecutor, CommandExecutor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ProcessTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "export declare const ProcessTypeId: typeof ProcessTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ExitCode",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const ExitCode: Brand.Brand.Constructor<ExitCode>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ProcessId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const ProcessId: Brand.Brand.Constructor<ProcessId>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeExecutor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeExecutor: (start: (command: Command) => Effect<Process, PlatformError, Scope>) => CommandExecutor"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CommandExecutor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface CommandExecutor {\n  readonly [TypeId]: TypeId\n\n  /**\n   * Returns the exit code of the command after the process has completed\n   * execution.\n   */\n  readonly exitCode: (command: Command) => Effect<ExitCode, PlatformError>\n  /**\n   * Start running the command and return a handle to the running process.\n   */\n  readonly start: (command: Command) => Effect<Process, PlatformError, Scope>\n  /**\n   * Runs the command returning the entire output as a string with the\n   * specified encoding.\n   *\n   * If an encoding is not specified, the encoding will default to `utf-8`.\n   */\n  readonly string: (command: Command, encoding?: string) => Effect<string, PlatformError>\n  /**\n   * Runs the command returning the entire output as an array of lines.\n   *\n   * If an encoding is not specified, the encoding will default to `utf-8`.\n   */\n  readonly lines: (command: Command, encoding?: string) => Effect<Array<string>, PlatformError>\n  /**\n   * Runs the command returning the output as a `Stream`.\n   */\n  readonly stream: (command: Command) => Stream<Uint8Array, PlatformError>\n  /**\n   * Runs the command returning the output as a `Stream` of lines.\n   */\n  readonly streamLines: (command: Command, encoding?: string) => Stream<string, PlatformError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Process",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Process extends Inspectable {\n  readonly [ProcessTypeId]: ProcessTypeId\n  /**\n   * The process identifier.\n   */\n  readonly pid: ProcessId\n  /**\n   * Waits for the process to exit and returns the `ExitCode` of the command\n   * that was run.\n   */\n  readonly exitCode: Effect<ExitCode, PlatformError>\n  /**\n   * Returns `true` if the process is still running, otherwise returns `false`.\n   */\n  readonly isRunning: Effect<boolean, PlatformError>\n  /**\n   * Kills the running process with the provided signal.\n   *\n   * If no signal is provided, the signal will defaults to `SIGTERM`.\n   */\n  readonly kill: (signal?: Signal) => Effect<void, PlatformError>\n  /**\n   * The standard error stream of the process.\n   */\n  readonly stderr: Stream<Uint8Array, PlatformError>\n  /**\n   * The standard input sink of the process.\n   */\n  readonly stdin: Sink<void, Uint8Array, never, PlatformError>\n  /**\n   * The standard output stream of the process.\n   */\n  readonly stdout: Stream<Uint8Array, PlatformError>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ExitCode",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type ExitCode = Brand.Branded<number, \"ExitCode\">"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ProcessId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type ProcessId = Brand.Branded<number, \"ProcessId\">"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ProcessTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "export type ProcessTypeId = typeof ProcessTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Signal",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Signal =\n  | \"SIGABRT\"\n  | \"SIGALRM\"\n  | \"SIGBUS\"\n  | \"SIGCHLD\"\n  | \"SIGCONT\"\n  | \"SIGFPE\"\n  | \"SIGHUP\"\n  | \"SIGILL\"\n  | \"SIGINT\"\n  | \"SIGIO\"\n  | \"SIGIOT\"\n  | \"SIGKILL\"\n  | \"SIGPIPE\"\n  | \"SIGPOLL\"\n  | \"SIGPROF\"\n  | \"SIGPWR\"\n  | \"SIGQUIT\"\n  | \"SIGSEGV\"\n  | \"SIGSTKFLT\"\n  | \"SIGSTOP\"\n  | \"SIGSYS\"\n  | \"SIGTERM\"\n  | \"SIGTRAP\"\n  | \"SIGTSTP\"\n  | \"SIGTTIN\"\n  | \"SIGTTOU\"\n  | \"SIGUNUSED\"\n  | \"SIGURG\"\n  | \"SIGUSR1\"\n  | \"SIGUSR2\"\n  | \"SIGVTALRM\"\n  | \"SIGWINCH\"\n  | \"SIGXCPU\"\n  | \"SIGXFSZ\"\n  | \"SIGBREAK\"\n  | \"SIGLOST\"\n  | \"SIGINFO\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor",
      "path": [
        "src",
        "CommandExecutor.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CookiesError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare class CookiesError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CookieTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const CookieTypeId: typeof CookieTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const ErrorTypeId: typeof ErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": "An empty Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: Cookies"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setCookie",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setCookie: { (cookie: Cookie): (self: Cookies) => Cookies; (self: Cookies, cookie: Cookie): Cookies; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setAllCookie",
    "description": "Add multiple cookies to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setAllCookie: { (cookies: Iterable<Cookie>): (self: Cookies) => Cookies; (self: Cookies, cookies: Iterable<Cookie>): Cookies; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "merge",
    "description": "Combine two Cookies objects, removing duplicates from the first",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const merge: { (that: Cookies): (self: Cookies) => Cookies; (self: Cookies, that: Cookies): Cookies; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "remove",
    "description": "Remove a cookie by name",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const remove: { (name: string): (self: Cookies) => Cookies; (self: Cookies, name: string): Cookies; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": "Get a cookie from a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const get: { (name: string): (self: Cookies) => Option.Option<Cookie>; (self: Cookies, name: string): Option.Option<Cookie>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getValue",
    "description": "Get a cookie from a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const getValue: { (name: string): (self: Cookies) => Option.Option<string>; (self: Cookies, name: string): Option.Option<string>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "set",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const set: { (name: string, value: string, options?: Cookie[\"options\"]): (self: Cookies) => Either.Either<Cookies, CookiesError>; (self: Cookies, name: string, value: string, options?: Cookie[\"options\"]): Either.Either<Cookies, CookiesError>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeSet",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const unsafeSet: { (name: string, value: string, options?: Cookie[\"options\"]): (self: Cookies) => Cookies; (self: Cookies, name: string, value: string, options?: Cookie[\"options\"]): Cookies; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setAll",
    "description": "Add multiple cookies to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setAll: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: Cookies) => Either.Either<Cookies, CookiesError>; (self: Cookies, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Either.Either<Cookies, CookiesError>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeSetAll",
    "description": "Add multiple cookies to a Cookies object, throwing an error if invalid",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const unsafeSetAll: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: Cookies) => Cookies; (self: Cookies, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Cookies; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeCookie",
    "description": "Create a new cookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "serializeCookie",
    "description": "Serialize a cookie into a string\n\nAdapted from https://github.com/fastify/fastify-cookie under MIT License",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "parseHeader",
    "description": "Parse a cookie header into a record of key-value pairs\n\nAdapted from https://github.com/fastify/fastify-cookie under MIT License",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromReadonlyRecord",
    "description": "Create a Cookies object from an Iterable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromIterable",
    "description": "Create a Cookies object from an Iterable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromSetCookie",
    "description": "Create a Cookies object from a set of Set-Cookie headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isEmpty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeMakeCookie",
    "description": "Create a new cookie, throwing an error if invalid",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toCookieHeader",
    "description": "Serialize a Cookies object into a Cookie header",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toRecord",
    "description": "To record",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toSetCookieHeaders",
    "description": "Serialize a Cookies object into Headers object containing one or more Set-Cookie headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Cookie",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "cookie",
    "signature": "export interface Cookie extends Inspectable.Inspectable {\n  readonly [CookieTypeId]: CookieTypeId\n  readonly name: string\n  readonly value: string\n  readonly valueEncoded: string\n  readonly options?: {\n    readonly domain?: string | undefined\n    readonly expires?: Date | undefined\n    readonly maxAge?: Duration.DurationInput | undefined\n    readonly path?: string | undefined\n    readonly priority?: \"low\" | \"medium\" | \"high\" | undefined\n    readonly httpOnly?: boolean | undefined\n    readonly secure?: boolean | undefined\n    readonly partitioned?: boolean | undefined\n    readonly sameSite?: \"lax\" | \"strict\" | \"none\" | undefined\n  } | undefined\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Cookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Cookies extends Pipeable, Inspectable.Inspectable {\n  readonly [TypeId]: TypeId\n  readonly cookies: Record.ReadonlyRecord<string, Cookie>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CookieTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type CookieTypeId = typeof CookieTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type ErrorTypeId = typeof ErrorTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies",
      "path": [
        "src",
        "Cookies.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effectify",
      "path": [
        "src",
        "Effectify.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "effectify",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const effectify: { <F extends (...args: Array<any>) => any>(fn: F): Effectify<F, EffectifyError<F>>; <F extends (...args: Array<any>) => any, E>(fn: F, onError: (error: EffectifyError<F>, args: Parameters<F>) => E): Effectify<F, E>; <F extends (...args: Array<any>) => any, E, E2>(fn: F, onError: (error: EffectifyError<F>, args: Parameters<F>) => E, onSyncError: (error: unknown, args: Parameters<F>) => E2): Effectify<F, E | E2>; }"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Effectify",
      "path": [
        "src",
        "Effectify.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Effectify",
    "description": "Converts a callback-based function to a function that returns an `Effect`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export type Effectify<T, E> = T extends {\n  (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n  (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n  (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n  (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n  (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n  (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n  (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n  (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n  (...args: ArgsWithCallback<infer Args9, infer _E9, infer A9>): infer _R9\n  (...args: ArgsWithCallback<infer Args10, infer _E10, infer A10>): infer _R10\n} ? {\n    (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n    (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n    (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n    (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n    (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n    (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n    (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n    (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n    (...args: Args9): Effect.Effect<WithoutNull<A9>, E>\n    (...args: Args10): Effect.Effect<WithoutNull<A10>, E>\n  }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n    (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n    (...args: ArgsWithCallback<infer Args9, infer _E9, infer A9>): infer _R9\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n      (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n      (...args: Args9): Effect.Effect<WithoutNull<A9>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n    (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n      (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n    }\n  : never"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Effectify",
      "path": [
        "src",
        "Effectify.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "EffectifyError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "util",
    "signature": "export type EffectifyError<T> = T extends {\n  (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n  (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n  (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n  (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n  (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n  (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n  (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n  (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n  (...args: ArgsWithCallback<infer _Args9, infer E9, infer _A9>): infer _R9\n  (...args: ArgsWithCallback<infer _Args10, infer E10, infer _A10>): infer _R10\n} ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8 | E9 | E10>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n    (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n    (...args: ArgsWithCallback<infer _Args9, infer E9, infer _A9>): infer _R9\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8 | E9>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n    (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n  } ? NonNullable<E1 | E2 | E3 | E4>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n  } ? NonNullable<E1 | E2 | E3>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n  } ? NonNullable<E1 | E2>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n  } ? NonNullable<E1>\n  : never"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const PlatformErrorTypeId: typeof PlatformErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "BadArgument",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare const BadArgument: (props: Omit<BadArgument, PlatformError.ProvidedFields>) => BadArgument"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SystemError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare const SystemError: (props: Omit<SystemError, PlatformError.ProvidedFields>) => SystemError"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isPlatformError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeIdError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "BadArgument",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export interface BadArgument extends PlatformError.Base {\n  readonly _tag: \"BadArgument\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SystemError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SystemError extends PlatformError.Base {\n  readonly _tag: \"SystemError\"\n  readonly reason: SystemErrorReason\n  readonly syscall?: string | undefined\n  readonly pathOrDescriptor: string | number\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export type PlatformError = BadArgument | SystemError"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type PlatformErrorTypeId = typeof PlatformErrorTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error",
      "path": [
        "src",
        "Error.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SystemErrorReason",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type SystemErrorReason =\n  | \"AlreadyExists\"\n  | \"BadResource\"\n  | \"Busy\"\n  | \"InvalidData\"\n  | \"NotFound\"\n  | \"PermissionDenied\"\n  | \"TimedOut\"\n  | \"UnexpectedEof\"\n  | \"Unknown\"\n  | \"WouldBlock\"\n  | \"WriteZero\""
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toString",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "convertions",
    "signature": "export declare const toString: (self: Etag) => string"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "GeneratorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const GeneratorTypeId: typeof GeneratorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Generator",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const Generator: Context.Tag<Generator, Generator>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layer: Layer<Generator, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerWeak",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerWeak: Layer<Generator, never, never>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Generator",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Generator {\n  readonly [GeneratorTypeId]: GeneratorTypeId\n  readonly fromFileInfo: (info: FileSystem.File.Info) => Effect.Effect<Etag>\n  readonly fromFileWeb: (file: Body.HttpBody.FileLike) => Effect.Effect<Etag>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Strong",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Strong {\n  readonly _tag: \"Strong\"\n  readonly value: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Weak",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Weak {\n  readonly _tag: \"Weak\"\n  readonly value: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Etag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Etag = Weak | Strong"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Etag",
      "path": [
        "src",
        "Etag.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "GeneratorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type GeneratorTypeId = typeof GeneratorTypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FetchHttpClient",
      "path": [
        "src",
        "FetchHttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Fetch",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class Fetch"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FetchHttpClient",
      "path": [
        "src",
        "FetchHttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RequestInit",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class RequestInit"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FetchHttpClient",
      "path": [
        "src",
        "FetchHttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layer: Layer.Layer<HttpClient, never, never>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WatchBackend",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "file watcher",
    "signature": "export declare class WatchBackend"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Size",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const Size: (bytes: SizeInput) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "KiB",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const KiB: (n: number) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MiB",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const MiB: (n: number) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "GiB",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const GiB: (n: number) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TiB",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const TiB: (n: number) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PiB",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export declare const PiB: (n: number) => Size"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileSystem",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "export declare const FileSystem: Tag<FileSystem, FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const make: (impl: Omit<FileSystem, \"exists\" | \"readFileString\" | \"stream\" | \"sink\" | \"writeFileString\">) => FileSystem"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeNoop",
    "description": "Create a no-op file system that can be used for testing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const makeNoop: (fileSystem: Partial<FileSystem>) => FileSystem"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerNoop",
    "description": "Create a no-op file system that can be used for testing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerNoop: (fileSystem: Partial<FileSystem>) => Layer<FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const FileTypeId: typeof FileTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileDescriptor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const FileDescriptor: Brand.Brand.Constructor<File.Descriptor>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WatchEventCreate",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const WatchEventCreate: Data.Case.Constructor<WatchEvent.Create, \"_tag\">"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WatchEventUpdate",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const WatchEventUpdate: Data.Case.Constructor<WatchEvent.Update, \"_tag\">"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WatchEventRemove",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "export declare const WatchEventRemove: Data.Case.Constructor<WatchEvent.Remove, \"_tag\">"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isFile",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guard",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AccessFileOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface AccessFileOptions {\n  readonly ok?: boolean\n  readonly readable?: boolean\n  readonly writable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CopyOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface CopyOptions {\n  readonly overwrite?: boolean\n  readonly preserveTimestamps?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "File",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface File {\n  readonly [FileTypeId]: FileTypeId\n  readonly fd: File.Descriptor\n  readonly stat: Effect.Effect<File.Info, PlatformError>\n  readonly seek: (offset: SizeInput, from: SeekMode) => Effect.Effect<void>\n  readonly read: (buffer: Uint8Array) => Effect.Effect<Size, PlatformError>\n  readonly readAlloc: (size: SizeInput) => Effect.Effect<Option<Uint8Array>, PlatformError>\n  readonly truncate: (length?: SizeInput) => Effect.Effect<void, PlatformError>\n  readonly write: (buffer: Uint8Array) => Effect.Effect<Size, PlatformError>\n  readonly writeAll: (buffer: Uint8Array) => Effect.Effect<void, PlatformError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileSystem",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface FileSystem {\n  /**\n   * Check if a file can be accessed.\n   * You can optionally specify the level of access to check for.\n   */\n  readonly access: (\n    path: string,\n    options?: AccessFileOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Copy a file or directory from `fromPath` to `toPath`.\n   *\n   * Equivalent to `cp -r`.\n   */\n  readonly copy: (\n    fromPath: string,\n    toPath: string,\n    options?: CopyOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Copy a file from `fromPath` to `toPath`.\n   */\n  readonly copyFile: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the permissions of a file.\n   */\n  readonly chmod: (\n    path: string,\n    mode: number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the owner and group of a file.\n   */\n  readonly chown: (\n    path: string,\n    uid: number,\n    gid: number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Check if a path exists.\n   */\n  readonly exists: (\n    path: string\n  ) => Effect.Effect<boolean, PlatformError>\n  /**\n   * Create a hard link from `fromPath` to `toPath`.\n   */\n  readonly link: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a directory at `path`. You can optionally specify the mode and\n   * whether to recursively create nested directories.\n   */\n  readonly makeDirectory: (\n    path: string,\n    options?: MakeDirectoryOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a temporary directory.\n   *\n   * By default the directory will be created inside the system's default\n   * temporary directory, but you can specify a different location by setting\n   * the `directory` option.\n   *\n   * You can also specify a prefix for the directory name by setting the\n   * `prefix` option.\n   */\n  readonly makeTempDirectory: (\n    options?: MakeTempDirectoryOptions\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Create a temporary directory inside a scope.\n   *\n   * Functionally equivalent to `makeTempDirectory`, but the directory will be\n   * automatically deleted when the scope is closed.\n   */\n  readonly makeTempDirectoryScoped: (\n    options?: MakeTempDirectoryOptions\n  ) => Effect.Effect<string, PlatformError, Scope>\n  /**\n   * Create a temporary file.\n   * The directory creation is functionally equivalent to `makeTempDirectory`.\n   * The file name will be a randomly generated string.\n   */\n  readonly makeTempFile: (\n    options?: MakeTempFileOptions\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Create a temporary file inside a scope.\n   *\n   * Functionally equivalent to `makeTempFile`, but the file will be\n   * automatically deleted when the scope is closed.\n   */\n  readonly makeTempFileScoped: (\n    options?: MakeTempFileOptions\n  ) => Effect.Effect<string, PlatformError, Scope>\n  /**\n   * Open a file at `path` with the specified `options`.\n   *\n   * The file handle will be automatically closed when the scope is closed.\n   */\n  readonly open: (\n    path: string,\n    options?: OpenFileOptions\n  ) => Effect.Effect<File, PlatformError, Scope>\n  /**\n   * List the contents of a directory.\n   *\n   * You can recursively list the contents of nested directories by setting the\n   * `recursive` option.\n   */\n  readonly readDirectory: (\n    path: string,\n    options?: ReadDirectoryOptions\n  ) => Effect.Effect<Array<string>, PlatformError>\n  /**\n   * Read the contents of a file.\n   */\n  readonly readFile: (\n    path: string\n  ) => Effect.Effect<Uint8Array, PlatformError>\n  /**\n   * Read the contents of a file.\n   */\n  readonly readFileString: (\n    path: string,\n    encoding?: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Read the destination of a symbolic link.\n   */\n  readonly readLink: (\n    path: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Resolve a path to its canonicalized absolute pathname.\n   */\n  readonly realPath: (\n    path: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Remove a file or directory.\n   */\n  readonly remove: (\n    path: string,\n    options?: RemoveOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Rename a file or directory.\n   */\n  readonly rename: (\n    oldPath: string,\n    newPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a writable `Sink` for the specified `path`.\n   */\n  readonly sink: (\n    path: string,\n    options?: SinkOptions\n  ) => Sink<void, Uint8Array, never, PlatformError>\n  /**\n   * Get information about a file at `path`.\n   */\n  readonly stat: (\n    path: string\n  ) => Effect.Effect<File.Info, PlatformError>\n  /**\n   * Create a readable `Stream` for the specified `path`.\n   *\n   * Changing the `bufferSize` option will change the internal buffer size of\n   * the stream. It defaults to `4`.\n   *\n   * The `chunkSize` option will change the size of the chunks emitted by the\n   * stream. It defaults to 64kb.\n   *\n   * Changing `offset` and `bytesToRead` will change the offset and the number\n   * of bytes to read from the file.\n   */\n  readonly stream: (\n    path: string,\n    options?: StreamOptions\n  ) => Stream<Uint8Array, PlatformError>\n  /**\n   * Create a symbolic link from `fromPath` to `toPath`.\n   */\n  readonly symlink: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Truncate a file to a specified length. If the `length` is not specified,\n   * the file will be truncated to length `0`.\n   */\n  readonly truncate: (\n    path: string,\n    length?: SizeInput\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the file system timestamps of the file at `path`.\n   */\n  readonly utimes: (\n    path: string,\n    atime: Date | number,\n    mtime: Date | number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Watch a directory or file for changes\n   */\n  readonly watch: (path: string) => Stream<WatchEvent, PlatformError>\n  /**\n   * Write data to a file at `path`.\n   */\n  readonly writeFile: (\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Write a string to a file at `path`.\n   */\n  readonly writeFileString: (\n    path: string,\n    data: string,\n    options?: WriteFileStringOptions\n  ) => Effect.Effect<void, PlatformError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MakeDirectoryOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeDirectoryOptions {\n  readonly recursive?: boolean\n  readonly mode?: number\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MakeTempDirectoryOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeTempDirectoryOptions {\n  readonly directory?: string\n  readonly prefix?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MakeTempFileOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeTempFileOptions {\n  readonly directory?: string\n  readonly prefix?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenFileOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface OpenFileOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ReadDirectoryOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface ReadDirectoryOptions {\n  readonly recursive?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RemoveOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface RemoveOptions {\n  /**\n   * When `true`, you can recursively remove nested directories.\n   */\n  readonly recursive?: boolean\n  /**\n   * When `true`, exceptions will be ignored if `path` does not exist.\n   */\n  readonly force?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SinkOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface SinkOptions extends OpenFileOptions {}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "StreamOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface StreamOptions {\n  readonly bufferSize?: number\n  readonly bytesToRead?: SizeInput\n  readonly chunkSize?: SizeInput\n  readonly offset?: SizeInput\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WriteFileOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface WriteFileOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WriteFileStringOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface WriteFileStringOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type FileTypeId = typeof FileTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenFlag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type OpenFlag =\n  | \"r\"\n  | \"r+\"\n  | \"w\"\n  | \"wx\"\n  | \"w+\"\n  | \"wx+\"\n  | \"a\"\n  | \"ax\"\n  | \"a+\"\n  | \"ax+\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SeekMode",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type SeekMode = \"start\" | \"current\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Size",
    "description": "Represents a size in bytes.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export type Size = Brand.Branded<bigint, \"Size\">"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SizeInput",
    "description": "Represents a size in bytes.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "export type SizeInput = bigint | number | Size"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem",
      "path": [
        "src",
        "FileSystem.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WatchEvent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type WatchEvent = WatchEvent.Create | WatchEvent.Update | WatchEvent.Remove"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HeadersTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const HeadersTypeId: typeof HeadersTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaFromSelf",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export declare const schemaFromSelf: Schema.Schema<Headers, Headers, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export declare const schema: Schema.Schema<Headers, Record.ReadonlyRecord<string, string | readonly string[]>, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: Headers"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "has",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const has: { (key: string): (self: Headers) => boolean; (self: Headers, key: string): boolean; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const get: { (key: string): (self: Headers) => Option.Option<string>; (self: Headers, key: string): Option.Option<string>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "set",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const set: { (key: string, value: string): (self: Headers) => Headers; (self: Headers, key: string, value: string): Headers; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setAll: { (headers: Input): (self: Headers) => Headers; (self: Headers, headers: Input): Headers; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "merge",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const merge: { (headers: Headers): (self: Headers) => Headers; (self: Headers, headers: Headers): Headers; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "remove",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const remove: { (key: string): (self: Headers) => Headers; (self: Headers, key: string): Headers; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "redact",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const redact: { (key: string | RegExp | ReadonlyArray<string | RegExp>): (self: Headers) => Record<string, string | Redacted.Redacted>; (self: Headers, key: string | RegExp | ReadonlyArray<string | RegExp>): Record<string, string | Redacted.Redacted>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentRedactedNames",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentRedactedNames: FiberRef.FiberRef<readonly (string | RegExp)[]>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromInput",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeFromRecord",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Headers",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Headers extends Redactable {\n  readonly [HeadersTypeId]: HeadersTypeId\n  readonly [key: string]: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HeadersTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type HeadersTypeId = typeof HeadersTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Headers",
      "path": [
        "src",
        "Headers.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Input",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Input =\n  | Record.ReadonlyRecord<string, string | ReadonlyArray<string> | undefined>\n  | Iterable<readonly [string, string]>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AdditionalSchemas",
    "description": "Adds additional schemas to components/schemas.\nThe provided schemas must have a `identifier` annotation.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class AdditionalSchemas"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Api",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class Api"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHttpApi",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "An `HttpApi` is a collection of `HttpApiEndpoint`s. You can use an `HttpApi` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.make` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "reflect",
    "description": "Extract metadata from an `HttpApi`, which can be used to generate documentation\nor other tooling.\n\nSee the `OpenApi` & `HttpApiClient` modules for examples of how to use this function.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApi",
    "description": "An `HttpApi` is a collection of `HttpApiEndpoint`s. You can use an `HttpApi` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.make` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApi<\n  out Id extends string,\n  out Groups extends HttpApiGroup.HttpApiGroup.Any = never,\n  in out E = never,\n  out R = never\n> extends Pipeable {\n  new(_: never): {}\n  readonly [TypeId]: TypeId\n  readonly identifier: Id\n  readonly groups: Record.ReadonlyRecord<string, Groups>\n  readonly annotations: Context.Context<never>\n  readonly errorSchema: Schema.Schema<E, unknown, R>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add a `HttpApiGroup` to the `HttpApi`.\n   */\n  add<A extends HttpApiGroup.HttpApiGroup.Any>(group: A): HttpApi<Id, Groups | A, E, R>\n  /**\n   * Add another `HttpApi` to the `HttpApi`.\n   */\n  addHttpApi<Id2 extends string, Groups2 extends HttpApiGroup.HttpApiGroup.Any, E2, R2>(\n    api: HttpApi<Id2, Groups2, E2, R2>\n  ): HttpApi<\n    Id,\n    Groups | HttpApiGroup.HttpApiGroup.AddContext<Groups2, R2>,\n    E | E2,\n    R\n  >\n  /**\n   * Add an global error to the `HttpApi`.\n   */\n  addError<A, I, RX>(\n    schema: Schema.Schema<A, I, RX>,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApi<Id, Groups, E | A, R | RX>\n  /**\n   * Prefix all endpoints in the `HttpApi`.\n   */\n  prefix(prefix: PathInput): HttpApi<Id, Groups, E, R>\n  /**\n   * Add a middleware to a `HttpApi`. It will be applied to all endpoints in the\n   * `HttpApi`.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(\n    middleware: Context.Tag<I, S>\n  ): HttpApi<\n    Id,\n    Groups,\n    E | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>\n  >\n  /**\n   * Annotate the `HttpApi`.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): HttpApi<Id, Groups, E, R>\n  /**\n   * Annotate the `HttpApi` with a Context.\n   */\n  annotateContext<I>(context: Context.Context<I>): HttpApi<Id, Groups, E, R>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApi",
      "path": [
        "src",
        "HttpApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Middleware",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "export declare class Middleware"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Router",
    "description": "The router that the API endpoints are attached to.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router",
    "signature": "export declare class Router"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "httpApp",
    "description": "Construct an `HttpApp` from an `HttpApi` instance.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const httpApp: Effect.Effect<HttpApp.Default<never, HttpRouter.HttpRouter.DefaultServices>, never, HttpApi.Api | Router | Middleware>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HandlersTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "export declare const HandlersTypeId: typeof HandlersTypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "api",
    "description": "Create a top-level `HttpApi` layer.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "serve",
    "description": "Build an `HttpApp` from an `HttpApi` instance, and serve it using an\n`HttpServer`.\n\nOptionally, you can provide a middleware function that will be applied to\nthe `HttpApp` before serving.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toWebHandler",
    "description": "Construct an http web handler from an `HttpApi` instance.",
    "deprecated": false,
    "examples": [
      "import { HttpApi, HttpApiBuilder, HttpServer } from \"@effect/platform\"\nimport { Layer } from \"effect\"\n\nclass MyApi extends HttpApi.make(\"api\") {}\n\nconst MyApiLive = HttpApiBuilder.api(MyApi)\n\nconst { dispose, handler } = HttpApiBuilder.toWebHandler(\n  Layer.mergeAll(\n    MyApiLive,\n    // you could also use NodeHttpServer.layerContext, depending on your\n    // server's platform\n    HttpServer.layerContext\n  )\n)"
    ],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "group",
    "description": "Create a `Layer` that will implement all the endpoints in an `HttpApi`.\n\nAn unimplemented `Handlers` instance is passed to the `build` function, which\nyou can use to add handlers to the group.\n\nYou can implement endpoints using the `handlers.handle` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "handler",
    "description": "Create a `Handler` for a single endpoint.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "middleware",
    "description": "Create an `HttpApi` level middleware `Layer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "middlewareScoped",
    "description": "Create an `HttpApi` level middleware `Layer`, that has a `Scope` provided to\nthe constructor.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "middlewareCors",
    "description": "A CORS middleware layer that can be provided to the `HttpApiBuilder.serve` layer.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "middlewareOpenApi",
    "description": "A middleware that adds an openapi.json endpoint to the API.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "securityDecode",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "security",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "securitySetCookie",
    "description": "Set a cookie from an `HttpApiSecurity.HttpApiKey` instance.\n\nYou can use this api before returning a response from an endpoint handler.\n\n```ts\nhandlers.handle(\n  \"authenticate\",\n  (_) => HttpApiBuilder.securitySetCookie(security, \"secret123\")\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Handlers",
    "description": "Represents a handled `HttpApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "export interface Handlers<\n  E,\n  Provides,\n  R,\n  Endpoints extends HttpApiEndpoint.HttpApiEndpoint.Any = never\n> extends Pipeable {\n  readonly [HandlersTypeId]: {\n    _Endpoints: Covariant<Endpoints>\n  }\n  readonly group: HttpApiGroup.HttpApiGroup.AnyWithProps\n  readonly handlers: Chunk.Chunk<Handlers.Item<E, R>>\n\n  /**\n   * Add the implementation for an `HttpApiEndpoint` to a `Handlers` group.\n   */\n  handle<Name extends HttpApiEndpoint.HttpApiEndpoint.Name<Endpoints>, R1>(\n    name: Name,\n    handler: HttpApiEndpoint.HttpApiEndpoint.HandlerWithName<Endpoints, Name, E, R1>\n  ): Handlers<\n    E,\n    Provides,\n    | R\n    | Exclude<\n      HttpApiEndpoint.HttpApiEndpoint.ExcludeProvided<\n        Endpoints,\n        Name,\n        R1 | HttpApiEndpoint.HttpApiEndpoint.ContextWithName<Endpoints, Name>\n      >,\n      Provides\n    >,\n    HttpApiEndpoint.HttpApiEndpoint.ExcludeName<Endpoints, Name>\n  >\n\n  /**\n   * Add the implementation for an `HttpApiEndpoint` to a `Handlers` group.\n   * This version of the api allows you to return the full response object.\n   */\n  handleRaw<Name extends HttpApiEndpoint.HttpApiEndpoint.Name<Endpoints>, R1>(\n    name: Name,\n    handler: HttpApiEndpoint.HttpApiEndpoint.HandlerResponseWithName<Endpoints, Name, E, R1>\n  ): Handlers<\n    E,\n    Provides,\n    | R\n    | Exclude<\n      HttpApiEndpoint.HttpApiEndpoint.ExcludeProvided<\n        Endpoints,\n        Name,\n        R1 | HttpApiEndpoint.HttpApiEndpoint.ContextWithName<Endpoints, Name>\n      >,\n      Provides\n    >,\n    HttpApiEndpoint.HttpApiEndpoint.ExcludeName<Endpoints, Name>\n  >\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HandlersTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "export type HandlersTypeId = typeof HandlersTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder",
      "path": [
        "src",
        "HttpApiBuilder.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MiddlewareFn",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "global",
    "signature": "export type MiddlewareFn<Error, R = HttpRouter.HttpRouter.Provided> = (\n  httpApp: HttpApp.Default\n) => HttpApp.Default<Error, R>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient",
      "path": [
        "src",
        "HttpApiClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient",
      "path": [
        "src",
        "HttpApiClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "group",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient",
      "path": [
        "src",
        "HttpApiClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "endpoint",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiClient",
      "path": [
        "src",
        "HttpApiClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Client",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Client<Groups extends HttpApiGroup.Any, ApiError> = Simplify<\n  & {\n    readonly [Group in Extract<Groups, { readonly topLevel: false }> as HttpApiGroup.Name<Group>]: Client.Group<\n      Group,\n      Group[\"identifier\"],\n      ApiError\n    >\n  }\n  & {\n    readonly [Method in Client.TopLevelMethods<Groups, ApiError> as Method[0]]: Method[1]\n  }\n>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const get: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"GET\">; <const Name extends string>(name: Name, path: HttpRouter.PathInput): HttpApiEndpoint<Name, \"GET\">; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "post",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const post: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"POST\">; <const Name extends string>(name: Name, path: HttpRouter.PathInput): HttpApiEndpoint<Name, \"POST\">; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "put",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const put: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"PUT\">; <const Name extends string>(name: Name, path: HttpRouter.PathInput): HttpApiEndpoint<Name, \"PUT\">; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "patch",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const patch: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"PATCH\">; <const Name extends string>(name: Name, path: HttpRouter.PathInput): HttpApiEndpoint<Name, \"PATCH\">; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "del",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const del: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"DELETE\">; <const Name extends string>(name: Name, path: HttpRouter.PathInput): HttpApiEndpoint<Name, \"DELETE\">; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHttpApiEndpoint",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint",
    "description": "Represents an API endpoint. An API endpoint is mapped to a single route on\nthe underlying `HttpRouter`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiEndpoint<\n  out Name extends string,\n  out Method extends HttpMethod,\n  in out Path = never,\n  in out UrlParams = never,\n  in out Payload = never,\n  in out Headers = never,\n  in out Success = void,\n  in out Error = never,\n  out R = never,\n  out RE = never\n> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly name: Name\n  readonly path: HttpRouter.PathInput\n  readonly method: Method\n  readonly pathSchema: Option.Option<Schema.Schema<Path, unknown, R>>\n  readonly urlParamsSchema: Option.Option<Schema.Schema<UrlParams, unknown, R>>\n  readonly payloadSchema: Option.Option<Schema.Schema<Payload, unknown, R>>\n  readonly headersSchema: Option.Option<Schema.Schema<Headers, unknown, R>>\n  readonly successSchema: Schema.Schema<Success, unknown, R>\n  readonly errorSchema: Schema.Schema<Error, unknown, RE>\n  readonly annotations: Context.Context<never>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add a schema for the success response of the endpoint. The status code\n   * will be inferred from the schema, otherwise it will default to 200.\n   */\n  addSuccess<S extends Schema.Schema.Any>(\n    schema: S,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Exclude<Success, void> | Schema.Schema.Type<S>,\n    Error,\n    R | Schema.Schema.Context<S>,\n    RE\n  >\n\n  /**\n   * Add an error response schema to the endpoint. The status code\n   * will be inferred from the schema, otherwise it will default to 500.\n   */\n  addError<E extends Schema.Schema.Any>(\n    schema: E,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error | Schema.Schema.Type<E>,\n    R,\n    RE | Schema.Schema.Context<E>\n  >\n\n  /**\n   * Set the schema for the request body of the endpoint. The schema will be\n   * used to validate the request body before the handler is called.\n   *\n   * For endpoints with no request body, the payload will use the url search\n   * parameters.\n   *\n   * You can set a multipart schema to handle file uploads by using the\n   * `HttpApiSchema.Multipart` combinator.\n   */\n  setPayload<P extends Schema.Schema.Any>(\n    schema: P & HttpApiEndpoint.ValidatePayload<Method, P>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Schema.Schema.Type<P>,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<P>,\n    RE\n  >\n\n  /**\n   * Set the schema for the path parameters of the endpoint. The schema will be\n   * used to validate the path parameters before the handler is called.\n   */\n  setPath<Path extends Schema.Schema.Any>(\n    schema: Path & HttpApiEndpoint.ValidatePath<Path>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Schema.Schema.Type<Path>,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<Path>,\n    RE\n  >\n\n  /**\n   * Set the schema for the url search parameters of the endpoint.\n   */\n  setUrlParams<UrlParams extends Schema.Schema.Any>(\n    schema: UrlParams & HttpApiEndpoint.ValidateUrlParams<UrlParams>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    Schema.Schema.Type<UrlParams>,\n    Payload,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<Path>,\n    RE\n  >\n\n  /**\n   * Set the schema for the headers of the endpoint. The schema will be\n   * used to validate the headers before the handler is called.\n   */\n  setHeaders<H extends Schema.Schema.Any>(\n    schema: H & HttpApiEndpoint.ValidateHeaders<H>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Schema.Schema.Type<H>,\n    Success,\n    Error,\n    R | Schema.Schema.Context<H>,\n    RE\n  >\n\n  /**\n   * Add a prefix to the path of the endpoint.\n   */\n  prefix(\n    prefix: HttpRouter.PathInput\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n\n  /**\n   * Add an `HttpApiMiddleware` to the endpoint.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(middleware: Context.Tag<I, S>): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I,\n    RE | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>\n  >\n\n  /**\n   * Add an annotation on the endpoint.\n   */\n  annotate<I, S>(\n    tag: Context.Tag<I, S>,\n    value: S\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n\n  /**\n   * Merge the annotations of the endpoint with the provided context.\n   */\n  annotateContext<I>(\n    context: Context.Context<I>\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint",
      "path": [
        "src",
        "HttpApiEndpoint.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "BadRequest",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class BadRequest"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Conflict",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class Conflict"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Forbidden",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class Forbidden"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Gone",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class Gone"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiDecodeError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare class HttpApiDecodeError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "InternalServerError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class InternalServerError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MethodNotAllowed",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class MethodNotAllowed"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "NotAcceptable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class NotAcceptable"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "NotFound",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class NotFound"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "NotImplemented",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class NotImplemented"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RequestTimeout",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class RequestTimeout"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ServiceUnavailable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class ServiceUnavailable"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Unauthorized",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export declare class Unauthorized"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PropertyKeysNoSymbol",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export declare const PropertyKeysNoSymbol: PropertyKeysNoSymbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Issue",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export declare const Issue: Issue"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Issue",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export interface Issue extends\n  Schema.Struct<\n    {\n      _tag: Schema.Literal<\n        [\"Pointer\", \"Unexpected\", \"Missing\", \"Composite\", \"Refinement\", \"Transformation\", \"Type\", \"Forbidden\"]\n      >\n      path: PropertyKeysNoSymbol\n      message: typeof Schema.String\n    }\n  >\n{}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PropertyKeysNoSymbol",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export interface PropertyKeysNoSymbol extends\n  Schema.transform<\n    Schema.Array$<Schema.Union<[typeof Schema.String, typeof Schema.Number]>>,\n    Schema.Array$<Schema.Union<[typeof Schema.SymbolFromSelf, typeof Schema.String, typeof Schema.Number]>>\n  >\n{}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiError",
      "path": [
        "src",
        "HttpApiError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHttpApiGroup",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.group` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ApiGroup",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ApiGroup<ApiId extends string, Name extends string> {\n  readonly _: unique symbol\n  readonly apiId: ApiId\n  readonly name: Name\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup",
    "description": "An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.group` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiGroup<\n  out Id extends string,\n  out Endpoints extends HttpApiEndpoint.HttpApiEndpoint.Any = never,\n  in out Error = HttpApiDecodeError,\n  out R = never,\n  out TopLevel extends (true | false) = false\n> extends Pipeable {\n  new(_: never): {}\n  readonly [TypeId]: TypeId\n  readonly identifier: Id\n  readonly topLevel: TopLevel\n  readonly endpoints: Record.ReadonlyRecord<string, Endpoints>\n  readonly errorSchema: Schema.Schema<Error, unknown, R>\n  readonly annotations: Context.Context<never>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add an `HttpApiEndpoint` to an `HttpApiGroup`.\n   */\n  add<A extends HttpApiEndpoint.HttpApiEndpoint.Any>(\n    endpoint: A\n  ): HttpApiGroup<Id, Endpoints | A, Error, R, TopLevel>\n\n  /**\n   * Add an error schema to an `HttpApiGroup`, which is shared by all endpoints in the\n   * group.\n   */\n  addError<A, I, RX>(\n    schema: Schema.Schema<A, I, RX>,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiGroup<Id, Endpoints, Error | A, R | RX, TopLevel>\n\n  /**\n   * Add a path prefix to all endpoints in an `HttpApiGroup`. Note that this will only\n   * add the prefix to the endpoints before this api is called.\n   */\n  prefix(prefix: PathInput): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * Add an `HttpApiMiddleware` to the `HttpApiGroup`.\n   *\n   * It will be applied to all endpoints in the group.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(middleware: Context.Tag<I, S>): HttpApiGroup<\n    Id,\n    Endpoints,\n    Error | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>,\n    TopLevel\n  >\n\n  /**\n   * Add an `HttpApiMiddleware` to each endpoint in the `HttpApiGroup`.\n   *\n   * Endpoints added after this api is called will not have the middleware\n   * applied.\n   */\n  middlewareEndpoints<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(\n    middleware: Context.Tag<I, S>\n  ): HttpApiGroup<\n    Id,\n    HttpApiEndpoint.HttpApiEndpoint.AddContext<Endpoints, I>,\n    Error,\n    R,\n    TopLevel\n  >\n\n  /**\n   * Merge the annotations of an `HttpApiGroup` with a new context.\n   */\n  annotateContext<I>(context: Context.Context<I>): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * Add an annotation to an `HttpApiGroup`.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * For each endpoint in an `HttpApiGroup`, update the annotations with a new\n   * context.\n   *\n   * Note that this will only update the annotations before this api is called.\n   */\n  annotateEndpointsContext<I>(context: Context.Context<I>): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * For each endpoint in an `HttpApiGroup`, add an annotation.\n   *\n   * Note that this will only add the annotation to the endpoints before this api\n   * is called.\n   */\n  annotateEndpoints<I, S>(tag: Context.Tag<I, S>, value: S): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup",
      "path": [
        "src",
        "HttpApiGroup.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SecurityTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const SecurityTypeId: typeof SecurityTypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isSecurity",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Tag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiMiddleware<Provides, E> extends Effect.Effect<Provides, E, HttpRouter.HttpRouter.Provided> {}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TagClassAny",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassAny extends Context.Tag<any, HttpApiMiddleware.Any> {\n  readonly [TypeId]: TypeId\n  readonly optional: boolean\n  readonly provides?: Context.Tag<any, any>\n  readonly failure: Schema.Schema.All\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TagClassSecurityAny",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassSecurityAny extends TagClassAny {\n  readonly [SecurityTypeId]: SecurityTypeId\n  readonly security: Record<string, HttpApiSecurity.HttpApiSecurity>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddlewareSecurity",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type HttpApiMiddlewareSecurity<Security extends Record<string, HttpApiSecurity.HttpApiSecurity>, Provides, E> = {\n  readonly [K in keyof Security]: (\n    _: HttpApiSecurity.HttpApiSecurity.Type<Security[K]>\n  ) => Effect.Effect<Provides, E, HttpRouter.HttpRouter.Provided>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SecurityTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type SecurityTypeId = typeof SecurityTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TagClass",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type TagClass<\n  Self,\n  Name extends string,\n  Options\n> = Options extends { readonly security: Record<string, HttpApiSecurity.HttpApiSecurity> } ? TagClass.BaseSecurity<\n    Self,\n    Name,\n    Options,\n    Simplify<\n      HttpApiMiddlewareSecurity<\n        Options[\"security\"],\n        TagClass.Service<Options>,\n        TagClass.FailureService<Options>\n      >\n    >,\n    Options[\"security\"]\n  >\n  : TagClass.Base<\n    Self,\n    Name,\n    Options,\n    HttpApiMiddleware<\n      TagClass.Service<Options>,\n      TagClass.FailureService<Options>\n    >\n  >"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware",
      "path": [
        "src",
        "HttpApiMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiScalar",
      "path": [
        "src",
        "HttpApiScalar.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar",
      "path": [
        "src",
        "HttpApiScalar.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ScalarConfig",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type ScalarConfig = {\n  /** A string to use one of the color presets */\n  theme?: ScalarThemeId\n  /** The layout to use for the references */\n  layout?: \"modern\" | \"classic\"\n  /** URL to a request proxy for the API client */\n  proxy?: string\n  /** Whether the spec input should show */\n  isEditable?: boolean\n  /** Whether to show the sidebar */\n  showSidebar?: boolean\n  /**\n   * Whether to show models in the sidebar, search, and content.\n   *\n   * @default false\n   */\n  hideModels?: boolean\n  /**\n   * Whether to show the “Download OpenAPI Document” button\n   *\n   * @default false\n   */\n  hideDownloadButton?: boolean\n  /**\n   * Whether to show the “Test Request” button\n   *\n   * @default: false\n   */\n  hideTestRequestButton?: boolean\n  /**\n   * Whether to show the sidebar search bar\n   *\n   * @default: false\n   */\n  hideSearch?: boolean\n  /** Whether dark mode is on or off initially (light mode) */\n  darkMode?: boolean\n  /** forceDarkModeState makes it always this state no matter what*/\n  forceDarkModeState?: \"dark\" | \"light\"\n  /** Whether to show the dark mode toggle */\n  hideDarkModeToggle?: boolean\n  /**\n   * Path to a favicon image\n   *\n   * @default undefined\n   * @example '/favicon.svg'\n   */\n  favicon?: string\n  /** Custom CSS to be added to the page */\n  customCss?: string\n  /**\n   * The baseServerURL is used when the spec servers are relative paths and we are using SSR.\n   * On the client we can grab the window.location.origin but on the server we need\n   * to use this prop.\n   *\n   * @default undefined\n   * @example 'http://localhost:3000'\n   */\n  baseServerURL?: string\n  /**\n   * We’re using Inter and JetBrains Mono as the default fonts. If you want to use your own fonts, set this to false.\n   *\n   * @default true\n   */\n  withDefaultFonts?: boolean\n  /**\n   * By default we only open the relevant tag based on the url, however if you want all the tags open by default then set this configuration option :)\n   *\n   * @default false\n   */\n  defaultOpenAllTags?: boolean\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar",
      "path": [
        "src",
        "HttpApiScalar.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ScalarScriptSource",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model\n\ncdn: `https://cdn.jsdelivr.net/npm/@scalar/api-reference@${source.version}/dist/browser/standalone.min.js`",
    "signature": "export type ScalarScriptSource =\n  | string\n  | { type: \"default\" }\n  | {\n    type: \"cdn\"\n    version?: \"latest\" | (string & {})\n  }"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar",
      "path": [
        "src",
        "HttpApiScalar.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ScalarThemeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type ScalarThemeId =\n  | \"alternate\"\n  | \"default\"\n  | \"moon\"\n  | \"purple\"\n  | \"solarized\"\n  | \"bluePlanet\"\n  | \"deepSpace\"\n  | \"saturn\"\n  | \"kepler\"\n  | \"mars\"\n  | \"none\""
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnnotationMultipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const AnnotationMultipart: typeof AnnotationMultipart"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnnotationStatus",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const AnnotationStatus: typeof AnnotationStatus"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnnotationEmptyDecodeable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const AnnotationEmptyDecodeable: typeof AnnotationEmptyDecodeable"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnnotationEncoding",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const AnnotationEncoding: typeof AnnotationEncoding"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnnotationParam",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const AnnotationParam: typeof AnnotationParam"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "param",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "path params",
    "signature": "export declare const param: { <Name extends string>(name: Name): <S extends AnyString>(schema: S) => Param<Name, S>; <Name extends string, S extends AnyString>(name: Name, schema: S): Param<Name, S>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "asEmpty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export declare const asEmpty: { <S extends Schema.Schema.Any>(options: { readonly status: number; readonly decode: LazyArg<Schema.Schema.Type<S>>; }): (self: S) => asEmpty<S>; <S extends Schema.Schema.Any>(self: S, options: { readonly status: number; readonly decode: LazyArg<Schema.Schema.Type<S>>; }): asEmpty<S>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Created",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export declare const Created: Created"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Accepted",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export declare const Accepted: Accepted"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "NoContent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export declare const NoContent: NoContent"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MultipartTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "export declare const MultipartTypeId: typeof MultipartTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withEncoding",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "export declare const withEncoding: { <A extends Schema.Schema.Any, Kind extends Encoding[\"kind\"]>(options: { readonly kind: Kind; readonly contentType?: string | undefined; } & Encoding.Validate<A, Kind>): (self: A) => A; <A extends Schema.Schema.Any, Kind extends Encoding[\"kind\"]>(self: A, options: { readonly kind: Kind; readonly contentType?: string | undefined; } & Encoding.Validate<A, Kind>): A; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "extractAnnotations",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getStatus",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getEmptyDecodeable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getMultipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getEncoding",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getParam",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "annotations",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isVoid",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getStatusSuccessAST",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getStatusSuccess",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getStatusErrorAST",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getStatusError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "UnionUnify",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Multipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Text",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "deunionize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "EmptyError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Accepted",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface Accepted extends Void$ {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Created",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface Created extends Void$ {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "EmptyErrorClass",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export interface EmptyErrorClass<Self, Tag> extends Schema.Schema<Self, void> {\n  new(_: void): { readonly _tag: Tag } & Effect.Effect<never, Self>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Encoding",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "export interface Encoding {\n  readonly kind: \"Json\" | \"UrlParams\" | \"Uint8Array\" | \"Text\"\n  readonly contentType: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Multipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "export interface Multipart<S extends Schema.Schema.Any>\n  extends\n    Schema.Schema<Schema.Schema.Type<S> & Brand<MultipartTypeId>, Schema.Schema.Encoded<S>, Schema.Schema.Context<S>>\n{}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "NoContent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface NoContent extends Void$ {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Param",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "path params",
    "signature": "export interface Param<Name extends string, S extends Schema.Schema.Any>\n  extends Schema.Schema<S[\"Type\"], S[\"Encoded\"], S[\"Context\"]>\n{\n  readonly [AnnotationParam]: Name\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "asEmpty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface asEmpty<\n  S extends Schema.Schema.Any\n> extends Schema.transform<typeof Schema.Void, S> {}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnyString",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "path params",
    "signature": "export type AnyString = Schema.Schema<any, string, never> | Schema.Schema<any, string, any>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSchema",
      "path": [
        "src",
        "HttpApiSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MultipartTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "export type MultipartTypeId = typeof MultipartTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bearer",
    "description": "Create an Bearer token security scheme.\n\nYou can implement some api middleware for this security scheme using\n`HttpApiBuilder.middlewareSecurity`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const bearer: Bearer"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "basic",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const basic: Basic"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "annotateContext",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const annotateContext: { <I>(context: Context.Context<I>): <A extends HttpApiSecurity>(self: A) => A; <A extends HttpApiSecurity, I>(self: A, context: Context.Context<I>): A; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "annotate",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const annotate: { <I, S>(tag: Context.Tag<I, S>, value: S): <A extends HttpApiSecurity>(self: A) => A; <A extends HttpApiSecurity, I, S>(self: A, tag: Context.Tag<I, S>, value: S): A; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "apiKey",
    "description": "Create an API key security scheme.\n\nYou can implement some api middleware for this security scheme using\n`HttpApiBuilder.middlewareSecurity`.\n\nTo set the correct cookie in a handler, you can use\n`HttpApiBuilder.securitySetCookie`.\n\nThe default value for `in` is \"header\".",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ApiKey",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ApiKey extends HttpApiSecurity.Proto<Redacted> {\n  readonly _tag: \"ApiKey\"\n  readonly in: \"header\" | \"query\" | \"cookie\"\n  readonly key: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Basic",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Basic extends HttpApiSecurity.Proto<Credentials> {\n  readonly _tag: \"Basic\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Bearer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Bearer extends HttpApiSecurity.Proto<Redacted> {\n  readonly _tag: \"Bearer\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Credentials",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Credentials {\n  readonly username: string\n  readonly password: Redacted\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApiSecurity",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type HttpApiSecurity = Bearer | ApiKey | Basic"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSecurity",
      "path": [
        "src",
        "HttpApiSecurity.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSwagger",
      "path": [
        "src",
        "HttpApiSwagger.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": null
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentPreResponseHandlers",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentPreResponseHandlers: FiberRef.FiberRef<Option.Option<PreResponseHandler>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "appendPreResponseHandler",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const appendPreResponseHandler: (handler: PreResponseHandler) => Effect.Effect<void>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withPreResponseHandler",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withPreResponseHandler: ((handler: PreResponseHandler) => <A, E, R>(self: HttpApp<A, E, R>) => HttpApp<A, E, R>) & (<A, E, R>(self: HttpApp<A, E, R>, handler: PreResponseHandler) => HttpApp<A, E, R>)"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toWebHandler",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "export declare const toWebHandler: <E>(self: Default<E, Scope.Scope>, middleware?: HttpMiddleware | undefined) => (request: Request, context?: Context.Context<never> | undefined) => Promise<Response>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toHandled",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toWebHandlerRuntime",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toWebHandlerLayer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Default",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Default<E = never, R = never> = HttpApp<ServerResponse.HttpServerResponse, E, R>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpApp",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type HttpApp<A = ServerResponse.HttpServerResponse, E = never, R = never> = Effect.Effect<\n  A,\n  E,\n  R | ServerRequest.HttpServerRequest\n>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp",
      "path": [
        "src",
        "HttpApp.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PreResponseHandler",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type PreResponseHandler = (\n  request: ServerRequest.HttpServerRequest,\n  response: ServerResponse.HttpServerResponse\n) => Effect.Effect<ServerResponse.HttpServerResponse, ServerError.ResponseError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const ErrorTypeId: typeof ErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpBodyError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare const HttpBodyError: (reason: ErrorReason) => HttpBodyError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: Empty"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "raw",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const raw: (body: unknown, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined) => Raw"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "uint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const uint8Array: (body: globalThis.Uint8Array) => Uint8Array"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "text",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const text: (body: string, contentType?: string) => Uint8Array"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const unsafeJson: (body: unknown) => Uint8Array"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "json",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const json: (body: unknown) => Effect.Effect<Uint8Array, HttpBodyError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "jsonSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const jsonSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => (body: A) => Effect.Effect<Uint8Array, HttpBodyError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "urlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const urlParams: (urlParams: UrlParams.UrlParams) => Uint8Array"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "formData",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const formData: (body: globalThis.FormData) => FormData"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const stream: (body: Stream_.Stream<globalThis.Uint8Array, unknown>, contentType?: string, contentLength?: number, etag?: string) => Stream"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "file",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const file: (path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }) => Effect.Effect<Stream, PlatformError.PlatformError, FileSystem.FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fileInfo",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fileInfo: (path: string, info: FileSystem.File.Info, options?: FileSystem.StreamOptions & { readonly contentType?: string; }) => Effect.Effect<Stream, PlatformError.PlatformError, FileSystem.FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fileWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fileWeb: (file: HttpBody.FileLike) => Stream"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHttpBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Empty extends HttpBody.Proto {\n  readonly _tag: \"Empty\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FormData",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface FormData extends HttpBody.Proto {\n  readonly _tag: \"FormData\"\n  readonly formData: globalThis.FormData\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpBodyError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface HttpBodyError {\n  readonly [ErrorTypeId]: ErrorTypeId\n  readonly _tag: \"HttpBodyError\"\n  readonly reason: ErrorReason\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Raw",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Raw extends HttpBody.Proto {\n  readonly _tag: \"Raw\"\n  readonly body: unknown\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Stream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Stream extends HttpBody.Proto {\n  readonly _tag: \"Stream\"\n  readonly stream: Stream_.Stream<globalThis.Uint8Array, unknown>\n  readonly contentType: string\n  readonly contentLength?: number | undefined\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Uint8Array extends HttpBody.Proto {\n  readonly _tag: \"Uint8Array\"\n  readonly body: globalThis.Uint8Array\n  readonly contentType: string\n  readonly contentLength: number\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorReason",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export type ErrorReason = {\n  readonly _tag: \"JsonError\"\n  readonly error: unknown\n} | {\n  readonly _tag: \"SchemaError\"\n  readonly error: ParseResult.ParseError\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type ErrorTypeId = typeof ErrorTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type HttpBody = Empty | Raw | Uint8Array | FormData | Stream"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody",
      "path": [
        "src",
        "HttpBody.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpClient",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const HttpClient: Context.Tag<HttpClient, HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "execute",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const execute: (request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const get: (url: string | URL, options?: ClientRequest.Options.NoBody | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "head",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const head: (url: string | URL, options?: ClientRequest.Options.NoBody | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "post",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const post: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "patch",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const patch: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "put",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const put: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "del",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const del: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "options",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const options: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope | HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "export declare const catchAll: { <E, E2, R2>(f: (e: E) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E2, R2 | R>; <E, R, A2, E2, R2>(self: HttpClient.With<E, R>, f: (e: E) => Effect.Effect<A2, E2, R2>): HttpClient.With<E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchTag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "export declare const catchTag: { <K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E, E1, R1>(tag: K, f: (e: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E1 | Exclude<E, { _tag: K; }>, R1 | R>; <R, E, K extends E extends { _tag: string; } ? E[\"_tag\"] : never, R1, E1>(self: HttpClient.With<E, R>, tag: K, f: (e: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E1 | Exclude<E, { _tag: K; }>, R1 | R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchTags",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "export declare const catchTags: { <E, Cases extends { [K in Extract<E, { _tag: string; }>[\"_tag\"]]+?: (error: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, any, any>; } & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string; }>[\"_tag\"]>]: never; })>(cases: Cases): <R>(self: HttpClient.With<E, R>) => HttpClient.With<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>; <E extends { _tag: string; }, R, Cases extends { [K in Extract<E, { _tag: string; }>[\"_tag\"]]+?: (error: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, any, any>; } & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string; }>[\"_tag\"]>]: never; })>(self: HttpClient.With<E, R>, cases: Cases): HttpClient.With<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterOrElse",
    "description": "Filters the result of a response, or runs an alternative effect if the predicate fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterOrElse: { <E2, R2>(predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orElse: (response: ClientResponse.HttpClientResponse) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpClient.With<E, R>, predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orElse: (response: ClientResponse.HttpClientResponse) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): HttpClient.With<E2 | E, R2 | R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterOrFail",
    "description": "Filters the result of a response, or throws an error if the predicate fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterOrFail: { <E2>(predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orFailWith: (response: ClientResponse.HttpClientResponse) => E2): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E2 | E, R>; <E, R, E2>(self: HttpClient.With<E, R>, predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orFailWith: (response: ClientResponse.HttpClientResponse) => E2): HttpClient.With<E2 | E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterStatus",
    "description": "Filters responses by HTTP status code.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterStatus: { (f: (status: number) => boolean): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | Error.ResponseError, R>; <E, R>(self: HttpClient.With<E, R>, f: (status: number) => boolean): HttpClient.With<E | Error.ResponseError, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterStatusOk",
    "description": "Filters responses that return a 2xx status code.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterStatusOk: <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | Error.ResponseError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeWith: <E2, R2, E, R>(postprocess: (request: Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>, preprocess: HttpClient.Preprocess<E2, R2>) => HttpClient.With<E, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: (f: (request: ClientRequest.HttpClientRequest, url: URL, signal: AbortSignal, fiber: RuntimeFiber<ClientResponse.HttpClientResponse, Error.HttpClientError>) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, Scope.Scope>) => HttpClient"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "transform",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const transform: { <E, R, E1, R1>(f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>, request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): (self: HttpClient.With<E, R>) => HttpClient.With<E | E1, R | R1>; <E, R, E1, R1>(self: HttpClient.With<E, R>, f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>, request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E | E1, R | R1>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "transformResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const transformResponse: { <E, R, E1, R1>(f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): (self: HttpClient.With<E, R>) => HttpClient.With<E1, R1>; <E, R, E1, R1>(self: HttpClient.With<E, R>, f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E1, R1>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mapRequest",
    "description": "Appends a transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const mapRequest: { (f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): HttpClient.With<E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mapRequestEffect",
    "description": "Appends an effectful transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const mapRequestEffect: { <E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): HttpClient.With<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mapRequestInput",
    "description": "Prepends a transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const mapRequestInput: { (f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): HttpClient.With<E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mapRequestInputEffect",
    "description": "Prepends an effectful transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const mapRequestInputEffect: { <E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): HttpClient.With<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "retry",
    "description": "Retries the request based on a provided schedule or policy.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "export declare const retry: { <E, O extends Effect.Retry.Options<E>>(options: O): <R>(self: HttpClient.With<E, R>) => Retry.Return<R, E, O>; <B, E, R1>(policy: Schedule.Schedule<B, NoInfer<E>, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R1 | R>; <E, R, O extends Effect.Retry.Options<E>>(self: HttpClient.With<E, R>, options: O): Retry.Return<R, E, O>; <E, R, B, R1>(self: HttpClient.With<E, R>, policy: Schedule.Schedule<B, E, R1>): HttpClient.With<E, R1 | R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "retryTransient",
    "description": "Retries common transient errors, such as rate limiting, timeouts or network issues.\n\nSpecifying a `while` predicate allows you to consider other errors as\ntransient.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "export declare const retryTransient: { <B, E, R1 = never>(options: { readonly while?: Predicate.Predicate<NoInfer<E>>; readonly schedule?: Schedule.Schedule<B, NoInfer<E>, R1>; readonly times?: number; } | Schedule.Schedule<B, NoInfer<E>, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R1 | R>; <E, R, B, R1 = never>(self: HttpClient.With<E, R>, options: { readonly while?: Predicate.Predicate<NoInfer<E>>; readonly schedule?: Schedule.Schedule<B, NoInfer<E>, R1>; readonly times?: number; } | Schedule.Schedule<B, NoInfer<E>, R1>): HttpClient.With<E, R1 | R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "tap",
    "description": "Performs an additional effect after a successful request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const tap: { <_, E2, R2>(f: (response: ClientResponse.HttpClientResponse) => Effect.Effect<_, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, _, E2, R2>(self: HttpClient.With<E, R>, f: (response: ClientResponse.HttpClientResponse) => Effect.Effect<_, E2, R2>): HttpClient.With<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "tapRequest",
    "description": "Performs an additional effect on the request before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "export declare const tapRequest: { <_, E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<_, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, _, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<_, E2, R2>): HttpClient.With<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withCookiesRef",
    "description": "Associates a `Ref` of cookies with the client for handling cookies across requests.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "cookies",
    "signature": "export declare const withCookiesRef: { (ref: Ref<Cookies>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, ref: Ref<Cookies>): HttpClient.With<E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "followRedirects",
    "description": "Follows HTTP redirects up to a specified number of times.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "redirects",
    "signature": "export declare const followRedirects: { (maxRedirects?: number | undefined): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, maxRedirects?: number | undefined): HttpClient.With<E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentTracerDisabledWhen",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentTracerDisabledWhen: FiberRef.FiberRef<Predicate.Predicate<ClientRequest.HttpClientRequest>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhen",
    "description": "Disables tracing for specific requests based on a provided predicate.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withTracerDisabledWhen: { (predicate: Predicate.Predicate<ClientRequest.HttpClientRequest>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<ClientRequest.HttpClientRequest>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentTracerPropagation",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentTracerPropagation: FiberRef.FiberRef<boolean>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withTracerPropagation",
    "description": "Enables or disables tracing propagation for the request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withTracerPropagation: { (enabled: boolean): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, enabled: boolean): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerMergedContext",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const layerMergedContext: <E, R>(effect: Effect.Effect<HttpClient, E, R>) => Layer<HttpClient, E, R>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpClient",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClient extends HttpClient.With<Error.HttpClientError, Scope.Scope> {}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClient",
      "path": [
        "src",
        "HttpClient.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RequestError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class RequestError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ResponseError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class ResponseError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isHttpClientError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpClientError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export type HttpClientError = RequestError | ResponseError"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientError",
      "path": [
        "src",
        "HttpClientError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: <M extends HttpMethod>(method: M) => (url: string | URL, options?: (M extends \"GET\" | \"HEAD\" ? Options.NoBody : Options.NoUrl) | undefined) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const get: (url: string | URL, options?: Options.NoBody) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "post",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const post: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "patch",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const patch: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "put",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const put: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "del",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const del: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "head",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const head: (url: string | URL, options?: Options.NoBody) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "options",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const options: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "modify",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const modify: { (options: Options): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, options: Options): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setMethod",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setMethod: { (method: HttpMethod): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, method: HttpMethod): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setHeader",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setHeader: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setHeaders: { (input: Headers.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: Headers.Input): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "basicAuth",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const basicAuth: { (username: string | Redacted, password: string | Redacted): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, username: string | Redacted, password: string | Redacted): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bearerToken",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bearerToken: { (token: string | Redacted): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, token: string | Redacted): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "accept",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const accept: { (mediaType: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, mediaType: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "acceptJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const acceptJson: (self: HttpClientRequest) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setUrl",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setUrl: { (url: string | URL): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, url: string | URL): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "prependUrl",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const prependUrl: { (path: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, path: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "appendUrl",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const appendUrl: { (path: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, path: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "updateUrl",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const updateUrl: { (f: (url: string) => string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, f: (url: string) => string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setUrlParam",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setUrlParam: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "appendUrlParam",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const appendUrlParam: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "appendUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const appendUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setHash",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setHash: { (hash: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, hash: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "removeHash",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const removeHash: (self: HttpClientRequest) => HttpClientRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setBody: { (body: Body.HttpBody): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Body.HttpBody): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyUint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyUint8Array: { (body: Uint8Array, contentType?: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Uint8Array, contentType?: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyText",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyText: { (body: string, contentType?: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: string, contentType?: string): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyJson: { (body: unknown): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, Body.HttpBodyError>; (self: HttpClientRequest, body: unknown): Effect.Effect<HttpClientRequest, Body.HttpBodyError>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyUnsafeJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyUnsafeJson: { (body: unknown): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: unknown): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => { (body: A): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, Body.HttpBodyError, R>; (self: HttpClientRequest, body: A): Effect.Effect<HttpClientRequest, Body.HttpBodyError, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyFormData",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyFormData: { (body: FormData): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: FormData): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyStream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyStream: { (body: Stream.Stream<Uint8Array, unknown>, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Stream.Stream<Uint8Array, unknown>, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined): HttpClientRequest; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyFile",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyFile: { (path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, PlatformError.PlatformError, FileSystem.FileSystem>; (self: HttpClientRequest, path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }): Effect.Effect<HttpClientRequest, PlatformError.PlatformError, FileSystem.FileSystem>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "bodyFileWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const bodyFileWeb: { (file: Body.HttpBody.FileLike): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, file: Body.HttpBody.FileLike): HttpClientRequest; }"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpClientRequest",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClientRequest extends Inspectable, Pipeable {\n  readonly [TypeId]: TypeId\n  readonly method: HttpMethod\n  readonly url: string\n  readonly urlParams: UrlParams.UrlParams\n  readonly hash: Option.Option<string>\n  readonly headers: Headers.Headers\n  readonly body: Body.HttpBody\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Options",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options {\n  readonly method?: HttpMethod | undefined\n  readonly url?: string | URL | undefined\n  readonly urlParams?: UrlParams.Input | undefined\n  readonly hash?: string | undefined\n  readonly headers?: Headers.Input | undefined\n  readonly body?: Body.HttpBody | undefined\n  readonly accept?: string | undefined\n  readonly acceptJson?: boolean | undefined\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientRequest",
      "path": [
        "src",
        "HttpClientRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fromWeb: (request: ClientRequest.HttpClientRequest, source: Response) => HttpClientResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaJson: <R, I extends { readonly status?: number | undefined; readonly headers?: Readonly<Record<string, string>> | undefined; readonly body?: unknown; }, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (self: HttpClientResponse) => Effect.Effect<A, Error.ResponseError | ParseResult.ParseError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaNoBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaNoBody: <R, I extends { readonly status?: number | undefined; readonly headers?: Readonly<Record<string, string>> | undefined; }, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (self: HttpClientResponse) => Effect.Effect<A, ParseResult.ParseError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const stream: <E, R>(effect: Effect.Effect<HttpClientResponse, E, R>) => Stream.Stream<Uint8Array, Error.ResponseError | E, Exclude<R, Scope.Scope>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "matchStatus",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "pattern matching",
    "signature": "export declare const matchStatus: { <const Cases extends { readonly [status: number]: (_: HttpClientResponse) => any; readonly \"2xx\"?: (_: HttpClientResponse) => any; readonly \"3xx\"?: (_: HttpClientResponse) => any; readonly \"4xx\"?: (_: HttpClientResponse) => any; readonly \"5xx\"?: (_: HttpClientResponse) => any; readonly orElse: (_: HttpClientResponse) => any; }>(cases: Cases): (self: HttpClientResponse) => Cases[keyof Cases] extends (_: any) => infer R ? Unify<R> : never; <const Cases extends { readonly [status: number]: (_: HttpClientResponse) => any; readonly \"2xx\"?: (_: HttpClientResponse) => any; readonly \"3xx\"?: (_: HttpClientResponse) => any; readonly \"4xx\"?: (_: HttpClientResponse) => any; readonly \"5xx\"?: (_: HttpClientResponse) => any; readonly orElse: (_: HttpClientResponse) => any; }>(self: HttpClientResponse, cases: Cases): Cases[keyof Cases] extends (_: any) => infer R ? Unify<R> : never; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterStatus",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterStatus: { (f: (status: number) => boolean): (self: HttpClientResponse) => Effect.Effect<HttpClientResponse, Error.ResponseError>; (self: HttpClientResponse, f: (status: number) => boolean): Effect.Effect<HttpClientResponse, Error.ResponseError>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "filterStatusOk",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "export declare const filterStatusOk: (self: HttpClientResponse) => Effect.Effect<HttpClientResponse, Error.ResponseError>"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyUrlParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaHeaders: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, ParseResult.ParseError, R>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpClientResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClientResponse extends IncomingMessage.HttpIncomingMessage<Error.ResponseError> {\n  readonly [TypeId]: TypeId\n  readonly request: ClientRequest.HttpClientRequest\n  readonly status: number\n  readonly cookies: Cookies.Cookies\n  readonly formData: Effect.Effect<FormData, Error.ResponseError>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientResponse",
      "path": [
        "src",
        "HttpClientResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "maxBodySize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const maxBodySize: FiberRef.FiberRef<Option.Option<FileSystem.Size>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withMaxBodySize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withMaxBodySize: ((size: Option.Option<FileSystem.SizeInput>) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>) & (<A, E, R>(effect: Effect.Effect<A, E, R>, size: Option.Option<FileSystem.SizeInput>) => Effect.Effect<A, E, R>)"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "inspect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpIncomingMessage",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpIncomingMessage<E> extends Inspectable.Inspectable {\n  readonly [TypeId]: TypeId\n  readonly headers: Headers.Headers\n  readonly remoteAddress: Option.Option<string>\n  readonly json: Effect.Effect<unknown, E>\n  readonly text: Effect.Effect<string, E>\n  readonly urlParamsBody: Effect.Effect<UrlParams.UrlParams, E>\n  readonly arrayBuffer: Effect.Effect<ArrayBuffer, E>\n  readonly stream: Stream.Stream<Uint8Array, E>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpIncomingMessage",
      "path": [
        "src",
        "HttpIncomingMessage.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpMethod",
      "path": [
        "src",
        "HttpMethod.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "hasBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMethod",
      "path": [
        "src",
        "HttpMethod.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpMethod",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type HttpMethod =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\""
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: <M extends HttpMiddleware>(middleware: M) => M"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "logger",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const logger: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "loggerDisabled",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const loggerDisabled: FiberRef.FiberRef<boolean>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withLoggerDisabled",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withLoggerDisabled: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentTracerDisabledWhen",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentTracerDisabledWhen: FiberRef.FiberRef<Predicate.Predicate<ServerRequest.HttpServerRequest>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhen",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withTracerDisabledWhen: { (predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>; <A, E, R>(layer: Layer.Layer<A, E, R>, predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): Layer.Layer<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhenEffect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withTracerDisabledWhenEffect: { (predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledForUrls",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withTracerDisabledForUrls: { (urls: ReadonlyArray<string>): <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>; <A, E, R>(layer: Layer.Layer<A, E, R>, urls: ReadonlyArray<string>): Layer.Layer<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "xForwardedHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const xForwardedHeaders: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "searchParamsParser",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const searchParamsParser: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, Exclude<R, ServerRequest.ParsedSearchParams>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "cors",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const cors: (options?: { readonly allowedOrigins?: ReadonlyArray<string> | undefined; readonly allowedMethods?: ReadonlyArray<string> | undefined; readonly allowedHeaders?: ReadonlyArray<string> | undefined; readonly exposedHeaders?: ReadonlyArray<string> | undefined; readonly maxAge?: number | undefined; readonly credentials?: boolean | undefined; } | undefined) => <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMiddleware",
      "path": [
        "src",
        "HttpMiddleware.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpMiddleware",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpMiddleware {\n  <E, R>(self: App.Default<E, R>): App.Default<any, any>\n}"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: HttpMultiplex<never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: <E, R>(apps: Iterable<readonly [predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E, R>, app: App.Default<E, R>]>) => HttpMultiplex<E, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "add",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const add: { <E2, R2, E3, R3>(predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E2, R2>, app: App.Default<E3, R3>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E3 | E, R2 | R3 | R>; <E, R, E2, R2, E3, R3>(self: HttpMultiplex<E, R>, predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E2, R2>, app: App.Default<E3, R3>): HttpMultiplex<E | E2 | E3, R | R2 | R3>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "headerExact",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const headerExact: { <E2, R2>(header: string, value: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, value: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "headerRegex",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const headerRegex: { <E2, R2>(header: string, regex: RegExp, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, regex: RegExp, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "headerStartsWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const headerStartsWith: { <E2, R2>(header: string, prefix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, prefix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "headerEndsWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const headerEndsWith: { <E2, R2>(header: string, suffix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, suffix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "hostExact",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const hostExact: { <E2, R2>(host: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, host: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "hostRegex",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const hostRegex: { <E2, R2>(regex: RegExp, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, regex: RegExp, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "hostStartsWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const hostStartsWith: { <E2, R2>(prefix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, prefix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "hostEndsWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const hostEndsWith: { <E2, R2>(suffix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, suffix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpMultiplex",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpMultiplex<E = never, R = never> extends App.Default<E | Error.RouteNotFound, R>, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly apps: ReadonlyArray<\n    readonly [\n      predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E, R>,\n      app: App.Default<E, R>\n    ]\n  >\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMultiplex",
      "path": [
        "src",
        "HttpMultiplex.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpPlatform",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const HttpPlatform: Context.Tag<HttpPlatform, HttpPlatform>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: (impl: { readonly fileResponse: (path: string, status: number, statusText: string | undefined, headers: Headers.Headers, start: number, end: number | undefined, contentLength: number) => ServerResponse.HttpServerResponse; readonly fileWebResponse: (file: Body.HttpBody.FileLike, status: number, statusText: string | undefined, headers: Headers.Headers, options?: FileSystem.StreamOptions | undefined) => ServerResponse.HttpServerResponse; }) => Effect.Effect<HttpPlatform, never, FileSystem.FileSystem | Etag.Generator>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layer: Layer<HttpPlatform, never, FileSystem.FileSystem>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpPlatform",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpPlatform {\n  readonly [TypeId]: TypeId\n  readonly fileResponse: (\n    path: string,\n    options?: ServerResponse.Options.WithContent & FileSystem.StreamOptions\n  ) => Effect.Effect<ServerResponse.HttpServerResponse, Error.PlatformError>\n  readonly fileWebResponse: (\n    file: Body.HttpBody.FileLike,\n    options?: ServerResponse.Options.WithContent & FileSystem.StreamOptions\n  ) => Effect.Effect<ServerResponse.HttpServerResponse>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpPlatform",
      "path": [
        "src",
        "HttpPlatform.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Default",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class Default"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const RouteTypeId: typeof RouteTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteContextTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const RouteContextTypeId: typeof RouteContextTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteContext",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const RouteContext: Context.Tag<RouteContext, RouteContext>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "params",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const params: Effect.Effect<Readonly<Record<string, string | undefined>>, never, RouteContext>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const schemaJson: <R, I extends Partial<{ readonly method: Method.HttpMethod; readonly url: string; readonly cookies: Readonly<Record<string, string | undefined>>; readonly headers: Readonly<Record<string, string | undefined>>; readonly pathParams: Readonly<Record<string, string | undefined>>; readonly searchParams: Readonly<Record<string, string | ReadonlyArray<string> | undefined>>; readonly body: any; }>, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Error.RequestError | ParseResult.ParseError, RouteContext | R | ServerRequest.HttpServerRequest | ServerRequest.ParsedSearchParams>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaNoBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const schemaNoBody: <R, I extends Partial<{ readonly method: Method.HttpMethod; readonly url: string; readonly cookies: Readonly<Record<string, string | undefined>>; readonly headers: Readonly<Record<string, string | undefined>>; readonly pathParams: Readonly<Record<string, string | undefined>>; readonly searchParams: Readonly<Record<string, string | ReadonlyArray<string> | undefined>>; }>, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext | ServerRequest.HttpServerRequest | ServerRequest.ParsedSearchParams>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const schemaParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext | ServerRequest.ParsedSearchParams>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaPathParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "export declare const schemaPathParams: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentRouterConfig",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "export declare const currentRouterConfig: FiberRef<Partial<RouterConfig>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withRouterConfig",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "export declare const withRouterConfig: { (config: Partial<RouterConfig>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, config: Partial<RouterConfig>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setRouterConfig",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "export declare const setRouterConfig: (config: Partial<RouterConfig>) => Layer.Layer<never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: HttpRouter<never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromIterable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fromIterable: <R extends Route<any, any>>(routes: Iterable<R>) => HttpRouter<R extends Route<infer E, infer _> ? E : never, R extends Route<infer _, infer Env> ? Env : never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeRoute",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeRoute: <E, R>(method: Method.HttpMethod | \"*\", path: PathInput, handler: Route.Handler<E, R>, options?: { readonly prefix?: string | undefined; readonly uninterruptible?: boolean | undefined; } | undefined) => Route<E, HttpRouter.ExcludeProvided<R>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "prefixPath",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "utils",
    "signature": "export declare const prefixPath: { (prefix: string): (self: string) => string; (self: string, prefix: string): string; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "prefixAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const prefixAll: { (prefix: PathInput): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E, R>; <E, R>(self: HttpRouter<E, R>, prefix: PathInput): HttpRouter<E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "append",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const append: { <R1, E1>(route: Route<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, route: Route<E1, R1>): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "concat",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const concat: { <R1, E1>(that: HttpRouter<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R1 | R>; <E, R, R1, E1>(self: HttpRouter<E, R>, that: HttpRouter<E1, R1>): HttpRouter<E | E1, R | R1>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "concatAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const concatAll: <Routers extends ReadonlyArray<HttpRouter<unknown, unknown>>>(...routers: Routers) => [Routers[number]] extends [HttpRouter<infer E, infer R>] ? HttpRouter<E, R> : never"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mount",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const mount: { <R1, E1>(path: `/${string}`, that: HttpRouter<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R1 | R>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: `/${string}`, that: HttpRouter<E1, R1>): HttpRouter<E | E1, R | R1>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "mountApp",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const mountApp: { <R1, E1>(path: `/${string}`, that: App.Default<E1, R1>, options?: { readonly includePrefix?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, HttpRouter.ExcludeProvided<R1> | HttpRouter.ExcludeProvided<R>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: `/${string}`, that: App.Default<E1, R1>, options?: { readonly includePrefix?: boolean | undefined; } | undefined): HttpRouter<E | E1, HttpRouter.ExcludeProvided<R> | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "route",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const route: (method: Method.HttpMethod | \"*\") => { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | Exclude<R1, ServerRequest.HttpServerRequest | RouteContext | Scope.Scope>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | Exclude<R1, ServerRequest.HttpServerRequest | RouteContext | Scope.Scope>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "all",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const all: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "get",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const get: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "post",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const post: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "patch",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const patch: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "put",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const put: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "del",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const del: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "head",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const head: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "options",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "export declare const options: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "use",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const use: { <E, R, R1, E1>(f: (self: Route.Middleware<E, R>) => App.Default<E1, R1>): (self: HttpRouter<E, R>) => HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; <E, R, R1, E1>(self: HttpRouter<E, R>, f: (self: Route.Middleware<E, R>) => App.Default<E1, R1>): HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "transform",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const transform: { <E, R, R1, E1>(f: (self: Route.Handler<E, R>) => App.HttpApp<Respondable.Respondable, E1, R1>): (self: HttpRouter<E, R>) => HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; <E, R, R1, E1>(self: HttpRouter<E, R>, f: (self: Route.Handler<E, R>) => App.HttpApp<Respondable.Respondable, E1, R1>): HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const catchAll: { <E, E2, R2>(f: (e: E) => Route.Handler<E2, R2>): <R>(self: HttpRouter<E, R>) => HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; <E, R, E2, R2>(self: HttpRouter<E, R>, f: (e: E) => Route.Handler<E2, R2>): HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchAllCause",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const catchAllCause: { <E, E2, R2>(f: (e: Cause.Cause<E>) => Route.Handler<E2, R2>): <R>(self: HttpRouter<E, R>) => HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; <E, R, E2, R2>(self: HttpRouter<E, R>, f: (e: Cause.Cause<E>) => Route.Handler<E2, R2>): HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchTag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const catchTag: { <K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E, E1, R1>(k: K, f: (e: Extract<E, { _tag: K; }>) => Route.Handler<E1, R1>): <R>(self: HttpRouter<E, R>) => HttpRouter<E1 | Exclude<E, { _tag: K; }>, R | HttpRouter.ExcludeProvided<R1>>; <E, R, K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E1, R1>(self: HttpRouter<E, R>, k: K, f: (e: Extract<E, { _tag: K; }>) => Route.Handler<E1, R1>): HttpRouter<E1 | Exclude<E, { _tag: K; }>, R | HttpRouter.ExcludeProvided<R1>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "catchTags",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const catchTags: { <E, Cases extends E extends { _tag: string; } ? { [K in E[\"_tag\"]]+?: ((error: Extract<E, { _tag: K; }>) => Route.Handler<any, any>) | undefined; } : {}>(cases: Cases): <R>(self: HttpRouter<E, R>) => HttpRouter<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | HttpRouter.ExcludeProvided<{ [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>>; <R, E, Cases extends E extends { _tag: string; } ? { [K in E[\"_tag\"]]+?: ((error: Extract<E, { _tag: K; }>) => Route.Handler<any, any>) | undefined; } : {}>(self: HttpRouter<E, R>, cases: Cases): HttpRouter<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | HttpRouter.ExcludeProvided<{ [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "provideService",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const provideService: { <T extends Context.Tag<any, any>>(tag: T, service: Context.Tag.Service<T>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E, Exclude<R, Context.Tag.Identifier<T>>>; <E, R, T extends Context.Tag<any, any>>(self: HttpRouter<E, R>, tag: T, service: Context.Tag.Service<T>): HttpRouter<E, Exclude<R, Context.Tag.Identifier<T>>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "provideServiceEffect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const provideServiceEffect: { <T extends Context.Tag<any, any>, R1, E1>(tag: T, effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, Exclude<R, Context.Tag.Identifier<T>> | Exclude<HttpRouter.ExcludeProvided<R1>, Context.Tag.Identifier<T>>>; <E, R, T extends Context.Tag<any, any>, R1, E1>(self: HttpRouter<E, R>, tag: T, effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>): HttpRouter<E | E1, Exclude<R, Context.Tag.Identifier<T>> | Exclude<HttpRouter.ExcludeProvided<R1>, Context.Tag.Identifier<T>>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Tag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const Tag: <const Name extends string>(id: Name) => <Self, R = never, E = unknown>() => HttpRouter.TagClass<Self, Name, E, R | HttpRouter.DefaultServices>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpRouter",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpRouter<E = never, R = never>\n  extends App.Default<E | Error.RouteNotFound, Exclude<R, RouteContext>>, Inspectable\n{\n  readonly [TypeId]: TypeId\n  readonly routes: Chunk.Chunk<Route<E, R>>\n  readonly mounts: Chunk.Chunk<\n    readonly [\n      prefix: string,\n      httpApp: App.Default<E, R>,\n      options?: { readonly includePrefix?: boolean | undefined } | undefined\n    ]\n  >\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Route",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Route<E = never, R = never> extends Inspectable {\n  readonly [RouteTypeId]: RouteTypeId\n  readonly method: Method.HttpMethod | \"*\"\n  readonly path: PathInput\n  readonly handler: Route.Handler<E, R>\n  readonly prefix: Option.Option<string>\n  readonly uninterruptible: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteContext",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RouteContext {\n  readonly [RouteContextTypeId]: RouteContextTypeId\n  readonly params: Readonly<Record<string, string | undefined>>\n  readonly route: Route<unknown, unknown>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PathInput",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type PathInput = `/${string}` | \"*\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteContextTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type RouteContextTypeId = typeof RouteContextTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type RouteTypeId = typeof RouteTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter",
      "path": [
        "src",
        "HttpRouter.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const HttpServer: Context.Tag<HttpServer, HttpServer>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: (options: { readonly serve: (httpApp: App.Default<unknown>, middleware?: Middleware.HttpMiddleware) => Effect.Effect<void, never, Scope.Scope>; readonly address: Address; }) => HttpServer"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "serve",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const serve: { (): <E, R>(httpApp: App.Default<E, R>) => Layer.Layer<never, never, HttpServer | Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R, App extends App.Default<any, any>>(middleware: Middleware.HttpMiddleware.Applied<App, E, R>): (httpApp: App.Default<E, R>) => Layer.Layer<never, never, HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R>(httpApp: App.Default<E, R>): Layer.Layer<never, never, HttpServer | Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R, App extends App.Default<any, any>>(httpApp: App.Default<E, R>, middleware: Middleware.HttpMiddleware.Applied<App, E, R>): Layer.Layer<never, never, HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest | Scope.Scope>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "serveEffect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const serveEffect: { (): <E, R>(httpApp: App.Default<E, R>) => Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<R, ServerRequest.HttpServerRequest>>; <E, R, App extends App.Default<any, any>>(middleware: Middleware.HttpMiddleware.Applied<App, E, R>): (httpApp: App.Default<E, R>) => Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest>>; <E, R>(httpApp: App.Default<E, R>): Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<R, ServerRequest.HttpServerRequest>>; <E, R, App extends App.Default<any, any>>(httpApp: App.Default<E, R>, middleware: Middleware.HttpMiddleware.Applied<App, E, R>): Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "formatAddress",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export declare const formatAddress: (address: Address) => string"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "addressWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export declare const addressWith: <A, E, R>(effect: (address: Address) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, HttpServer | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "addressFormattedWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export declare const addressFormattedWith: <A, E, R>(effect: (address: string) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, HttpServer | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "logAddress",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export declare const logAddress: Effect.Effect<void, never, HttpServer>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withLogAddress",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export declare const withLogAddress: <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R | Exclude<HttpServer, A>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerTestClient",
    "description": "Layer producing an `HttpClient` with prepended url of the running http server.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerTestClient: Layer.Layer<Client.HttpClient, never, HttpServer | Client.HttpClient>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerContext",
    "description": "A Layer providing the `HttpPlatform`, `FileSystem`, `Etag.Generator`, and `Path`\nservices.\n\nThe `FileSystem` service is a no-op implementation, so this layer is only\nuseful for platforms that have no file system.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerContext: Layer.Layer<FileSystem | Path | HttpPlatform | Generator, never, never>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServer {\n  readonly [TypeId]: TypeId\n  readonly serve: {\n    <E, R>(httpApp: App.Default<E, R>): Effect.Effect<\n      void,\n      never,\n      Exclude<R, ServerRequest.HttpServerRequest> | Scope.Scope\n    >\n    <E, R, App extends App.Default<any, any>>(\n      httpApp: App.Default<E, R>,\n      middleware: Middleware.HttpMiddleware.Applied<App, E, R>\n    ): Effect.Effect<\n      void,\n      never,\n      Exclude<R, ServerRequest.HttpServerRequest> | Scope.Scope\n    >\n  }\n  readonly address: Address\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ServeOptions",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ServeOptions {\n  readonly respond: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TcpAddress",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export interface TcpAddress {\n  readonly _tag: \"TcpAddress\"\n  readonly hostname: string\n  readonly port: number\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "UnixAddress",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export interface UnixAddress {\n  readonly _tag: \"UnixAddress\"\n  readonly path: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Address",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export type Address = UnixAddress | TcpAddress"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServer",
      "path": [
        "src",
        "HttpServer.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RequestError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class RequestError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ResponseError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class ResponseError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RouteNotFound",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class RouteNotFound { constructor(options: { request: ServerRequest.HttpServerRequest }) }"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ServeError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export declare class ServeError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isServerError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "predicates",
    "signature": "export declare const isServerError: (u: unknown) => u is HttpServerError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "clientAbortFiberId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const clientAbortFiberId: FiberId.FiberId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "causeResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const causeResponse: <E>(cause: Cause.Cause<E>) => Effect.Effect<readonly [ServerResponse.HttpServerResponse, Cause.Cause<E>]>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "causeResponseStripped",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const causeResponseStripped: <E>(cause: Cause.Cause<E>) => readonly [response: ServerResponse.HttpServerResponse, cause: Option.Option<Cause.Cause<E>>]"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "exitResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const exitResponse: <E>(exit: Exit.Exit<ServerResponse.HttpServerResponse, E>) => ServerResponse.HttpServerResponse"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServerError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "export type HttpServerError = RequestError | ResponseError | RouteNotFound | ServeError"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerError",
      "path": [
        "src",
        "HttpServerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServerRequest",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "export declare const HttpServerRequest: Context.Tag<HttpServerRequest, HttpServerRequest>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ParsedSearchParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "export declare const ParsedSearchParams: Context.Tag<ParsedSearchParams, ReadonlyRecord<string, string | string[]>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "searchParamsFromURL",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "export declare const searchParamsFromURL: (url: URL) => ReadonlyRecord<string, string | Array<string>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "persistedMultipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const persistedMultipart: Effect.Effect<unknown, Multipart.MultipartError, Scope.Scope | FileSystem.FileSystem | Path.Path | HttpServerRequest>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "upgrade",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const upgrade: Effect.Effect<Socket.Socket, Error.RequestError, HttpServerRequest>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "upgradeChannel",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "export declare const upgradeChannel: <IE = never>() => Channel<Chunk<Uint8Array>, Chunk<Uint8Array | string | Socket.CloseEvent>, Error.RequestError | IE | Socket.SocketError, IE, void, unknown, HttpServerRequest>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaCookies: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, HttpServerRequest | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaHeaders: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, HttpServerRequest | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaSearchParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaSearchParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, ParsedSearchParams | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Error.RequestError | ParseResult.ParseError, HttpServerRequest | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyForm",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyForm: <A, I extends Partial<Multipart.Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Multipart.MultipartError | ParseResult.ParseError | Error.RequestError, R | HttpServerRequest | Scope.Scope | FileSystem.FileSystem | Path.Path>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyUrlParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError | Error.RequestError, R | HttpServerRequest>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyMultipart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyMultipart: <A, I extends Partial<Multipart.Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Multipart.MultipartError | ParseResult.ParseError, R | HttpServerRequest | Scope.Scope | FileSystem.FileSystem | Path.Path>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaBodyFormJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaBodyFormJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (field: string) => Effect.Effect<A, ParseResult.ParseError | Error.RequestError, R | HttpServerRequest | FileSystem.FileSystem | Path.Path | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "export declare const fromWeb: (request: Request) => HttpServerRequest"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toURL",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "export declare const toURL: (self: HttpServerRequest) => Option<URL>"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "maxBodySize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const maxBodySize: FiberRef<Option<FileSystem.Size>>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServerRequest",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServerRequest extends IncomingMessage.HttpIncomingMessage<Error.RequestError> {\n  readonly [TypeId]: TypeId\n  readonly source: unknown\n  readonly url: string\n  readonly originalUrl: string\n  readonly method: HttpMethod\n  readonly cookies: ReadonlyRecord<string, string>\n\n  readonly multipart: Effect.Effect<\n    Multipart.Persisted,\n    Multipart.MultipartError,\n    Scope.Scope | FileSystem.FileSystem | Path.Path\n  >\n  readonly multipartStream: Stream.Stream<Multipart.Part, Multipart.MultipartError>\n\n  readonly upgrade: Effect.Effect<Socket.Socket, Error.RequestError>\n\n  readonly modify: (\n    options: {\n      readonly url?: string\n      readonly headers?: Headers.Headers\n      readonly remoteAddress?: string\n    }\n  ) => HttpServerRequest\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ParsedSearchParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "export interface ParsedSearchParams {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerRequest",
      "path": [
        "src",
        "HttpServerRequest.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRespondable",
      "path": [
        "src",
        "HttpServerRespondable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "symbol",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "export declare const symbol: typeof symbol"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable",
      "path": [
        "src",
        "HttpServerRespondable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isRespondable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable",
      "path": [
        "src",
        "HttpServerRespondable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable",
      "path": [
        "src",
        "HttpServerRespondable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toResponseOrElse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRespondable",
      "path": [
        "src",
        "HttpServerRespondable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Respondable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Respondable {\n  readonly [symbol]: () => Effect.Effect<HttpServerResponse, unknown>\n}"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isServerResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const isServerResponse: (u: unknown) => u is HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: (options?: Options.WithContent | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "redirect",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const redirect: (location: string | URL, options?: Options.WithContentType | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "uint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const uint8Array: (body: Uint8Array, options?: Options.WithContentType | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "text",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const text: (body: string, options?: Options.WithContentType | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "html",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const html: { <A extends ReadonlyArray<Template.Interpolated>>(strings: TemplateStringsArray, ...args: A): Effect.Effect<HttpServerResponse, Template.Interpolated.Error<A[number]>, Template.Interpolated.Context<A[number]>>; (html: string): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "htmlStream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const htmlStream: <A extends ReadonlyArray<Template.InterpolatedWithStream>>(strings: TemplateStringsArray, ...args: A) => Effect.Effect<HttpServerResponse, never, Template.Interpolated.Context<A[number]>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "json",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const json: (body: unknown, options?: Options.WithContentType | undefined) => Effect.Effect<HttpServerResponse, Body.HttpBodyError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const schemaJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (body: A, options?: Options.WithContent | undefined) => Effect.Effect<HttpServerResponse, Body.HttpBodyError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const unsafeJson: (body: unknown, options?: Options.WithContentType | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "urlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const urlParams: (body: UrlParams.Input, options?: Options.WithContentType | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "raw",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const raw: (body: unknown, options?: Options | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "formData",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const formData: (body: FormData, options?: Options.WithContent | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const stream: <E>(body: Stream.Stream<Uint8Array, E, never>, options?: Options | undefined) => HttpServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "file",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const file: (path: string, options?: (Options & FileSystem.StreamOptions) | undefined) => Effect.Effect<HttpServerResponse, PlatformError.PlatformError, Platform.HttpPlatform>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fileWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fileWeb: (file: Body.HttpBody.FileLike, options?: (Options.WithContent & FileSystem.StreamOptions) | undefined) => Effect.Effect<HttpServerResponse, never, Platform.HttpPlatform>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setHeader",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setHeader: { (key: string, value: string): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, key: string, value: string): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setHeaders: { (input: Headers.Input): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, input: Headers.Input): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "removeCookie",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const removeCookie: { (name: string): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, name: string): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "replaceCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const replaceCookies: { (cookies: Cookies): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, cookies: Cookies): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setCookie",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setCookie: { (name: string, value: string, options?: Cookie[\"options\"]): (self: HttpServerResponse) => Effect.Effect<HttpServerResponse, CookiesError>; (self: HttpServerResponse, name: string, value: string, options?: Cookie[\"options\"]): Effect.Effect<HttpServerResponse, CookiesError>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeSetCookie",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const unsafeSetCookie: { (name: string, value: string, options?: Cookie[\"options\"]): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, name: string, value: string, options?: Cookie[\"options\"]): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "updateCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const updateCookies: { (f: (cookies: Cookies) => Cookies): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, f: (cookies: Cookies) => Cookies): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setCookies: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: HttpServerResponse) => Effect.Effect<HttpServerResponse, CookiesError, never>; (self: HttpServerResponse, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Effect.Effect<HttpServerResponse, CookiesError, never>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeSetCookies",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const unsafeSetCookies: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setBody: { (body: Body.HttpBody): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, body: Body.HttpBody): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setStatus",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setStatus: { (status: number, statusText?: string | undefined): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, status: number, statusText?: string | undefined): HttpServerResponse; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toWeb",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "export declare const toWeb: (response: HttpServerResponse, options?: { readonly withoutBody?: boolean | undefined; readonly runtime?: Runtime.Runtime<never> | undefined; }) => Response"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "HttpServerResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServerResponse extends Effect.Effect<HttpServerResponse>, Inspectable, Respondable {\n  readonly [TypeId]: TypeId\n  readonly status: number\n  readonly statusText?: string | undefined\n  readonly headers: Headers.Headers\n  readonly cookies: Cookies\n  readonly body: Body.HttpBody\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Options",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options {\n  readonly status?: number | undefined\n  readonly statusText?: string | undefined\n  readonly headers?: Headers.Input | undefined\n  readonly cookies?: Cookies | undefined\n  readonly contentType?: string | undefined\n  readonly contentLength?: number | undefined\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerResponse",
      "path": [
        "src",
        "HttpServerResponse.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "b3",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "xb3",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "w3c",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpTraceContext",
      "path": [
        "src",
        "HttpTraceContext.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FromHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface FromHeaders {\n  (headers: Headers.Headers): Option.Option<Tracer.ExternalSpan>\n}"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Command.js\"",
    "description": "Re-exports all named exports from the \"./Command.js\" module as `Command`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Command from \"./Command.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./CommandExecutor.js\"",
    "description": "Re-exports all named exports from the \"./CommandExecutor.js\" module as `CommandExecutor`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as CommandExecutor from \"./CommandExecutor.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Cookies.js\"",
    "description": "Re-exports all named exports from the \"./Cookies.js\" module as `Cookies`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Cookies from \"./Cookies.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Effectify.js\"",
    "description": "Re-exports all named exports from the \"./Effectify.js\" module as `Effectify`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Effectify from \"./Effectify.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Error.js\"",
    "description": "Re-exports all named exports from the \"./Error.js\" module as `Error`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Error from \"./Error.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Etag.js\"",
    "description": "Re-exports all named exports from the \"./Etag.js\" module as `Etag`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Etag from \"./Etag.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./FetchHttpClient.js\"",
    "description": "Re-exports all named exports from the \"./FetchHttpClient.js\" module as `FetchHttpClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as FetchHttpClient from \"./FetchHttpClient.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./FileSystem.js\"",
    "description": "Re-exports all named exports from the \"./FileSystem.js\" module as `FileSystem`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as FileSystem from \"./FileSystem.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Headers.js\"",
    "description": "Re-exports all named exports from the \"./Headers.js\" module as `Headers`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Headers from \"./Headers.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApi.js\"",
    "description": "Re-exports all named exports from the \"./HttpApi.js\" module as `HttpApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApi from \"./HttpApi.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiBuilder.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiBuilder.js\" module as `HttpApiBuilder`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiBuilder from \"./HttpApiBuilder.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiClient.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiClient.js\" module as `HttpApiClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiClient from \"./HttpApiClient.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiEndpoint.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiEndpoint.js\" module as `HttpApiEndpoint`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiEndpoint from \"./HttpApiEndpoint.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiError.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiError.js\" module as `HttpApiError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiError from \"./HttpApiError.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiGroup.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiGroup.js\" module as `HttpApiGroup`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiGroup from \"./HttpApiGroup.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiMiddleware.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiMiddleware.js\" module as `HttpApiMiddleware`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiMiddleware from \"./HttpApiMiddleware.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiScalar.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiScalar.js\" module as `HttpApiScalar`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiScalar from \"./HttpApiScalar.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiSchema.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiSchema.js\" module as `HttpApiSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiSchema from \"./HttpApiSchema.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiSecurity.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiSecurity.js\" module as `HttpApiSecurity`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiSecurity from \"./HttpApiSecurity.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApiSwagger.js\"",
    "description": "Re-exports all named exports from the \"./HttpApiSwagger.js\" module as `HttpApiSwagger`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApiSwagger from \"./HttpApiSwagger.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpApp.js\"",
    "description": "Re-exports all named exports from the \"./HttpApp.js\" module as `HttpApp`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpApp from \"./HttpApp.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpBody.js\"",
    "description": "Re-exports all named exports from the \"./HttpBody.js\" module as `HttpBody`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpBody from \"./HttpBody.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpClient.js\"",
    "description": "Re-exports all named exports from the \"./HttpClient.js\" module as `HttpClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpClient from \"./HttpClient.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpClientError.js\"",
    "description": "Re-exports all named exports from the \"./HttpClientError.js\" module as `HttpClientError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpClientError from \"./HttpClientError.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpClientRequest.js\"",
    "description": "Re-exports all named exports from the \"./HttpClientRequest.js\" module as `HttpClientRequest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpClientRequest from \"./HttpClientRequest.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpClientResponse.js\"",
    "description": "Re-exports all named exports from the \"./HttpClientResponse.js\" module as `HttpClientResponse`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpClientResponse from \"./HttpClientResponse.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpIncomingMessage.js\"",
    "description": "Re-exports all named exports from the \"./HttpIncomingMessage.js\" module as `HttpIncomingMessage`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpIncomingMessage from \"./HttpIncomingMessage.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpMethod.js\"",
    "description": "Re-exports all named exports from the \"./HttpMethod.js\" module as `HttpMethod`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export * as HttpMethod from \"./HttpMethod.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpMiddleware.js\"",
    "description": "Re-exports all named exports from the \"./HttpMiddleware.js\" module as `HttpMiddleware`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpMiddleware from \"./HttpMiddleware.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpMultiplex.js\"",
    "description": "Re-exports all named exports from the \"./HttpMultiplex.js\" module as `HttpMultiplex`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpMultiplex from \"./HttpMultiplex.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpPlatform.js\"",
    "description": "Re-exports all named exports from the \"./HttpPlatform.js\" module as `HttpPlatform`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpPlatform from \"./HttpPlatform.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpRouter.js\"",
    "description": "Re-exports all named exports from the \"./HttpRouter.js\" module as `HttpRouter`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpRouter from \"./HttpRouter.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpServer.js\"",
    "description": "Re-exports all named exports from the \"./HttpServer.js\" module as `HttpServer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpServer from \"./HttpServer.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpServerError.js\"",
    "description": "Re-exports all named exports from the \"./HttpServerError.js\" module as `HttpServerError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpServerError from \"./HttpServerError.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpServerRequest.js\"",
    "description": "Re-exports all named exports from the \"./HttpServerRequest.js\" module as `HttpServerRequest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpServerRequest from \"./HttpServerRequest.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpServerRespondable.js\"",
    "description": "Re-exports all named exports from the \"./HttpServerRespondable.js\" module as `HttpServerRespondable`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpServerRespondable from \"./HttpServerRespondable.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpServerResponse.js\"",
    "description": "Re-exports all named exports from the \"./HttpServerResponse.js\" module as `HttpServerResponse`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpServerResponse from \"./HttpServerResponse.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./HttpTraceContext.js\"",
    "description": "Re-exports all named exports from the \"./HttpTraceContext.js\" module as `HttpTraceContext`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as HttpTraceContext from \"./HttpTraceContext.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./KeyValueStore.js\"",
    "description": "Re-exports all named exports from the \"./KeyValueStore.js\" module as `KeyValueStore`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as KeyValueStore from \"./KeyValueStore.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Multipart.js\"",
    "description": "Re-exports all named exports from the \"./Multipart.js\" module as `Multipart`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Multipart from \"./Multipart.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./OpenApi.js\"",
    "description": "Re-exports all named exports from the \"./OpenApi.js\" module as `OpenApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as OpenApi from \"./OpenApi.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./OpenApiJsonSchema.js\"",
    "description": "Re-exports all named exports from the \"./OpenApiJsonSchema.js\" module as `OpenApiJsonSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as OpenApiJsonSchema from \"./OpenApiJsonSchema.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Path.js\"",
    "description": "Re-exports all named exports from the \"./Path.js\" module as `Path`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Path from \"./Path.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./PlatformConfigProvider.js\"",
    "description": "Re-exports all named exports from the \"./PlatformConfigProvider.js\" module as `PlatformConfigProvider`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as PlatformConfigProvider from \"./PlatformConfigProvider.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./PlatformLogger.js\"",
    "description": "Re-exports all named exports from the \"./PlatformLogger.js\" module as `PlatformLogger`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as PlatformLogger from \"./PlatformLogger.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Runtime.js\"",
    "description": "Re-exports all named exports from the \"./Runtime.js\" module as `Runtime`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Runtime from \"./Runtime.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Socket.js\"",
    "description": "Re-exports all named exports from the \"./Socket.js\" module as `Socket`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Socket from \"./Socket.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Template.js\"",
    "description": "Re-exports all named exports from the \"./Template.js\" module as `Template`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Template from \"./Template.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Terminal.js\"",
    "description": "Re-exports all named exports from the \"./Terminal.js\" module as `Terminal`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Terminal from \"./Terminal.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Transferable.js\"",
    "description": "Re-exports all named exports from the \"./Transferable.js\" module as `Transferable`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Transferable from \"./Transferable.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./UrlParams.js\"",
    "description": "Re-exports all named exports from the \"./UrlParams.js\" module as `UrlParams`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as UrlParams from \"./UrlParams.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./Worker.js\"",
    "description": "Re-exports all named exports from the \"./Worker.js\" module as `Worker`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as Worker from \"./Worker.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./WorkerError.js\"",
    "description": "Re-exports all named exports from the \"./WorkerError.js\" module as `WorkerError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as WorkerError from \"./WorkerError.js\""
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index",
      "path": [
        "src",
        "index.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "From \"./WorkerRunner.js\"",
    "description": "Re-exports all named exports from the \"./WorkerRunner.js\" module as `WorkerRunner`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "exports",
    "signature": "export * as WorkerRunner from \"./WorkerRunner.js\""
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "KeyValueStore",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const KeyValueStore: Context.Tag<KeyValueStore, KeyValueStore>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: (impl: Omit<KeyValueStore, typeof TypeId | \"has\" | \"modify\" | \"isEmpty\" | \"forSchema\"> & Partial<KeyValueStore>) => KeyValueStore"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeStringOnly",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeStringOnly: (impl: Pick<KeyValueStore, \"get\" | \"remove\" | \"clear\" | \"size\"> & Partial<Omit<KeyValueStore, \"set\">> & { readonly set: (key: string, value: string) => Effect.Effect<void, PlatformError.PlatformError>; }) => KeyValueStore"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "prefix",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const prefix: { (prefix: string): <S extends KeyValueStore.AnyStore>(self: S) => S; <S extends KeyValueStore.AnyStore>(self: S, prefix: string): S; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerMemory",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerMemory: Layer.Layer<KeyValueStore, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerFileSystem",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerFileSystem: (directory: string) => Layer.Layer<KeyValueStore, PlatformError.PlatformError, FileSystem.FileSystem | Path.Path>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SchemaStoreTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export declare const SchemaStoreTypeId: typeof SchemaStoreTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerSchema: <A, I, R>(schema: Schema.Schema<A, I, R>, tagIdentifier: string) => { readonly tag: Context.Tag<SchemaStore<A, R>, SchemaStore<A, R>>; readonly layer: Layer.Layer<SchemaStore<A, R>, never, KeyValueStore>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerStorage",
    "description": "Creates an KeyValueStorage from an instance of the `Storage` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerStorage: (evaluate: LazyArg<Storage>) => Layer.Layer<KeyValueStore>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "KeyValueStore",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface KeyValueStore {\n  readonly [TypeId]: TypeId\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly get: (key: string) => Effect.Effect<Option.Option<string>, PlatformError.PlatformError>\n\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly getUint8Array: (key: string) => Effect.Effect<Option.Option<Uint8Array>, PlatformError.PlatformError>\n\n  /**\n   * Sets the value of the specified key.\n   */\n  readonly set: (key: string, value: string | Uint8Array) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes the specified key.\n   */\n  readonly remove: (key: string) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes all entries.\n   */\n  readonly clear: Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Returns the number of entries.\n   */\n  readonly size: Effect.Effect<number, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modify: (\n    key: string,\n    f: (value: string) => string\n  ) => Effect.Effect<Option.Option<string>, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modifyUint8Array: (\n    key: string,\n    f: (value: Uint8Array) => Uint8Array\n  ) => Effect.Effect<Option.Option<Uint8Array>, PlatformError.PlatformError>\n\n  /**\n   * Returns true if the KeyValueStore contains the specified key.\n   */\n  readonly has: (key: string) => Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Checks if the KeyValueStore contains any entries.\n   */\n  readonly isEmpty: Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Create a SchemaStore for the specified schema.\n   */\n  readonly forSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => SchemaStore<A, R>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SchemaStore",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SchemaStore<A, R> {\n  readonly [SchemaStoreTypeId]: SchemaStoreTypeId\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly get: (\n    key: string\n  ) => Effect.Effect<Option.Option<A>, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Sets the value of the specified key.\n   */\n  readonly set: (\n    key: string,\n    value: A\n  ) => Effect.Effect<void, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Removes the specified key.\n   */\n  readonly remove: (key: string) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes all entries.\n   */\n  readonly clear: Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Returns the number of entries.\n   */\n  readonly size: Effect.Effect<number, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modify: (\n    key: string,\n    f: (value: A) => A\n  ) => Effect.Effect<Option.Option<A>, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Returns true if the KeyValueStore contains the specified key.\n   */\n  readonly has: (key: string) => Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Checks if the KeyValueStore contains any entries.\n   */\n  readonly isEmpty: Effect.Effect<boolean, PlatformError.PlatformError>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SchemaStoreTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type SchemaStoreTypeId = typeof SchemaStoreTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "KeyValueStore",
      "path": [
        "src",
        "KeyValueStore.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isPart",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "export declare const isPart: (u: unknown) => u is Part"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isField",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "export declare const isField: (u: unknown) => u is Field"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isFile",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "export declare const isFile: (u: unknown) => u is File"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isPersistedFile",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "export declare const isPersistedFile: (u: unknown) => u is PersistedFile"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const ErrorTypeId: typeof ErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MultipartError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare const MultipartError: new (options: { readonly reason: MultipartError[\"reason\"]; readonly cause: unknown; }) => MultipartError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "maxParts",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const maxParts: FiberRef.FiberRef<Option.Option<number>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withMaxParts",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withMaxParts: { (count: Option.Option<number>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, count: Option.Option<number>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "maxFieldSize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const maxFieldSize: FiberRef.FiberRef<FileSystem.Size>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withMaxFieldSize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withMaxFieldSize: { (size: FileSystem.SizeInput): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, size: FileSystem.SizeInput): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "maxFileSize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const maxFileSize: FiberRef.FiberRef<Option.Option<FileSystem.Size>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withMaxFileSize",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withMaxFileSize: { (size: Option.Option<FileSystem.SizeInput>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, size: Option.Option<FileSystem.SizeInput>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fieldMimeTypes",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const fieldMimeTypes: FiberRef.FiberRef<Chunk.Chunk<string>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "withFieldMimeTypes",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const withFieldMimeTypes: { (mimeTypes: ReadonlyArray<string>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, mimeTypes: ReadonlyArray<string>): Effect.Effect<A, E, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FileSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const FileSchema: Schema.Schema<PersistedFile, PersistedFile, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "FilesSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const FilesSchema: Schema.Schema<readonly PersistedFile[], readonly PersistedFile[], never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SingleFileSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const SingleFileSchema: Schema.transform<Schema.Schema<readonly PersistedFile[], readonly PersistedFile[], never>, Schema.Schema<PersistedFile, PersistedFile, never>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => { (field: string): (persisted: Persisted) => Effect.Effect<A, ParseResult.ParseError, R>; (persisted: Persisted, field: string): Effect.Effect<A, ParseResult.ParseError, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaPersisted",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schemaPersisted: <A, I extends Partial<Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (persisted: Persisted) => Effect.Effect<A, ParseResult.ParseError, R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeChannel",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeChannel: <IE>(headers: Record<string, string>, bufferSize?: number) => Channel.Channel<Chunk.Chunk<Part>, Chunk.Chunk<Uint8Array>, MultipartError | IE, IE, unknown, unknown>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeConfig",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeConfig: (headers: Record<string, string>) => Effect.Effect<Multipasta.BaseConfig>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toPersisted",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const toPersisted: (stream: Stream.Stream<Part, MultipartError>, writeFile?: (path: string, file: File) => Effect.Effect<void, MultipartError, FileSystem.FileSystem>) => Effect.Effect<Persisted, MultipartError, FileSystem.FileSystem | Path.Path | Scope.Scope>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Field",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Field extends Part.Proto {\n  readonly _tag: \"Field\"\n  readonly key: string\n  readonly contentType: string\n  readonly value: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "File",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface File extends Part.Proto {\n  readonly _tag: \"File\"\n  readonly key: string\n  readonly name: string\n  readonly contentType: string\n  readonly content: Stream.Stream<Uint8Array, MultipartError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MultipartError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface MultipartError extends YieldableError {\n  readonly [ErrorTypeId]: ErrorTypeId\n  readonly _tag: \"MultipartError\"\n  readonly reason: \"FileTooLarge\" | \"FieldTooLarge\" | \"BodyTooLarge\" | \"TooManyParts\" | \"InternalError\" | \"Parse\"\n  readonly message: string\n  readonly cause: unknown\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Persisted",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Persisted {\n  readonly [key: string]: ReadonlyArray<PersistedFile> | ReadonlyArray<string> | string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PersistedFile",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PersistedFile extends Part.Proto {\n  readonly _tag: \"PersistedFile\"\n  readonly key: string\n  readonly name: string\n  readonly contentType: string\n  readonly path: string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type ErrorTypeId = typeof ErrorTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Part",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Part = Field | File"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart",
      "path": [
        "src",
        "Multipart.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Deprecated",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Deprecated"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Description",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Description"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Exclude",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Exclude"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ExternalDocs",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class ExternalDocs"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Format",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Format"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Identifier",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Identifier"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "License",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class License"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Override",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Override"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Servers",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Servers"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Summary",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Summary"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Title",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Title"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Transform",
    "description": "Transforms the generated OpenAPI specification",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Transform"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Version",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare class Version"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "annotations",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "export declare const annotations: (options: { readonly identifier?: string | undefined; readonly title?: string | undefined; readonly version?: string | undefined; readonly description?: string | undefined; readonly license?: OpenAPISpecLicense | undefined; readonly summary?: string | undefined; readonly deprecated?: boolean | undefined; readonly externalDocs?: OpenAPISpecExternalDocs | undefined; readonly servers?: ReadonlyArray<OpenAPISpecServer> | undefined; readonly format?: string | undefined; readonly override?: Record<string, unknown> | undefined; readonly exclude?: boolean | undefined; readonly transform?: ((openApiSpec: Record<string, any>) => Record<string, any>) | undefined; }) => Context.Context<never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromApi",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIApiKeySecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIApiKeySecurityScheme {\n  readonly type: \"apiKey\"\n  readonly description?: string\n  readonly name: string\n  readonly in: \"query\" | \"header\" | \"cookie\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIComponents",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIComponents {\n  readonly schemas?: ReadonlyRecord<string, JsonSchema.JsonSchema>\n  readonly securitySchemes?: ReadonlyRecord<string, OpenAPISecurityScheme>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIHTTPSecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIHTTPSecurityScheme {\n  readonly type: \"http\"\n  readonly description?: string\n  readonly scheme: \"bearer\" | \"basic\" | string\n  /* only for scheme: 'bearer' */\n  readonly bearerFormat?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIMutualTLSSecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIMutualTLSSecurityScheme {\n  readonly type: \"mutualTLS\"\n  readonly description?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIOAuth2SecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIOAuth2SecurityScheme {\n  readonly type: \"oauth2\"\n  readonly description?: string\n  readonly flows: ReadonlyRecord<\n    \"implicit\" | \"password\" | \"clientCredentials\" | \"authorizationCode\",\n    ReadonlyRecord<string, unknown>\n  >\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPIOpenIdConnectSecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIOpenIdConnectSecurityScheme {\n  readonly type: \"openIdConnect\"\n  readonly description?: string\n  readonly openIdConnectUrl: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpec",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpec {\n  readonly openapi: \"3.1.0\"\n  readonly info: OpenAPISpecInfo\n  readonly servers?: Array<OpenAPISpecServer>\n  readonly paths: OpenAPISpecPaths\n  readonly components?: OpenAPIComponents\n  readonly security?: Array<OpenAPISecurityRequirement>\n  readonly tags?: Array<OpenAPISpecTag>\n  readonly externalDocs?: OpenAPISpecExternalDocs\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecExternalDocs",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecExternalDocs {\n  readonly url: string\n  readonly description?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecInfo",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecInfo {\n  readonly title: string\n  readonly version: string\n  readonly description?: string\n  readonly license?: OpenAPISpecLicense\n  readonly summary?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecLicense",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecLicense {\n  readonly name: string\n  readonly url?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecOperation",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecOperation {\n  readonly requestBody?: OpenAPISpecRequestBody\n  readonly responses?: OpenAPISpecResponses\n  readonly operationId?: string\n  readonly description?: string\n  readonly parameters?: Array<OpenAPISpecParameter>\n  readonly summary?: string\n  readonly deprecated?: boolean\n  readonly tags?: Array<string>\n  readonly security?: Array<OpenAPISecurityRequirement>\n  readonly externalDocs?: OpenAPISpecExternalDocs\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecParameter",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecParameter {\n  readonly name: string\n  readonly in: \"query\" | \"header\" | \"path\" | \"cookie\"\n  readonly schema: JsonSchema.JsonSchema\n  readonly description?: string\n  readonly required?: boolean\n  readonly deprecated?: boolean\n  readonly allowEmptyValue?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecRequestBody",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecRequestBody {\n  readonly content: OpenApiSpecContent\n  readonly description?: string\n  readonly required?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecServer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecServer {\n  readonly url: string\n  readonly description?: string\n  readonly variables?: Record<string, OpenAPISpecServerVariable>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecServerVariable",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecServerVariable {\n  readonly default: string\n  readonly enum?: [string, ...Array<string>]\n  readonly description?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecTag",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecTag {\n  readonly name: string\n  readonly description?: string\n  readonly externalDocs?: OpenAPISpecExternalDocs\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecMediaType",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenApiSpecMediaType {\n  readonly schema?: JsonSchema.JsonSchema\n  readonly example?: object\n  readonly description?: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecResponse",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenApiSpecResponse {\n  readonly content?: OpenApiSpecContent\n  readonly headers?: OpenApiSpecResponseHeaders\n  readonly description: string\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecResponseHeader",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenApiSpecResponseHeader {\n  readonly description?: string\n  readonly schema: JsonSchema.JsonSchema\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISecurityRequirement",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISecurityRequirement = ReadonlyRecord<string, Array<string>>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISecurityScheme",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISecurityScheme =\n  | OpenAPIHTTPSecurityScheme\n  | OpenAPIApiKeySecurityScheme\n  | OpenAPIMutualTLSSecurityScheme\n  | OpenAPIOAuth2SecurityScheme\n  | OpenAPIOpenIdConnectSecurityScheme"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecMethodName",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISpecMethodName =\n  | \"get\"\n  | \"put\"\n  | \"post\"\n  | \"delete\"\n  | \"options\"\n  | \"head\"\n  | \"patch\"\n  | \"trace\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecPathItem",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISpecPathItem =\n  & {\n    readonly [K in OpenAPISpecMethodName]?: OpenAPISpecOperation\n  }\n  & {\n    readonly summary?: string\n    readonly description?: string\n    readonly parameters?: Array<OpenAPISpecParameter>\n  }"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecPaths",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISpecPaths = ReadonlyRecord<\n  string,\n  OpenAPISpecPathItem\n>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecResponses",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenAPISpecResponses = Record<number, OpenApiSpecResponse>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecContent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenApiSpecContent = {\n  readonly [K in OpenApiSpecContentType]?: OpenApiSpecMediaType\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecContentType",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenApiSpecContentType =\n  | \"application/json\"\n  | \"application/xml\"\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"text/plain\""
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi",
      "path": [
        "src",
        "OpenApi.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecResponseHeaders",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type OpenApiSpecResponseHeaders = ReadonlyRecord<\n  string,\n  OpenApiSpecResponseHeader\n>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeWithDefs",
    "description": "Creates a schema with additional options and definitions.\n\n- `defs`: A record of definitions that are included in the schema.\n- `defsPath`: The path to the definitions within the schema (defaults to \"#/$defs/\").\n- `topLevelReferenceStrategy`: Controls the handling of the top-level reference. Possible values are:\n  - `\"keep\"`: Keep the top-level reference (default behavior).\n  - `\"skip\"`: Skip the top-level reference.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Annotations",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Annotations {\n  title?: string\n  description?: string\n  default?: unknown\n  examples?: globalThis.Array<unknown>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Any",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Any extends Annotations {\n  $id: \"/schemas/any\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnyObject",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface AnyObject extends Annotations {\n  $id: \"/schemas/object\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "AnyOf",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface AnyOf extends Annotations {\n  anyOf: globalThis.Array<JsonSchema>\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Array extends Annotations {\n  type: \"array\"\n  items?: JsonSchema | globalThis.Array<JsonSchema>\n  minItems?: number\n  maxItems?: number\n  additionalItems?: JsonSchema | boolean\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Boolean",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Boolean extends Annotations {\n  type: \"boolean\"\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface Empty extends Annotations {\n  $id: \"/schemas/{}\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Enum",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Enum extends Annotations {\n  type?: \"string\" | \"number\" | \"boolean\"\n  enum: globalThis.Array<string | number | boolean | null>\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Enums",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface Enums extends Annotations {\n  $comment: \"/schemas/enums\"\n  anyOf: globalThis.Array<{\n    type: \"string\" | \"number\"\n    title: string\n    enum: [string | number]\n  }>\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Integer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Integer extends Numeric {\n  type: \"integer\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Never",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Never extends Annotations {\n  $id: \"/schemas/never\"\n  not: {}\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Number",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Number extends Numeric {\n  type: \"number\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Numeric",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Numeric extends Annotations {\n  minimum?: number\n  exclusiveMinimum?: number\n  maximum?: number\n  exclusiveMaximum?: number\n  multipleOf?: number\n  format?: string\n  allOf?: globalThis.Array<{\n    minimum?: number\n    exclusiveMinimum?: number\n    maximum?: number\n    exclusiveMaximum?: number\n    multipleOf?: number\n  }>\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Object",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Object extends Annotations {\n  type: \"object\"\n  required: globalThis.Array<string>\n  properties: Record<string, JsonSchema>\n  additionalProperties?: boolean | JsonSchema\n  patternProperties?: Record<string, JsonSchema>\n  propertyNames?: JsonSchema\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Ref",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Ref extends Annotations {\n  $ref: string\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "String",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface String extends Annotations {\n  type: \"string\"\n  minLength?: number\n  maxLength?: number\n  pattern?: string\n  format?: string\n  contentMediaType?: string\n  contentSchema?: JsonSchema\n  allOf?: globalThis.Array<{\n    minLength?: number\n    maxLength?: number\n    pattern?: string\n  }>\n  nullable?: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Unknown",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Unknown extends Annotations {\n  $id: \"/schemas/unknown\"\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Void",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "0.69.0",
    "category": "model",
    "signature": "export interface Void extends Annotations {\n  $id: \"/schemas/void\"\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "JsonSchema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export type JsonSchema =\n  | Never\n  | Any\n  | Unknown\n  | Void\n  | AnyObject\n  | Empty\n  | Ref\n  | String\n  | Number\n  | Integer\n  | Boolean\n  | Array\n  | Enum\n  | Enums\n  | AnyOf\n  | Object"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApiJsonSchema",
      "path": [
        "src",
        "OpenApiJsonSchema.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Root",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export type Root = JsonSchema & {\n  $defs?: Record<string, JsonSchema>\n}"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path",
      "path": [
        "src",
        "Path.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path",
      "path": [
        "src",
        "Path.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Path",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "export declare const Path: Tag<Path, Path>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path",
      "path": [
        "src",
        "Path.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": "An implementation of the Path interface that can be used in all environments\n(including browsers).\n\nIt uses the POSIX standard for paths.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "export declare const layer: Layer<Path, never, never>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Path",
      "path": [
        "src",
        "Path.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Path",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Path {\n  readonly [TypeId]: TypeId\n  readonly sep: string\n  readonly basename: (path: string, suffix?: string) => string\n  readonly dirname: (path: string) => string\n  readonly extname: (path: string) => string\n  readonly format: (pathObject: Partial<Path.Parsed>) => string\n  readonly fromFileUrl: (url: URL) => Effect<string, BadArgument>\n  readonly isAbsolute: (path: string) => boolean\n  readonly join: (...paths: ReadonlyArray<string>) => string\n  readonly normalize: (path: string) => string\n  readonly parse: (path: string) => Path.Parsed\n  readonly relative: (from: string, to: string) => string\n  readonly resolve: (...pathSegments: ReadonlyArray<string>) => string\n  readonly toFileUrl: (path: string) => Effect<URL, BadArgument>\n  readonly toNamespacedPath: (path: string) => string\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Path",
      "path": [
        "src",
        "Path.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromDotEnv",
    "description": "Create a dotenv ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const fromDotEnv: (paths: string) => Effect.Effect<ConfigProvider.ConfigProvider, PlatformError, FileSystem.FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerDotEnvAdd",
    "description": "Add the dotenv ConfigProvider to the environment, as a fallback to the current ConfigProvider.\nIf the file is not found, a debug log is produced and empty layer is returned.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerDotEnvAdd: (path: string) => Layer.Layer<never, never, FileSystem.FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerDotEnv",
    "description": "Add the dotenv ConfigProvider to the environment, replacing the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerDotEnv: (path: string) => Layer.Layer<never, PlatformError, FileSystem.FileSystem>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromFileTree",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerFileTreeAdd",
    "description": "Add the file tree ConfigProvider to the environment, as a fallback to the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider",
      "path": [
        "src",
        "PlatformConfigProvider.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerFileTree",
    "description": "Add the file tree ConfigProvider to the environment, replacing the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": null
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformLogger",
      "path": [
        "src",
        "PlatformLogger.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toFile",
    "description": "Create a Logger from another string Logger that writes to the specified file.",
    "deprecated": false,
    "examples": [
      "import { PlatformLogger } from \"@effect/platform\"\nimport { NodeFileSystem, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Logger } from \"effect\"\n\nconst fileLogger = Logger.logfmtLogger.pipe(\n  PlatformLogger.toFile(\"/tmp/log.txt\")\n)\nconst LoggerLive = Logger.replaceScoped(Logger.defaultLogger, fileLogger).pipe(\n  Layer.provide(NodeFileSystem.layer)\n)\n\nEffect.log(\"a\").pipe(\n  Effect.zipRight(Effect.log(\"b\")),\n  Effect.zipRight(Effect.log(\"c\")),\n  Effect.provide(LoggerLive),\n  NodeRuntime.runMain\n)"
    ],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const toFile: { (path: string, options?: (OpenFileOptions & { readonly batchWindow?: DurationInput | undefined; }) | undefined): <Message>(self: Logger.Logger<Message, string>) => Effect<Logger.Logger<Message, void>, PlatformError, Scope | FileSystem>; <Message>(self: Logger.Logger<Message, string>, path: string, options?: (OpenFileOptions & { readonly batchWindow?: DurationInput | undefined; }) | undefined): Effect<Logger.Logger<Message, void>, PlatformError, Scope | FileSystem>; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Runtime",
      "path": [
        "src",
        "Runtime.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "defaultTeardown",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "teardown",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Runtime",
      "path": [
        "src",
        "Runtime.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeRunMain",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Runtime",
      "path": [
        "src",
        "Runtime.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "RunMain",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface RunMain {\n  (\n    options?: {\n      readonly disableErrorReporting?: boolean | undefined\n      readonly disablePrettyLogger?: boolean | undefined\n      readonly teardown?: Teardown | undefined\n    }\n  ): <E, A>(effect: Effect.Effect<A, E>) => void\n  <E, A>(\n    effect: Effect.Effect<A, E>,\n    options?: {\n      readonly disableErrorReporting?: boolean | undefined\n      readonly disablePrettyLogger?: boolean | undefined\n      readonly teardown?: Teardown | undefined\n    }\n  ): void\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Runtime",
      "path": [
        "src",
        "Runtime.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Teardown",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Teardown {\n  <E, A>(exit: Exit.Exit<E, A>, onExit: (code: number) => void): void\n}"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CloseEvent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export declare class CloseEvent { constructor(readonly code = 1000, readonly reason?: string) }"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SocketCloseError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare class SocketCloseError"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SocketGenericError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare class SocketGenericError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const TypeId: typeof TypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Socket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const Socket: Context.Tag<Socket, Socket>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CloseEventTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const CloseEventTypeId: typeof CloseEventTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SocketErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const SocketErrorTypeId: typeof SocketErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toChannelString",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const toChannelString: { (encoding?: string | undefined): <IE>(self: Socket) => Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>; <IE>(self: Socket, encoding?: string | undefined): Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WebSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const WebSocket: Context.Tag<WebSocket, globalThis.WebSocket>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WebSocketConstructor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const WebSocketConstructor: Context.Tag<WebSocketConstructor, (url: string, protocols?: string | Array<string> | undefined) => globalThis.WebSocket>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerWebSocketConstructorGlobal",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerWebSocketConstructorGlobal: Layer.Layer<WebSocketConstructor, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "currentSendQueueCapacity",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "export declare const currentSendQueueCapacity: FiberRef.FiberRef<number>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isCloseEvent",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isSocketError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toChannelMap",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toChannel",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toChannelWith",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeChannel",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "defaultCloseCodeIsError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeWebSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromWebSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeWebSocketChannel",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerWebSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromTransformStream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "InputTransformStream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface InputTransformStream {\n  readonly readable: ReadableStream<Uint8Array> | ReadableStream<string> | ReadableStream<Uint8Array | string>\n  readonly writable: WritableStream<Uint8Array>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Socket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Socket {\n  readonly [TypeId]: TypeId\n  readonly run: <_, E = never, R = never>(\n    handler: (_: Uint8Array) => Effect.Effect<_, E, R> | void\n  ) => Effect.Effect<void, SocketError | E, R>\n  readonly runRaw: <_, E = never, R = never>(\n    handler: (_: string | Uint8Array) => Effect.Effect<_, E, R> | void\n  ) => Effect.Effect<void, SocketError | E, R>\n  readonly writer: Effect.Effect<\n    (chunk: Uint8Array | string | CloseEvent) => Effect.Effect<void, SocketError>,\n    never,\n    Scope.Scope\n  >\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WebSocket",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export interface WebSocket {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WebSocketConstructor",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export interface WebSocketConstructor {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CloseEventTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type CloseEventTypeId = typeof CloseEventTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SocketError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export type SocketError = SocketGenericError | SocketCloseError"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SocketErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type SocketErrorTypeId = typeof SocketErrorTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket",
      "path": [
        "src",
        "Socket.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type TypeId = typeof TypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Interpolated",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Interpolated =\n  | Primitive\n  | Option.Option<Primitive>\n  | Effect.Effect<Primitive, any, any>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "InterpolatedWithStream",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type InterpolatedWithStream = Interpolated | Stream.Stream<Primitive, any, any>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Primitive",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Primitive = PrimitiveValue | ReadonlyArray<PrimitiveValue>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template",
      "path": [
        "src",
        "Template.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PrimitiveValue",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type PrimitiveValue = string | number | bigint | boolean | null | undefined"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Terminal",
      "path": [
        "src",
        "Terminal.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "QuitException",
    "description": "A `QuitException` represents an exception that occurs when a user attempts to\nquit out of a `Terminal` prompt for input (usually by entering `ctrl`+`c`).",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export declare class QuitException"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Terminal",
      "path": [
        "src",
        "Terminal.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Terminal",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "export declare const Terminal: Tag<Terminal, Terminal>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal",
      "path": [
        "src",
        "Terminal.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Key",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Key {\n  /**\n   * The name of the key being pressed.\n   */\n  readonly name: string\n  /**\n   * If set to `true`, then the user is also holding down the `Ctrl` key.\n   */\n  readonly ctrl: boolean\n  /**\n   * If set to `true`, then the user is also holding down the `Meta` key.\n   */\n  readonly meta: boolean\n  /**\n   * If set to `true`, then the user is also holding down the `Shift` key.\n   */\n  readonly shift: boolean\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal",
      "path": [
        "src",
        "Terminal.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Terminal",
    "description": "A `Terminal` represents a command-line interface which can read input from a\nuser and display messages to a user.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Terminal {\n  /**\n   * The number of columns available on the platform's terminal interface.\n   */\n  readonly columns: Effect<number>\n  /**\n   * Reads a single input event from the default standard input.\n   */\n  readonly readInput: Effect<UserInput, QuitException>\n  /**\n   * Reads a single line from the default standard input.\n   */\n  readonly readLine: Effect<string, QuitException>\n  /**\n   * Displays text to the the default standard output.\n   */\n  readonly display: (text: string) => Effect<void, PlatformError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal",
      "path": [
        "src",
        "Terminal.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "UserInput",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface UserInput {\n  /**\n   * The character read from the user (if any).\n   */\n  readonly input: Option<string>\n  /**\n   * The key that the user pressed.\n   */\n  readonly key: Key\n}"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Collector",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare class Collector"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeCollector",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeCollector: Effect.Effect<CollectorService, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const schema: { <I>(f: (_: I) => Iterable<globalThis.Transferable>): <A, R>(self: Schema.Schema<A, I, R>) => Schema.Schema<A, I, R>; <A, I, R>(self: Schema.Schema<A, I, R>, f: (_: I) => Iterable<globalThis.Transferable>): Schema.Schema<A, I, R>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "ImageData",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const ImageData: Schema.Schema<ImageData, ImageData, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "MessagePort",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const MessagePort: Schema.Schema<MessagePort, MessagePort, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "export declare const Uint8Array: Schema.Schema<Uint8Array, Uint8Array, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "unsafeMakeCollector",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "addAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Transferable",
      "path": [
        "src",
        "Transferable.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "CollectorService",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface CollectorService {\n  readonly addAll: (_: Iterable<globalThis.Transferable>) => Effect.Effect<void>\n  readonly unsafeAddAll: (_: Iterable<globalThis.Transferable>) => void\n  readonly read: Effect.Effect<Array<globalThis.Transferable>>\n  readonly unsafeRead: () => Array<globalThis.Transferable>\n  readonly unsafeClear: () => void\n  readonly clear: Effect.Effect<void>\n}"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schema",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export declare const schema: Schema.Schema<UrlParams, readonly (readonly [string, string])[], never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const empty: UrlParams"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const getAll: { (key: string): (self: UrlParams) => ReadonlyArray<string>; (self: UrlParams, key: string): ReadonlyArray<string>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getFirst",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const getFirst: { (key: string): (self: UrlParams) => Option.Option<string>; (self: UrlParams, key: string): Option.Option<string>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "getLast",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const getLast: { (key: string): (self: UrlParams) => Option.Option<string>; (self: UrlParams, key: string): Option.Option<string>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "set",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const set: { (key: string, value: Coercible): (self: UrlParams) => UrlParams; (self: UrlParams, key: string, value: Coercible): UrlParams; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "setAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const setAll: { (input: Input): (self: UrlParams) => UrlParams; (self: UrlParams, input: Input): UrlParams; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "append",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const append: { (key: string, value: Coercible): (self: UrlParams) => UrlParams; (self: UrlParams, key: string, value: Coercible): UrlParams; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "appendAll",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const appendAll: { (input: Input): (self: UrlParams) => UrlParams; (self: UrlParams, input: Input): UrlParams; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "remove",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "export declare const remove: { (key: string): (self: UrlParams) => UrlParams; (self: UrlParams, key: string): UrlParams; }"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "fromInput",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeUrl",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toString",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "toRecord",
    "description": "Builds a `Record` containing all the key-value pairs in the given `UrlParams`\nas `string` (if only one value for a key) or a `NonEmptyArray<string>`\n(when more than one value for a key)",
    "deprecated": false,
    "examples": [
      "import { UrlParams } from \"@effect/platform\"\n\nconst urlParams = UrlParams.fromInput({ a: 1, b: true, c: \"string\", e: [1, 2, 3] })\nconst result = UrlParams.toRecord(urlParams)\n\nassert.deepStrictEqual(\n  result,\n  { \"a\": \"1\", \"b\": \"true\", \"c\": \"string\", \"e\": [\"1\", \"2\", \"3\"] }\n)"
    ],
    "since": "1.0.0",
    "category": "conversions",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": null
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "schemaStruct",
    "description": "Extract schema from all key-value pairs in the given `UrlParams`.",
    "deprecated": false,
    "examples": [
      "import { Effect, Schema } from \"effect\"\nimport { UrlParams } from \"@effect/platform\"\n\nEffect.gen(function* () {\n  const urlParams = UrlParams.fromInput({ \"a\": [10, \"string\"], \"b\": false })\n  const result = yield* UrlParams.schemaStruct(Schema.Struct({\n    a: Schema.Tuple(Schema.NumberFromString, Schema.String),\n    b: Schema.BooleanFromString\n  }))(urlParams)\n\n  assert.deepStrictEqual(result, {\n    a: [10, \"string\"],\n    b: false\n  })\n})"
    ],
    "since": "1.0.0",
    "category": "schema",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "UrlParams",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface UrlParams extends ReadonlyArray<readonly [string, string]> {}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Coercible",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Coercible = string | number | bigint | boolean | null | undefined"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "UrlParams",
      "path": [
        "src",
        "UrlParams.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Input",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export type Input =\n  | Readonly<Record<string, Coercible | ReadonlyArray<Coercible>>>\n  | Iterable<readonly [string, Coercible]>\n  | URLSearchParams"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformWorkerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const PlatformWorkerTypeId: typeof PlatformWorkerTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makePlatform",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export declare const makePlatform: <W>() => <P extends { readonly postMessage: (message: any, transfers?: any | undefined) => void; }>(options: { readonly setup: (options: { readonly worker: W; readonly scope: Scope.Scope; }) => Effect.Effect<P, WorkerError>; readonly listen: (options: { readonly port: P; readonly emit: (data: any) => void; readonly deferred: Deferred.Deferred<never, WorkerError>; readonly scope: Scope.Scope; }) => Effect.Effect<void>; }) => PlatformWorker"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformWorker",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const PlatformWorker: Context.Tag<PlatformWorker, PlatformWorker>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Spawner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const Spawner: Context.Tag<Spawner, SpawnerFn<unknown>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerManagerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const WorkerManagerTypeId: typeof WorkerManagerTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerManager",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const WorkerManager: Context.Tag<WorkerManager, WorkerManager>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeManager",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeManager: Effect.Effect<WorkerManager, never, PlatformWorker>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerManager",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerManager: Layer.Layer<WorkerManager, never, PlatformWorker>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makePool",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makePool: <I, O, E>(options: WorkerPool.Options<I>) => Effect.Effect<WorkerPool<I, O, E>, WorkerError, WorkerManager | Spawner | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makePoolLayer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makePoolLayer: <Tag, I, O, E>(tag: Context.Tag<Tag, WorkerPool<I, O, E>>, options: WorkerPool.Options<I>) => Layer.Layer<Tag, WorkerError, WorkerManager | Spawner>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeSerialized",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeSerialized: <I extends Schema.TaggedRequest.All>(options: SerializedWorker.Options<I>) => Effect.Effect<SerializedWorker<I>, WorkerError, WorkerManager | Spawner | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makePoolSerialized",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makePoolSerialized: <I extends Schema.TaggedRequest.All>(options: SerializedWorkerPool.Options<I>) => Effect.Effect<SerializedWorkerPool<I>, WorkerError, WorkerManager | Spawner | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makePoolSerializedLayer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const makePoolSerializedLayer: <Tag, I extends Schema.TaggedRequest.All>(tag: Context.Tag<Tag, SerializedWorkerPool<I>>, options: SerializedWorkerPool.Options<I>) => Layer.Layer<Tag, WorkerError, WorkerManager | Spawner>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerSpawner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerSpawner: <W = unknown>(spawner: SpawnerFn<W>) => Layer.Layer<Spawner, never, never>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "BackingWorker",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface BackingWorker<I, O> {\n  readonly send: (message: I, transfers?: ReadonlyArray<unknown>) => Effect.Effect<void, WorkerError>\n  readonly run: <A, E, R>(\n    handler: (_: BackingWorker.Message<O>) => Effect.Effect<A, E, R>\n  ) => Effect.Effect<never, E | WorkerError, R>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformWorker",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PlatformWorker {\n  readonly [PlatformWorkerTypeId]: PlatformWorkerTypeId\n  readonly spawn: <I, O>(id: number) => Effect.Effect<BackingWorker<I, O>, WorkerError, Spawner>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SerializedWorker",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SerializedWorker<I extends Schema.TaggedRequest.All> {\n  readonly id: number\n  readonly execute: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Stream.Stream<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly executeEffect: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SerializedWorkerPool",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SerializedWorkerPool<I extends Schema.TaggedRequest.All> {\n  readonly backing: Pool.Pool<SerializedWorker<I>, WorkerError>\n  readonly broadcast: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer _A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<void, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly execute: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Stream.Stream<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly executeEffect: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Spawner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Spawner {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "SpawnerFn",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SpawnerFn<W = unknown> {\n  (id: number): W\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "Worker",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Worker<I, O, E = never> {\n  readonly id: number\n  readonly execute: (message: I) => Stream.Stream<O, E | WorkerError>\n  readonly executeEffect: (message: I) => Effect.Effect<O, E | WorkerError>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerManager",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WorkerManager {\n  readonly [WorkerManagerTypeId]: WorkerManagerTypeId\n  readonly spawn: <I, O, E>(\n    options: Worker.Options<I>\n  ) => Effect.Effect<Worker<I, O, E>, WorkerError, Scope.Scope | Spawner>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerPool",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WorkerPool<I, O, E = never> {\n  readonly backing: Pool.Pool<Worker<I, O, E>, WorkerError>\n  readonly broadcast: (message: I) => Effect.Effect<void, E | WorkerError>\n  readonly execute: (message: I) => Stream.Stream<O, E | WorkerError>\n  readonly executeEffect: (message: I) => Effect.Effect<O, E | WorkerError>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformWorkerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type PlatformWorkerTypeId = typeof PlatformWorkerTypeId"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker",
      "path": [
        "src",
        "Worker.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerManagerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type WorkerManagerTypeId = typeof WorkerManagerTypeId"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkerError",
      "path": [
        "src",
        "WorkerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export declare class WorkerError"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerError",
      "path": [
        "src",
        "WorkerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const WorkerErrorTypeId: typeof WorkerErrorTypeId"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkerError",
      "path": [
        "src",
        "WorkerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "isWorkerError",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "predicates",
    "signature": null
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerError",
      "path": [
        "src",
        "WorkerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerErrorFrom",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface WorkerErrorFrom {\n  readonly _tag: \"WorkerError\"\n  readonly reason: \"spawn\" | \"decode\" | \"send\" | \"unknown\" | \"encode\"\n  readonly cause: unknown\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerError",
      "path": [
        "src",
        "WorkerError.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "WorkerErrorTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type WorkerErrorTypeId = typeof WorkerErrorTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformRunnerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export declare const PlatformRunnerTypeId: typeof PlatformRunnerTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformRunner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export declare const PlatformRunner: Context.Tag<PlatformRunner, PlatformRunner>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "run",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const run: <I, E, R, O>(process: (request: I) => Stream.Stream<O, E, R> | Effect.Effect<O, E, R>, options?: Runner.Options<I, O, E>) => Effect.Effect<never, WorkerError, PlatformRunner | R>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "make",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const make: <I, E, R, O>(process: (request: I) => Stream.Stream<O, E, R> | Effect.Effect<O, E, R>, options?: Runner.Options<I, O, E>) => Effect.Effect<void, WorkerError, PlatformRunner | R | Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layer: <I, E, R, O>(process: (request: I) => Stream.Stream<O, E, R> | Effect.Effect<O, E, R>, options?: Runner.Options<I, O, E> | undefined) => Layer.Layer<never, WorkerError, R | PlatformRunner>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "makeSerialized",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "export declare const makeSerialized: <R, I, A extends Schema.TaggedRequest.All, const Handlers extends SerializedRunner.Handlers<A>>(schema: Schema.Schema<A, I, R>, handlers: Handlers) => Effect.Effect<void, WorkerError, PlatformRunner | Scope.Scope | R | SerializedRunner.HandlersContext<Handlers>>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "layerSerialized",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "export declare const layerSerialized: <R, I, A extends Schema.TaggedRequest.All, const Handlers extends SerializedRunner.Handlers<A>>(schema: Schema.Schema<A, I, R>, handlers: Handlers) => Layer.Layer<never, WorkerError, PlatformRunner | R | SerializedRunner.HandlersContext<Handlers>>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "BackingRunner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface BackingRunner<I, O> {\n  readonly run: <A, E, R>(\n    handler: (portId: number, message: I) => Effect.Effect<A, E, R>\n  ) => Effect.Effect<never, E | WorkerError, R>\n  readonly send: (\n    portId: number,\n    message: O,\n    transfers?: ReadonlyArray<unknown>\n  ) => Effect.Effect<void>\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformRunner",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PlatformRunner {\n  readonly [PlatformRunnerTypeId]: PlatformRunnerTypeId\n  readonly start: <I, O>() => Effect.Effect<BackingRunner<I, O>, WorkerError>\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerRunner",
      "path": [
        "src",
        "WorkerRunner.ts"
      ]
    },
    "project": "@effect/platform",
    "name": "PlatformRunnerTypeId",
    "description": null,
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "export type PlatformRunnerTypeId = typeof PlatformRunnerTypeId"
  }
]