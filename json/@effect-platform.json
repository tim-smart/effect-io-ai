[
  {
    "_tag": "Constant",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "encodeUnknown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const encodeUnknown: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<A>, IE | ParseError, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L45"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "decodeUnknown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const decodeUnknown: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<any>, ParseError | IE, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L96"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "duplex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplex: { <IA, II, IR, OA, OI, OR>(options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): <R, InErr, OutErr, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<OI>, Chunk.Chunk<II>, OutErr, ParseError | InErr, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; <R, InErr, OutErr, OutDone, InDone, IA, II, IR, OA, OI, OR>(self: Channel.Channel<Chunk.Chunk<OI>, Chunk.Chunk<II>, OutErr, ParseError | InErr, OutDone, InDone, R>, options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L112"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "duplexUnknown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplexUnknown: { <IA, II, IR, OA, OI, OR>(options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): <R, InErr, OutErr, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<any>, OutErr, ParseError | InErr, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; <R, InErr, OutErr, OutDone, InDone, IA, II, IR, OA, OI, OR>(self: Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<any>, OutErr, ParseError | InErr, OutDone, InDone, R>, options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L193"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "encode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const encode: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<I>, Chunk.Chunk<A>, IE | ParseError, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "ChannelSchema.ts",
      "path": "src/ChannelSchema.ts"
    },
    "project": "@effect/platform",
    "name": "decode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const decode: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<I>, ParseError | IE, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/ChannelSchema.ts#L61"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "CommandTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const CommandTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L20"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "isCommand",
    "description": "Returns `true` if the specified value is a `Command`, otherwise returns\n`false`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isCommand: (u: unknown) => u is Command",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L120"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "env",
    "description": "Specify the environment variables that will be used when running this command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const env: { (environment: Record<string, string | undefined>): (self: Command) => Command; (self: Command, environment: Record<string, string | undefined>): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L128"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "exitCode",
    "description": "Returns the exit code of the command after the process has completed\nexecution.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const exitCode: (self: Command) => Effect<ExitCode, PlatformError, CommandExecutor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L140"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "feed",
    "description": "Feed a string to standard input (default encoding of UTF-8).",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const feed: { (input: string): (self: Command) => Command; (self: Command, input: string): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L148"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "flatten",
    "description": "Flatten this command to a non-empty array of standard commands.\n\nFor a `StandardCommand`, this simply returns a `1` element array\nFor a `PipedCommand`, all commands in the pipe will be extracted out into\na array from left to right",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const flatten: (self: Command) => NonEmptyReadonlyArray<StandardCommand>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L163"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "lines",
    "description": "Runs the command returning the output as an array of lines with the specified\nencoding.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const lines: (command: Command, encoding?: string) => Effect<Array<string>, PlatformError, CommandExecutor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L172"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "Create a command with the specified process name and an optional list of\narguments.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (command: string, ...args: Array<string>) => Command",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L182"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "pipeTo",
    "description": "Pipe one command to another command from left to right.\n\nConceptually, the equivalent of piping one shell command to another:\n\n```sh\ncommand1 | command2\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const pipeTo: { (into: Command): (self: Command) => Command; (self: Command, into: Command): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L196"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "runInShell",
    "description": "Allows for specifying whether or not a `Command` should be run inside a\nshell.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const runInShell: { (shell: string | boolean): (self: Command) => Command; (self: Command, shell: string | boolean): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L208"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "start",
    "description": "Start running the command and return a handle to the running process.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const start: (command: Command) => Effect<Process, PlatformError, CommandExecutor | Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L219"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "stream",
    "description": "Start running the command and return the output as a `Stream`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const stream: (command: Command) => Stream<Uint8Array, PlatformError, CommandExecutor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L227"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "streamLines",
    "description": "Runs the command returning the output as an stream of lines with the\nspecified encoding.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const streamLines: (command: Command, encoding?: string) => Stream<string, PlatformError, CommandExecutor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L236"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "string",
    "description": "Runs the command returning the entire output as a string with the\nspecified encoding.\n\nIf an encoding is not specified, the encoding will default to `utf-8`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "execution",
    "signature": "declare const string: { (encoding?: string): (command: Command) => Effect<string, PlatformError, CommandExecutor>; (command: Command, encoding?: string): Effect<string, PlatformError, CommandExecutor>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L248"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "stderr",
    "description": "Specify the standard error stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const stderr: { (stderr: Command.Output): (self: Command) => Command; (self: Command, stderr: Command.Output): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L259"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "stdin",
    "description": "Specify the standard input stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const stdin: { (stdin: Command.Input): (self: Command) => Command; (self: Command, stdin: Command.Input): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L270"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "stdout",
    "description": "Specify the standard output stream for a command.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const stdout: { (stdout: Command.Output): (self: Command) => Command; (self: Command, stdout: Command.Output): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L281"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "workingDirectory",
    "description": "Set the working directory that will be used when this command will be run.\n\nFor piped commands, the working directory of each command will be set to the\nspecified working directory.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const workingDirectory: { (cwd: string): (self: Command) => Command; (self: Command, cwd: string): Command; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L295"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "StandardCommand",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface StandardCommand extends Command.Proto {\n  readonly _tag: \"StandardCommand\"\n  readonly command: string\n  readonly args: ReadonlyArray<string>\n  readonly env: HashMap<string, string>\n  readonly cwd: Option<string>\n  readonly shell: boolean | string\n  readonly stdin: Command.Input\n  readonly stdout: Command.Output\n  readonly stderr: Command.Output\n  readonly gid: Option<number>\n  readonly uid: Option<number>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L89"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "PipedCommand",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PipedCommand extends Command.Proto {\n  readonly _tag: \"PipedCommand\"\n  readonly left: Command\n  readonly right: Command\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L107"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "CommandTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type CommandTypeId = typeof CommandTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "Command",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Command = StandardCommand | PipedCommand",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L31"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "CommandInput",
    "description": "Configures the pipe that is established between the parent and child\nprocesses' `stdin` stream.\n\nDefaults to \"pipe\"",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type CommandInput = \"inherit\" | \"pipe\" | Stream<Uint8Array, PlatformError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L72"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "CommandOutput",
    "description": "Configures the pipes that are established between the parent and child\nprocesses `stderr` and `stdout` streams.\n\nDefaults to \"pipe\"",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type CommandOutput = \"inherit\" | \"pipe\" | Sink<Uint8Array, Uint8Array>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L83"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "Command.Proto",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Proto extends Pipeable, Inspectable {\n    readonly [CommandTypeId]: CommandTypeId\n    readonly _tag: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L41"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "Command.Input",
    "description": "Configures the pipe that is established between the parent and child\nprocesses' `stdin` stream.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Input = CommandInput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L52"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Command.ts",
      "path": "src/Command.ts"
    },
    "project": "@effect/platform",
    "name": "Command.Output",
    "description": "Configures the pipes that are established between the parent and child\nprocesses `stderr` and `stdout` streams.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Output = CommandOutput",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Command.ts#L60"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "CommandExecutor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const CommandExecutor: Tag<CommandExecutor, CommandExecutor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L70"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ProcessTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const ProcessTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L76"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ExitCode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const ExitCode: Brand.Brand.Constructor<ExitCode>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L193"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ProcessId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const ProcessId: Brand.Brand.Constructor<ProcessId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L199"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "makeExecutor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeExecutor: (start: (command: Command) => Effect<Process, PlatformError, Scope>) => CommandExecutor",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L205"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "CommandExecutor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface CommandExecutor {\n  readonly [TypeId]: TypeId\n\n  /**\n   * Returns the exit code of the command after the process has completed\n   * execution.\n   */\n  readonly exitCode: (command: Command) => Effect<ExitCode, PlatformError>\n  /**\n   * Start running the command and return a handle to the running process.\n   */\n  readonly start: (command: Command) => Effect<Process, PlatformError, Scope>\n  /**\n   * Runs the command returning the entire output as a string with the\n   * specified encoding.\n   *\n   * If an encoding is not specified, the encoding will default to `utf-8`.\n   */\n  readonly string: (command: Command, encoding?: string) => Effect<string, PlatformError>\n  /**\n   * Runs the command returning the entire output as an array of lines.\n   *\n   * If an encoding is not specified, the encoding will default to `utf-8`.\n   */\n  readonly lines: (command: Command, encoding?: string) => Effect<Array<string>, PlatformError>\n  /**\n   * Runs the command returning the output as a `Stream`.\n   */\n  readonly stream: (command: Command) => Stream<Uint8Array, PlatformError>\n  /**\n   * Runs the command returning the output as a `Stream` of lines.\n   */\n  readonly streamLines: (command: Command, encoding?: string) => Stream<string, PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L31"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "Process",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Process extends Inspectable {\n  readonly [ProcessTypeId]: ProcessTypeId\n  /**\n   * The process identifier.\n   */\n  readonly pid: ProcessId\n  /**\n   * Waits for the process to exit and returns the `ExitCode` of the command\n   * that was run.\n   */\n  readonly exitCode: Effect<ExitCode, PlatformError>\n  /**\n   * Returns `true` if the process is still running, otherwise returns `false`.\n   */\n  readonly isRunning: Effect<boolean, PlatformError>\n  /**\n   * Kills the running process with the provided signal.\n   *\n   * If no signal is provided, the signal will defaults to `SIGTERM`.\n   */\n  readonly kill: (signal?: Signal) => Effect<void, PlatformError>\n  /**\n   * The standard error stream of the process.\n   */\n  readonly stderr: Stream<Uint8Array, PlatformError>\n  /**\n   * The standard input sink of the process.\n   */\n  readonly stdin: Sink<void, Uint8Array, never, PlatformError>\n  /**\n   * The standard output stream of the process.\n   */\n  readonly stdout: Stream<Uint8Array, PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L88"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ProcessTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "type ProcessTypeId = typeof ProcessTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L82"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ProcessId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ProcessId = Brand.Branded<number, \"ProcessId\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L127"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "Signal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Signal = | \"SIGABRT\"\n  | \"SIGALRM\"\n  | \"SIGBUS\"\n  | \"SIGCHLD\"\n  | \"SIGCONT\"\n  | \"SIGFPE\"\n  | \"SIGHUP\"\n  | \"SIGILL\"\n  | \"SIGINT\"\n  | \"SIGIO\"\n  | \"SIGIOT\"\n  | \"SIGKILL\"\n  | \"SIGPIPE\"\n  | \"SIGPOLL\"\n  | \"SIGPROF\"\n  | \"SIGPWR\"\n  | \"SIGQUIT\"\n  | \"SIGSEGV\"\n  | \"SIGSTKFLT\"\n  | \"SIGSTOP\"\n  | \"SIGSYS\"\n  | \"SIGTERM\"\n  | \"SIGTRAP\"\n  | \"SIGTSTP\"\n  | \"SIGTTIN\"\n  | \"SIGTTOU\"\n  | \"SIGUNUSED\"\n  | \"SIGURG\"\n  | \"SIGUSR1\"\n  | \"SIGUSR2\"\n  | \"SIGVTALRM\"\n  | \"SIGWINCH\"\n  | \"SIGXCPU\"\n  | \"SIGXFSZ\"\n  | \"SIGBREAK\"\n  | \"SIGLOST\"\n  | \"SIGINFO\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L144"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "ExitCode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExitCode = Brand.Branded<number, \"ExitCode\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L187"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "CommandExecutor.ts",
      "path": "src/CommandExecutor.ts"
    },
    "project": "@effect/platform",
    "name": "Process.Id",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Id = ProcessId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/CommandExecutor.ts#L137"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "CookiesError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class CookiesError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L92"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "CookieTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const CookieTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L46"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L80"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "description": "An empty Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: Cookies",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L296"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "setCookie",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setCookie: { (cookie: Cookie): (self: Cookies) => Cookies; (self: Cookies, cookie: Cookie): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L379"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "setAllCookie",
    "description": "Add multiple cookies to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setAllCookie: { (cookies: Iterable<Cookie>): (self: Cookies) => Cookies; (self: Cookies, cookies: Iterable<Cookie>): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L401"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "merge",
    "description": "Combine two Cookies objects, removing duplicates from the first",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const merge: { (that: Cookies): (self: Cookies) => Cookies; (self: Cookies, that: Cookies): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L421"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "remove",
    "description": "Remove a cookie by name",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const remove: { (name: string): (self: Cookies) => Cookies; (self: Cookies, name: string): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L439"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "description": "Get a cookie from a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const get: { (name: string): (self: Cookies) => Option.Option<Cookie>; (self: Cookies, name: string): Option.Option<Cookie>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L453"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "getValue",
    "description": "Get a cookie from a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const getValue: { (name: string): (self: Cookies) => Option.Option<string>; (self: Cookies, name: string): Option.Option<string>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L467"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "set",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const set: { (name: string, value: string, options?: Cookie[\"options\"]): (self: Cookies) => Either.Either<Cookies, CookiesError>; (self: Cookies, name: string, value: string, options?: Cookie[\"options\"]): Either.Either<Cookies, CookiesError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L482"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeSet",
    "description": "Add a cookie to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const unsafeSet: { (name: string, value: string, options?: Cookie[\"options\"]): (self: Cookies) => Cookies; (self: Cookies, name: string, value: string, options?: Cookie[\"options\"]): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L509"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "setAll",
    "description": "Add multiple cookies to a Cookies object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setAll: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: Cookies) => Either.Either<Cookies, CookiesError>; (self: Cookies, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Either.Either<Cookies, CookiesError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L537"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeSetAll",
    "description": "Add multiple cookies to a Cookies object, throwing an error if invalid",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const unsafeSetAll: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: Cookies) => Cookies; (self: Cookies, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Cookies; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L569"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "makeCookie",
    "description": "Create a new cookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeCookie: (name: string, value: string, options?: Cookie[\"options\"] | undefined) => Either.Either<Cookie, CookiesError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L326"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "serializeCookie",
    "description": "Serialize a cookie into a string\n\nAdapted from https://github.com/fastify/fastify-cookie under MIT License",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const serializeCookie: (self: Cookie) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L593"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "parseHeader",
    "description": "Parse a cookie header into a record of key-value pairs\n\nAdapted from https://github.com/fastify/fastify-cookie under MIT License",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": "declare const parseHeader: (header: string) => Record<string, string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L704"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "isCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isCookies: (u: unknown) => u is Cookies",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L31"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "fromReadonlyRecord",
    "description": "Create a Cookies object from an Iterable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromReadonlyRecord: (cookies: Record.ReadonlyRecord<string, Cookie>) => Cookies",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L120"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "fromIterable",
    "description": "Create a Cookies object from an Iterable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromIterable: (cookies: Iterable<Cookie>) => Cookies",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L132"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "fromSetCookie",
    "description": "Create a Cookies object from a set of Set-Cookie headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromSetCookie: (headers: Iterable<string> | string) => Cookies",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L146"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "isEmpty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isEmpty: (self: Cookies) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L302"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeMakeCookie",
    "description": "Create a new cookie, throwing an error if invalid",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unsafeMakeCookie: (name: string, value: string, options?: Cookie[\"options\"] | undefined) => Cookie",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L367"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "toCookieHeader",
    "description": "Serialize a Cookies object into a Cookie header",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const toCookieHeader: (self: Cookies) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L669"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "toRecord",
    "description": "To record",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const toRecord: (self: Cookies) => Record<string, string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L678"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "toSetCookieHeaders",
    "description": "Serialize a Cookies object into Headers object containing one or more Set-Cookie headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const toSetCookieHeaders: (self: Cookies) => Array<string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L694"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "Cookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Cookies extends Pipeable, Inspectable.Inspectable {\n  readonly [TypeId]: TypeId\n  readonly cookies: Record.ReadonlyRecord<string, Cookie>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L37"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "Cookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "cookie",
    "signature": "export interface Cookie extends Inspectable.Inspectable {\n  readonly [CookieTypeId]: CookieTypeId\n  readonly name: string\n  readonly value: string\n  readonly valueEncoded: string\n  readonly options?: {\n    readonly domain?: string | undefined\n    readonly expires?: Date | undefined\n    readonly maxAge?: Duration.DurationInput | undefined\n    readonly path?: string | undefined\n    readonly priority?: \"low\" | \"medium\" | \"high\" | undefined\n    readonly httpOnly?: boolean | undefined\n    readonly secure?: boolean | undefined\n    readonly partitioned?: boolean | undefined\n    readonly sameSite?: \"lax\" | \"strict\" | \"none\" | undefined\n  } | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L58"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "CookieTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type CookieTypeId = typeof CookieTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L52"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Cookies.ts",
      "path": "src/Cookies.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type ErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Cookies.ts#L86"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Effectify.ts",
      "path": "src/Effectify.ts"
    },
    "project": "@effect/platform",
    "name": "effectify",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const effectify: { <F extends (...args: Array<any>) => any>(fn: F): Effectify<F, EffectifyError<F>>; <F extends (...args: Array<any>) => any, E>(fn: F, onError: (error: EffectifyError<F>, args: Parameters<F>) => E): Effectify<F, E>; <F extends (...args: Array<any>) => any, E, E2>(fn: F, onError: (error: EffectifyError<F>, args: Parameters<F>) => E, onSyncError: (error: unknown, args: Parameters<F>) => E2): Effectify<F, E | E2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Effectify.ts#L246"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Effectify.ts",
      "path": "src/Effectify.ts"
    },
    "project": "@effect/platform",
    "name": "Effectify",
    "description": "Converts a callback-based function to a function that returns an `Effect`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Effectify<T, E> = T extends {\n  (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n  (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n  (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n  (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n  (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n  (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n  (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n  (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n  (...args: ArgsWithCallback<infer Args9, infer _E9, infer A9>): infer _R9\n  (...args: ArgsWithCallback<infer Args10, infer _E10, infer A10>): infer _R10\n} ? {\n    (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n    (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n    (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n    (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n    (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n    (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n    (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n    (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n    (...args: Args9): Effect.Effect<WithoutNull<A9>, E>\n    (...args: Args10): Effect.Effect<WithoutNull<A10>, E>\n  }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n    (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n    (...args: ArgsWithCallback<infer Args9, infer _E9, infer A9>): infer _R9\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n      (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n      (...args: Args9): Effect.Effect<WithoutNull<A9>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n    (...args: ArgsWithCallback<infer Args8, infer _E8, infer A8>): infer _R8\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n      (...args: Args8): Effect.Effect<WithoutNull<A8>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n    (...args: ArgsWithCallback<infer Args7, infer _E7, infer A7>): infer _R7\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n      (...args: Args7): Effect.Effect<WithoutNull<A7>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n    (...args: ArgsWithCallback<infer Args6, infer _E6, infer A6>): infer _R6\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n      (...args: Args6): Effect.Effect<WithoutNull<A6>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n    (...args: ArgsWithCallback<infer Args5, infer _E5, infer A5>): infer _R5\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n      (...args: Args5): Effect.Effect<WithoutNull<A5>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n    (...args: ArgsWithCallback<infer Args4, infer _E4, infer A4>): infer _R4\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n      (...args: Args4): Effect.Effect<WithoutNull<A4>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n    (...args: ArgsWithCallback<infer Args3, infer _E3, infer A3>): infer _R3\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n      (...args: Args3): Effect.Effect<WithoutNull<A3>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n    (...args: ArgsWithCallback<infer Args2, infer _E2, infer A2>): infer _R2\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n      (...args: Args2): Effect.Effect<WithoutNull<A2>, E>\n    }\n  : T extends {\n    (...args: ArgsWithCallback<infer Args1, infer _E1, infer A1>): infer _R1\n  } ? {\n      (...args: Args1): Effect.Effect<WithoutNull<A1>, E>\n    }\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Effectify.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Effectify.ts",
      "path": "src/Effectify.ts"
    },
    "project": "@effect/platform",
    "name": "EffectifyError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "util",
    "signature": "type EffectifyError<T> = T extends {\n  (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n  (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n  (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n  (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n  (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n  (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n  (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n  (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n  (...args: ArgsWithCallback<infer _Args9, infer E9, infer _A9>): infer _R9\n  (...args: ArgsWithCallback<infer _Args10, infer E10, infer _A10>): infer _R10\n} ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8 | E9 | E10>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n    (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n    (...args: ArgsWithCallback<infer _Args9, infer E9, infer _A9>): infer _R9\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8 | E9>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n    (...args: ArgsWithCallback<infer _Args8, infer E8, infer _A8>): infer _R8\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n    (...args: ArgsWithCallback<infer _Args7, infer E7, infer _A7>): infer _R7\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6 | E7>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n    (...args: ArgsWithCallback<infer _Args6, infer E6, infer _A6>): infer _R6\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5 | E6>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n    (...args: ArgsWithCallback<infer _Args5, infer E5, infer _A5>): infer _R5\n  } ? NonNullable<E1 | E2 | E3 | E4 | E5>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n    (...args: ArgsWithCallback<infer _Args4, infer E4, infer _A4>): infer _R4\n  } ? NonNullable<E1 | E2 | E3 | E4>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n    (...args: ArgsWithCallback<infer _Args3, infer E3, infer _A3>): infer _R3\n  } ? NonNullable<E1 | E2 | E3>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n    (...args: ArgsWithCallback<infer _Args2, infer E2, infer _A2>): infer _R2\n  } ? NonNullable<E1 | E2>\n  : T extends {\n    (...args: ArgsWithCallback<infer _Args1, infer E1, infer _A1>): infer _R1\n  } ? NonNullable<E1>\n  : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Effectify.ts#L166"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "BadArgument",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare class BadArgument",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L69"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "SystemError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class SystemError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L116"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L14"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "Module",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const Module: Schema.Literal<[\"Clipboard\", \"Command\", \"FileSystem\", \"KeyValueStore\", \"Path\", \"Stream\", \"Terminal\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L55"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "SystemErrorReason",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Model",
    "signature": "declare const SystemErrorReason: Schema.Literal<[\"AlreadyExists\", \"BadResource\", \"Busy\", \"InvalidData\", \"NotFound\", \"PermissionDenied\", \"TimedOut\", \"UnexpectedEof\", \"Unknown\", \"WouldBlock\", \"WriteZero\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L92"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "declare const PlatformError: Schema.Union<[typeof BadArgument, typeof SystemError]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L150"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "isPlatformError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isPlatformError: (u: unknown) => u is PlatformError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L26"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "TypeIdError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare const TypeIdError: <const TypeId extends symbol, const Tag extends string>(typeId: TypeId, tag: Tag) => new <A extends Record<string, any>>(args: Simplify<A>) => Cause.YieldableError & Record<TypeId, TypeId> & { readonly _tag: Tag; } & Readonly<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L32"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "SystemErrorReason",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Model",
    "signature": "type SystemErrorReason = typeof SystemErrorReason.Type",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L110"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Error.ts",
      "path": "src/Error.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Models",
    "signature": "type PlatformError = BadArgument | SystemError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Error.ts#L144"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "toString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "convertions",
    "signature": "declare const toString: (self: Etag) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L39"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "GeneratorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const GeneratorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L45"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "Generator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Generator: Context.Tag<Generator, Generator>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L67"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer<Generator, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L73"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "layerWeak",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWeak: Layer<Generator, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L79"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "Weak",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Weak {\n  readonly _tag: \"Weak\"\n  readonly value: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L21"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "Strong",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Strong {\n  readonly _tag: \"Strong\"\n  readonly value: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L30"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "Generator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Generator {\n  readonly [GeneratorTypeId]: GeneratorTypeId\n  readonly fromFileInfo: (info: FileSystem.File.Info) => Effect.Effect<Etag>\n  readonly fromFileWeb: (file: Body.HttpBody.FileLike) => Effect.Effect<Etag>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L57"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "Etag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Etag = Weak | Strong",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L15"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Etag.ts",
      "path": "src/Etag.ts"
    },
    "project": "@effect/platform",
    "name": "GeneratorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type GeneratorTypeId = typeof GeneratorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Etag.ts#L51"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FetchHttpClient.ts",
      "path": "src/FetchHttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "Fetch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class Fetch",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FetchHttpClient.ts#L13"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FetchHttpClient.ts",
      "path": "src/FetchHttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "RequestInit",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class RequestInit",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FetchHttpClient.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FetchHttpClient.ts",
      "path": "src/FetchHttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<HttpClient, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FetchHttpClient.ts#L25"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchBackend",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "file watcher",
    "signature": "declare class WatchBackend",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L627"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "Size",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const Size: (bytes: SizeInput) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L274"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "KiB",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const KiB: (n: number) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L280"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "MiB",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const MiB: (n: number) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L286"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "GiB",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const GiB: (n: number) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L292"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "TiB",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const TiB: (n: number) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L298"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "PiB",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "declare const PiB: (n: number) => Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L304"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "FileSystem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "declare const FileSystem: Tag<FileSystem, FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L439"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const make: (impl: Omit<FileSystem, \"exists\" | \"readFileString\" | \"stream\" | \"sink\" | \"writeFileString\">) => FileSystem",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L445"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "makeNoop",
    "description": "Create a no-op file system that can be used for testing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const makeNoop: (fileSystem: Partial<FileSystem>) => FileSystem",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L455"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "layerNoop",
    "description": "Create a no-op file system that can be used for testing.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerNoop: (fileSystem: Partial<FileSystem>) => Layer<FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L463"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "FileTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const FileTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L469"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "FileDescriptor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const FileDescriptor: Brand.Brand.Constructor<File.Descriptor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L552"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEventCreate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const WatchEventCreate: Data.Case.Constructor<WatchEvent.Create, \"_tag\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L603"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEventUpdate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const WatchEventUpdate: Data.Case.Constructor<WatchEvent.Update, \"_tag\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L611"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEventRemove",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructor",
    "signature": "declare const WatchEventRemove: Data.Case.Constructor<WatchEvent.Remove, \"_tag\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L619"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "isFile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guard",
    "signature": "declare const isFile: (u: unknown) => u is File",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L483"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "FileSystem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface FileSystem {\n  /**\n   * Check if a file can be accessed.\n   * You can optionally specify the level of access to check for.\n   */\n  readonly access: (\n    path: string,\n    options?: AccessFileOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Copy a file or directory from `fromPath` to `toPath`.\n   *\n   * Equivalent to `cp -r`.\n   */\n  readonly copy: (\n    fromPath: string,\n    toPath: string,\n    options?: CopyOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Copy a file from `fromPath` to `toPath`.\n   */\n  readonly copyFile: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the permissions of a file.\n   */\n  readonly chmod: (\n    path: string,\n    mode: number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the owner and group of a file.\n   */\n  readonly chown: (\n    path: string,\n    uid: number,\n    gid: number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Check if a path exists.\n   */\n  readonly exists: (\n    path: string\n  ) => Effect.Effect<boolean, PlatformError>\n  /**\n   * Create a hard link from `fromPath` to `toPath`.\n   */\n  readonly link: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a directory at `path`. You can optionally specify the mode and\n   * whether to recursively create nested directories.\n   */\n  readonly makeDirectory: (\n    path: string,\n    options?: MakeDirectoryOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a temporary directory.\n   *\n   * By default the directory will be created inside the system's default\n   * temporary directory, but you can specify a different location by setting\n   * the `directory` option.\n   *\n   * You can also specify a prefix for the directory name by setting the\n   * `prefix` option.\n   */\n  readonly makeTempDirectory: (\n    options?: MakeTempDirectoryOptions\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Create a temporary directory inside a scope.\n   *\n   * Functionally equivalent to `makeTempDirectory`, but the directory will be\n   * automatically deleted when the scope is closed.\n   */\n  readonly makeTempDirectoryScoped: (\n    options?: MakeTempDirectoryOptions\n  ) => Effect.Effect<string, PlatformError, Scope>\n  /**\n   * Create a temporary file.\n   * The directory creation is functionally equivalent to `makeTempDirectory`.\n   * The file name will be a randomly generated string.\n   */\n  readonly makeTempFile: (\n    options?: MakeTempFileOptions\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Create a temporary file inside a scope.\n   *\n   * Functionally equivalent to `makeTempFile`, but the file will be\n   * automatically deleted when the scope is closed.\n   */\n  readonly makeTempFileScoped: (\n    options?: MakeTempFileOptions\n  ) => Effect.Effect<string, PlatformError, Scope>\n  /**\n   * Open a file at `path` with the specified `options`.\n   *\n   * The file handle will be automatically closed when the scope is closed.\n   */\n  readonly open: (\n    path: string,\n    options?: OpenFileOptions\n  ) => Effect.Effect<File, PlatformError, Scope>\n  /**\n   * List the contents of a directory.\n   *\n   * You can recursively list the contents of nested directories by setting the\n   * `recursive` option.\n   */\n  readonly readDirectory: (\n    path: string,\n    options?: ReadDirectoryOptions\n  ) => Effect.Effect<Array<string>, PlatformError>\n  /**\n   * Read the contents of a file.\n   */\n  readonly readFile: (\n    path: string\n  ) => Effect.Effect<Uint8Array, PlatformError>\n  /**\n   * Read the contents of a file.\n   */\n  readonly readFileString: (\n    path: string,\n    encoding?: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Read the destination of a symbolic link.\n   */\n  readonly readLink: (\n    path: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Resolve a path to its canonicalized absolute pathname.\n   */\n  readonly realPath: (\n    path: string\n  ) => Effect.Effect<string, PlatformError>\n  /**\n   * Remove a file or directory.\n   */\n  readonly remove: (\n    path: string,\n    options?: RemoveOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Rename a file or directory.\n   */\n  readonly rename: (\n    oldPath: string,\n    newPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Create a writable `Sink` for the specified `path`.\n   */\n  readonly sink: (\n    path: string,\n    options?: SinkOptions\n  ) => Sink<void, Uint8Array, never, PlatformError>\n  /**\n   * Get information about a file at `path`.\n   */\n  readonly stat: (\n    path: string\n  ) => Effect.Effect<File.Info, PlatformError>\n  /**\n   * Create a readable `Stream` for the specified `path`.\n   *\n   * Changing the `bufferSize` option will change the internal buffer size of\n   * the stream. It defaults to `4`.\n   *\n   * The `chunkSize` option will change the size of the chunks emitted by the\n   * stream. It defaults to 64kb.\n   *\n   * Changing `offset` and `bytesToRead` will change the offset and the number\n   * of bytes to read from the file.\n   */\n  readonly stream: (\n    path: string,\n    options?: StreamOptions\n  ) => Stream<Uint8Array, PlatformError>\n  /**\n   * Create a symbolic link from `fromPath` to `toPath`.\n   */\n  readonly symlink: (\n    fromPath: string,\n    toPath: string\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Truncate a file to a specified length. If the `length` is not specified,\n   * the file will be truncated to length `0`.\n   */\n  readonly truncate: (\n    path: string,\n    length?: SizeInput\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Change the file system timestamps of the file at `path`.\n   */\n  readonly utimes: (\n    path: string,\n    atime: Date | number,\n    mtime: Date | number\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Watch a directory or file for changes\n   */\n  readonly watch: (path: string) => Stream<WatchEvent, PlatformError>\n  /**\n   * Write data to a file at `path`.\n   */\n  readonly writeFile: (\n    path: string,\n    data: Uint8Array,\n    options?: WriteFileOptions\n  ) => Effect.Effect<void, PlatformError>\n  /**\n   * Write a string to a file at `path`.\n   */\n  readonly writeFileString: (\n    path: string,\n    data: string,\n    options?: WriteFileStringOptions\n  ) => Effect.Effect<void, PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L21"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "AccessFileOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface AccessFileOptions {\n  readonly ok?: boolean\n  readonly readable?: boolean\n  readonly writable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L326"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "MakeDirectoryOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeDirectoryOptions {\n  readonly recursive?: boolean\n  readonly mode?: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L336"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "CopyOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface CopyOptions {\n  readonly overwrite?: boolean\n  readonly preserveTimestamps?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L345"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "MakeTempDirectoryOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeTempDirectoryOptions {\n  readonly directory?: string\n  readonly prefix?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L354"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "MakeTempFileOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface MakeTempFileOptions {\n  readonly directory?: string\n  readonly prefix?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L363"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "OpenFileOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface OpenFileOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L372"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "ReadDirectoryOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface ReadDirectoryOptions {\n  readonly recursive?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L381"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "RemoveOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface RemoveOptions {\n  /**\n   * When `true`, you can recursively remove nested directories.\n   */\n  readonly recursive?: boolean\n  /**\n   * When `true`, exceptions will be ignored if `path` does not exist.\n   */\n  readonly force?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L389"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "SinkOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface SinkOptions extends OpenFileOptions {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L404"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "StreamOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface StreamOptions {\n  readonly bufferSize?: number\n  readonly bytesToRead?: SizeInput\n  readonly chunkSize?: SizeInput\n  readonly offset?: SizeInput\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L410"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WriteFileOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface WriteFileOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L421"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WriteFileStringOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "options",
    "signature": "export interface WriteFileStringOptions {\n  readonly flag?: OpenFlag\n  readonly mode?: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L430"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "File",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface File {\n  readonly [FileTypeId]: FileTypeId\n  readonly fd: File.Descriptor\n  readonly stat: Effect.Effect<File.Info, PlatformError>\n  readonly seek: (offset: SizeInput, from: SeekMode) => Effect.Effect<void>\n  readonly sync: Effect.Effect<void, PlatformError>\n  readonly read: (buffer: Uint8Array) => Effect.Effect<Size, PlatformError>\n  readonly readAlloc: (size: SizeInput) => Effect.Effect<Option<Uint8Array>, PlatformError>\n  readonly truncate: (length?: SizeInput) => Effect.Effect<void, PlatformError>\n  readonly write: (buffer: Uint8Array) => Effect.Effect<Size, PlatformError>\n  readonly writeAll: (buffer: Uint8Array) => Effect.Effect<void, PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L489"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "Size",
    "description": "Represents a size in bytes.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "type Size = Brand.Branded<bigint, \"Size\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L260"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "SizeInput",
    "description": "Represents a size in bytes.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "sizes",
    "signature": "type SizeInput = bigint | number | Size",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L268"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "OpenFlag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type OpenFlag = | \"r\"\n  | \"r+\"\n  | \"w\"\n  | \"wx\"\n  | \"w+\"\n  | \"wx+\"\n  | \"a\"\n  | \"ax\"\n  | \"a+\"\n  | \"ax+\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L310"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "FileTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type FileTypeId = typeof FileTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L477"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "SeekMode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type SeekMode = \"start\" | \"current\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L558"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type WatchEvent = WatchEvent.Create | WatchEvent.Update | WatchEvent.Remove",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L564"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "File.Info",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Info {\n    readonly type: Type\n    readonly mtime: Option<Date>\n    readonly atime: Option<Date>\n    readonly birthtime: Option<Date>\n    readonly dev: number\n    readonly ino: Option<number>\n    readonly mode: number\n    readonly nlink: Option<number>\n    readonly uid: Option<number>\n    readonly gid: Option<number>\n    readonly rdev: Option<number>\n    readonly size: Size\n    readonly blksize: Option<Size>\n    readonly blocks: Option<number>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L530"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "File.Descriptor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Descriptor = Brand.Branded<number, \"FileDescriptor\">",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L510"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "File.Type",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Type = | \"File\"\n    | \"Directory\"\n    | \"SymbolicLink\"\n    | \"BlockDevice\"\n    | \"CharacterDevice\"\n    | \"FIFO\"\n    | \"Socket\"\n    | \"Unknown\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L516"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEvent.Create",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Create {\n    readonly _tag: \"Create\"\n    readonly path: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L575"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEvent.Update",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Update {\n    readonly _tag: \"Update\"\n    readonly path: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L584"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "FileSystem.ts",
      "path": "src/FileSystem.ts"
    },
    "project": "@effect/platform",
    "name": "WatchEvent.Remove",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Remove {\n    readonly _tag: \"Remove\"\n    readonly path: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/FileSystem.ts#L593"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "HeadersTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const HeadersTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "schemaFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const schemaFromSelf: Schema.Schema<Headers, Headers, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L61"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "schema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const schema: Schema.Schema<Headers, Record.ReadonlyRecord<string, string>, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L70"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: Headers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L89"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "has",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const has: { (key: string): (self: Headers) => boolean; (self: Headers, key: string): boolean; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L127"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const get: { (key: string): (self: Headers) => Option.Option<string>; (self: Headers, key: string): Option.Option<string>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L139"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "set",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const set: { (key: string, value: string): (self: Headers) => Headers; (self: Headers, key: string, value: string): Headers; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L151"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "setAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setAll: { (headers: Input): (self: Headers) => Headers; (self: Headers, headers: Input): Headers; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L167"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "merge",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const merge: { (headers: Headers): (self: Headers) => Headers; (self: Headers, headers: Headers): Headers; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L183"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "remove",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const remove: { (key: string | RegExp | ReadonlyArray<string | RegExp>): (self: Headers) => Headers; (self: Headers, key: string | RegExp | ReadonlyArray<string | RegExp>): Headers; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L199"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "redact",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const redact: { (key: string | RegExp | ReadonlyArray<string | RegExp>): (self: Headers) => Record<string, string | Redacted.Redacted>; (self: Headers, key: string | RegExp | ReadonlyArray<string | RegExp>): Record<string, string | Redacted.Redacted>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L235"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "currentRedactedNames",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const currentRedactedNames: FiberRef.FiberRef<ReadonlyArray<string | RegExp>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L279"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "isHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isHeaders: (u: unknown) => u is Headers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L33"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "fromInput",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromInput: (input?: Input) => Headers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L95"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeFromRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unsafeFromRecord: (input: Record.ReadonlyRecord<string, string>) => Headers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L120"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "Headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Headers extends Redactable {\n  readonly [HeadersTypeId]: HeadersTypeId\n  readonly [key: string]: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L39"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "HeadersTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type HeadersTypeId = typeof HeadersTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Headers.ts",
      "path": "src/Headers.ts"
    },
    "project": "@effect/platform",
    "name": "Input",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Input = | Record.ReadonlyRecord<string, string | ReadonlyArray<string> | undefined>\n  | Iterable<readonly [string, string]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Headers.ts#L81"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "Api",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class Api",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L114"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "AdditionalSchemas",
    "description": "Adds additional schemas to components/schemas.\nThe provided schemas must have a `identifier` annotation.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class AdditionalSchemas",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L452"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L23"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpApi",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isHttpApi: (u: unknown) => u is HttpApi.Any",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "An `HttpApi` is a collection of `HttpApiEndpoint`s. You can use an `HttpApi` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.make` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <const Id extends string>(identifier: Id) => HttpApi<Id, never, HttpApiDecodeError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L261"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "reflect",
    "description": "Extract metadata from an `HttpApi`, which can be used to generate documentation\nor other tooling.\n\nSee the `OpenApi` & `HttpApiClient` modules for examples of how to use this function.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const reflect: <Id extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, Error, R>(self: HttpApi<Id, Groups, Error, R>, options: { readonly predicate?: Predicate.Predicate<{ readonly endpoint: HttpApiEndpoint.HttpApiEndpoint.AnyWithProps; readonly group: HttpApiGroup.HttpApiGroup.AnyWithProps; }>; readonly onGroup: (options: { readonly group: HttpApiGroup.HttpApiGroup.AnyWithProps; readonly mergedAnnotations: Context.Context<never>; }) => void; readonly onEndpoint: (options: { readonly group: HttpApiGroup.HttpApiGroup.AnyWithProps; readonly endpoint: HttpApiEndpoint.HttpApiEndpoint<string, HttpMethod>; readonly mergedAnnotations: Context.Context<never>; readonly middleware: ReadonlySet<HttpApiMiddleware.TagClassAny>; readonly payloads: ReadonlyMap<string, { readonly encoding: HttpApiSchema.Encoding; readonly ast: AST.AST; }>; readonly successes: ReadonlyMap<number, { readonly ast: Option.Option<AST.AST>; readonly description: Option.Option<string>; }>; readonly errors: ReadonlyMap<number, { readonly ast: Option.Option<AST.AST>; readonly description: Option.Option<string>; }>; }) => void; }) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L279"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApi",
    "description": "An `HttpApi` is a collection of `HttpApiEndpoint`s. You can use an `HttpApi` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.make` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApi<\n  out Id extends string,\n  out Groups extends HttpApiGroup.HttpApiGroup.Any = never,\n  in out E = never,\n  out R = never\n> extends Pipeable {\n  new(_: never): {}\n  readonly [TypeId]: TypeId\n  readonly identifier: Id\n  readonly groups: Record.ReadonlyRecord<string, Groups>\n  readonly annotations: Context.Context<never>\n  readonly errorSchema: Schema.Schema<E, unknown, R>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add a `HttpApiGroup` to the `HttpApi`.\n   */\n  add<A extends HttpApiGroup.HttpApiGroup.Any>(group: A): HttpApi<Id, Groups | A, E, R>\n  /**\n   * Add another `HttpApi` to the `HttpApi`.\n   */\n  addHttpApi<Id2 extends string, Groups2 extends HttpApiGroup.HttpApiGroup.Any, E2, R2>(\n    api: HttpApi<Id2, Groups2, E2, R2>\n  ): HttpApi<\n    Id,\n    Groups | HttpApiGroup.HttpApiGroup.AddContext<Groups2, R2>,\n    E | E2,\n    R\n  >\n  /**\n   * Add an global error to the `HttpApi`.\n   */\n  addError<A, I, RX>(\n    schema: Schema.Schema<A, I, RX>,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApi<Id, Groups, E | A, R | RX>\n  /**\n   * Prefix all endpoints in the `HttpApi`.\n   */\n  prefix(prefix: HttpApiEndpoint.PathSegment): HttpApi<Id, Groups, E, R>\n  /**\n   * Add a middleware to a `HttpApi`. It will be applied to all endpoints in the\n   * `HttpApi`.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(\n    middleware: Context.Tag<I, S>\n  ): HttpApi<\n    Id,\n    Groups,\n    E | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>\n  >\n  /**\n   * Annotate the `HttpApi`.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): HttpApi<Id, Groups, E, R>\n  /**\n   * Annotate the `HttpApi` with a Context.\n   */\n  annotateContext<I>(context: Context.Context<I>): HttpApi<Id, Groups, E, R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L46"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L29"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApi.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any {\n    readonly [TypeId]: TypeId\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L131"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApi.ts",
      "path": "src/HttpApi.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApi.AnyWithProps",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AnyWithProps = HttpApi<string, HttpApiGroup.HttpApiGroup.AnyWithProps, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApi.ts#L139"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Router",
    "description": "The router that the API endpoints are attached to.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router",
    "signature": "declare class Router",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L50"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Middleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "declare class Middleware",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L826"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "httpApp",
    "description": "Construct an `HttpApp` from an `HttpApi` instance.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const httpApp: Effect.Effect<HttpApp.Default<never, HttpRouter.HttpRouter.DefaultServices>, never, HttpApi.Api | Router | Middleware>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L102"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "HandlersTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "declare const HandlersTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L191"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "api",
    "description": "Create a top-level `HttpApi` layer.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const api: <Id extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, E, R>(api: HttpApi.HttpApi<Id, Groups, E, R>) => Layer.Layer<HttpApi.Api, never, HttpApiGroup.HttpApiGroup.ToService<Id, Groups> | R | HttpApiGroup.HttpApiGroup.ErrorContext<Groups>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L58"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "serve",
    "description": "Build an `HttpApp` from an `HttpApi` instance, and serve it using an\n`HttpServer`.\n\nOptionally, you can provide a middleware function that will be applied to\nthe `HttpApp` before serving.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const serve: <R = never>(middleware?: (httpApp: HttpApp.Default) => HttpApp.Default<never, R>) => Layer.Layer<never, never, HttpServer.HttpServer | HttpRouter.HttpRouter.DefaultServices | Exclude<R, Scope | HttpServerRequest.HttpServerRequest> | HttpApi.Api>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L80"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "toWebHandler",
    "description": "Construct an http web handler from an `HttpApi` instance.\n\n**Example**\n\n```ts\nimport { HttpApi, HttpApiBuilder, HttpServer } from \"@effect/platform\"\nimport { Layer } from \"effect\"\n\nclass MyApi extends HttpApi.make(\"api\") {}\n\nconst MyApiLive = HttpApiBuilder.api(MyApi)\n\nconst { dispose, handler } = HttpApiBuilder.toWebHandler(\n  Layer.mergeAll(\n    MyApiLive,\n    // you could also use NodeHttpServer.layerContext, depending on your\n    // server's platform\n    HttpServer.layerContext\n  )\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const toWebHandler: <LA, LE>(layer: Layer.Layer<LA | HttpApi.Api | HttpRouter.HttpRouter.DefaultServices, LE>, options?: { readonly middleware?: (httpApp: HttpApp.Default) => HttpApp.Default<never, HttpApi.Api | Router | HttpRouter.HttpRouter.DefaultServices>; readonly memoMap?: Layer.MemoMap; }) => { readonly handler: (request: Request, context?: Context.Context<never> | undefined) => Promise<Response>; readonly dispose: () => Promise<void>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L151"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "group",
    "description": "Create a `Layer` that will implement all the endpoints in an `HttpApi`.\n\nAn unimplemented `Handlers` instance is passed to the `build` function, which\nyou can use to add handlers to the group.\n\nYou can implement endpoints using the `handlers.handle` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "declare const group: <ApiId extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, ApiError, ApiR, const Name extends HttpApiGroup.HttpApiGroup.Name<Groups>, Return>(api: HttpApi.HttpApi<ApiId, Groups, ApiError, ApiR>, groupName: Name, build: (handlers: Handlers.FromGroup<ApiError, ApiR, HttpApiGroup.HttpApiGroup.WithName<Groups, Name>>) => Handlers.ValidateReturn<Return>) => Layer.Layer<HttpApiGroup.ApiGroup<ApiId, Name>, Handlers.Error<Return>, Exclude<Handlers.Context<Return> | HttpApiGroup.HttpApiGroup.MiddlewareWithName<Groups, Name>, Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L440"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "handler",
    "description": "Create a `Handler` for a single endpoint.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "declare const handler: <ApiId extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, ApiError, ApiR, const GroupName extends Groups[\"identifier\"], const Name extends HttpApiGroup.HttpApiGroup.EndpointsWithName<Groups, GroupName>[\"name\"], R>(_api: HttpApi.HttpApi<ApiId, Groups, ApiError, ApiR>, _groupName: GroupName, _name: Name, f: HttpApiEndpoint.HttpApiEndpoint.HandlerWithName<HttpApiGroup.HttpApiGroup.EndpointsWithName<Groups, GroupName>, Name, ApiError | HttpApiGroup.HttpApiGroup.ErrorWithName<Groups, GroupName>, R>) => HttpApiEndpoint.HttpApiEndpoint.HandlerWithName<HttpApiGroup.HttpApiGroup.EndpointsWithName<Groups, GroupName>, Name, ApiError | HttpApiGroup.HttpApiGroup.ErrorWithName<Groups, GroupName>, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L497"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "middleware",
    "description": "Create an `HttpApi` level middleware `Layer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "declare const middleware: { <EX = never, RX = never>(middleware: MiddlewareFn<never> | Effect.Effect<MiddlewareFn<never>, EX, RX>, options?: { readonly withContext?: false | undefined; }): Layer.Layer<never, EX, Exclude<RX, Scope>>; <R, EX = never, RX = never>(middleware: MiddlewareFn<never, R> | Effect.Effect<MiddlewareFn<never, R>, EX, RX>, options: { readonly withContext: true; }): Layer.Layer<never, EX, Exclude<HttpRouter.HttpRouter.ExcludeProvided<R> | RX, Scope>>; <ApiId extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, Error, ErrorR, EX = never, RX = never>(api: HttpApi.HttpApi<ApiId, Groups, Error, ErrorR>, middleware: MiddlewareFn<NoInfer<Error>> | Effect.Effect<MiddlewareFn<NoInfer<Error>>, EX, RX>, options?: { readonly withContext?: false | undefined; }): Layer.Layer<never, EX, Exclude<RX, Scope>>; <ApiId extends string, Groups extends HttpApiGroup.HttpApiGroup.Any, Error, ErrorR, R, EX = never, RX = never>(api: HttpApi.HttpApi<ApiId, Groups, Error, ErrorR>, middleware: MiddlewareFn<NoInfer<Error>, R> | Effect.Effect<MiddlewareFn<NoInfer<Error>, R>, EX, RX>, options: { readonly withContext: true; }): Layer.Layer<never, EX, Exclude<HttpRouter.HttpRouter.ExcludeProvided<R> | RX, Scope>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L882"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "middlewareCors",
    "description": "A CORS middleware layer that can be provided to the `HttpApiBuilder.serve` layer.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "declare const middlewareCors: (options?: { readonly allowedOrigins?: ReadonlyArray<string> | undefined; readonly allowedMethods?: ReadonlyArray<string> | undefined; readonly allowedHeaders?: ReadonlyArray<string> | undefined; readonly exposedHeaders?: ReadonlyArray<string> | undefined; readonly maxAge?: number | undefined; readonly credentials?: boolean | undefined; } | undefined) => Layer.Layer<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L938"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "middlewareOpenApi",
    "description": "A middleware that adds an openapi.json endpoint to the API.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "declare const middlewareOpenApi: (options?: { readonly path?: HttpApiEndpoint.PathSegment | undefined; readonly additionalPropertiesStrategy?: OpenApi.AdditionalPropertiesStrategy | undefined; } | undefined) => Layer.Layer<never, never, HttpApi.Api>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L955"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "securityDecode",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "security",
    "signature": "declare const securityDecode: <Security extends HttpApiSecurity.HttpApiSecurity>(self: Security) => Effect.Effect<HttpApiSecurity.HttpApiSecurity.Type<Security>, never, HttpServerRequest.HttpServerRequest | HttpServerRequest.ParsedSearchParams>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L981"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "securitySetCookie",
    "description": "Set a cookie from an `HttpApiSecurity.HttpApiKey` instance.\n\nYou can use this api before returning a response from an endpoint handler.\n\n```ts skip-type-checking\nhandlers.handle(\n  \"authenticate\",\n  (_) => HttpApiBuilder.securitySetCookie(security, \"secret123\")\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "middleware",
    "signature": "declare const securitySetCookie: (self: HttpApiSecurity.ApiKey, value: string | Redacted.Redacted, options?: Cookie[\"options\"]) => Effect.Effect<void>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L1052"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers",
    "description": "Represents a handled `HttpApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "export interface Handlers<\n  E,\n  Provides,\n  R,\n  Endpoints extends HttpApiEndpoint.HttpApiEndpoint.Any = never\n> extends Pipeable {\n  readonly [HandlersTypeId]: {\n    _Endpoints: Covariant<Endpoints>\n  }\n  readonly group: HttpApiGroup.HttpApiGroup.AnyWithProps\n  readonly handlers: Chunk.Chunk<Handlers.Item<E, R>>\n\n  /**\n   * Add the implementation for an `HttpApiEndpoint` to a `Handlers` group.\n   */\n  handle<Name extends HttpApiEndpoint.HttpApiEndpoint.Name<Endpoints>, R1>(\n    name: Name,\n    handler: HttpApiEndpoint.HttpApiEndpoint.HandlerWithName<Endpoints, Name, E, R1>,\n    options?: { readonly uninterruptible?: boolean | undefined } | undefined\n  ): Handlers<\n    E,\n    Provides,\n    | R\n    | Exclude<\n      HttpApiEndpoint.HttpApiEndpoint.ExcludeProvided<\n        Endpoints,\n        Name,\n        R1 | HttpApiEndpoint.HttpApiEndpoint.ContextWithName<Endpoints, Name>\n      >,\n      Provides\n    >,\n    HttpApiEndpoint.HttpApiEndpoint.ExcludeName<Endpoints, Name>\n  >\n\n  /**\n   * Add the implementation for an `HttpApiEndpoint` to a `Handlers` group.\n   * This version of the api allows you to return the full response object.\n   */\n  handleRaw<Name extends HttpApiEndpoint.HttpApiEndpoint.Name<Endpoints>, R1>(\n    name: Name,\n    handler: HttpApiEndpoint.HttpApiEndpoint.HandlerRawWithName<Endpoints, Name, E, R1>,\n    options?: { readonly uninterruptible?: boolean | undefined } | undefined\n  ): Handlers<\n    E,\n    Provides,\n    | R\n    | Exclude<\n      HttpApiEndpoint.HttpApiEndpoint.ExcludeProvided<\n        Endpoints,\n        Name,\n        R1 | HttpApiEndpoint.HttpApiEndpoint.ContextWithName<Endpoints, Name>\n      >,\n      Provides\n    >,\n    HttpApiEndpoint.HttpApiEndpoint.ExcludeName<Endpoints, Name>\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L205"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "HandlersTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type HandlersTypeId = typeof HandlersTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L197"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "MiddlewareFn",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "global",
    "signature": "type MiddlewareFn<Error, R> = (\n  httpApp: HttpApp.Default\n) => HttpApp.Default<Error, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L853"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "export interface Any {\n    readonly [HandlersTypeId]: any\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L272"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.Middleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type Middleware<E, R, E1, R1> = (self: HttpRouter.Route.Middleware<E, R>) => HttpApp.Default<E1, R1>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L280"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.Item",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type Item<E, R> = {\n    readonly endpoint: HttpApiEndpoint.HttpApiEndpoint.Any\n    readonly handler: HttpApiEndpoint.HttpApiEndpoint.Handler<any, E, R>\n    readonly withFullRequest: boolean\n    readonly uninterruptible: boolean\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L286"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.FromGroup",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type FromGroup<ApiError, ApiR, Group> = Handlers<\n    | ApiError\n    | HttpApiGroup.HttpApiGroup.Error<Group>,\n    | HttpApiMiddleware.HttpApiMiddleware.ExtractProvides<ApiR>\n    | HttpApiGroup.HttpApiGroup.Provides<Group>,\n    never,\n    HttpApiGroup.HttpApiGroup.Endpoints<Group>\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L297"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.ValidateReturn",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type ValidateReturn<A> = A extends (\n    | Handlers<\n      infer _E,\n      infer _Provides,\n      infer _R,\n      infer _Endpoints\n    >\n    | Effect.Effect<\n      Handlers<\n        infer _E,\n        infer _Provides,\n        infer _R,\n        infer _Endpoints\n      >,\n      infer _EX,\n      infer _RX\n    >\n  ) ? [_Endpoints] extends [never] ? A\n    : `Endpoint not handled: ${HttpApiEndpoint.HttpApiEndpoint.Name<_Endpoints>}` :\n    `Must return the implemented handlers`",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L314"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type Error<A> = A extends Effect.Effect<\n    Handlers<\n      infer _E,\n      infer _Provides,\n      infer _R,\n      infer _Endpoints\n    >,\n    infer _EX,\n    infer _RX\n  > ? _EX :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L339"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiBuilder.ts",
      "path": "src/HttpApiBuilder.ts"
    },
    "project": "@effect/platform",
    "name": "Handlers.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "handlers",
    "signature": "type Context<A> = A extends Handlers<\n    infer _E,\n    infer _Provides,\n    infer _R,\n    infer _Endpoints\n  > ? _R :\n    A extends Effect.Effect<\n      Handlers<\n        infer _E,\n        infer _Provides,\n        infer _R,\n        infer _Endpoints\n      >,\n      infer _EX,\n      infer _RX\n    > ? _R | _RX :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiBuilder.ts#L355"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <ApiId extends string, Groups extends HttpApiGroup.Any, ApiError, ApiR>(api: HttpApi.HttpApi<ApiId, Groups, ApiError, ApiR>, options?: { readonly transformClient?: ((client: HttpClient.HttpClient) => HttpClient.HttpClient) | undefined; readonly transformResponse?: ((effect: Effect.Effect<unknown, unknown>) => Effect.Effect<unknown, unknown>) | undefined; readonly baseUrl?: URL | string | undefined; }) => Effect.Effect<Simplify<Client<Groups, ApiError>>, never, HttpApiMiddleware.HttpApiMiddleware.Without<ApiR | HttpApiGroup.ClientContext<Groups>> | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L248"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "group",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const group: <ApiId extends string, Groups extends HttpApiGroup.Any, ApiError, ApiR, const GroupName extends Groups[\"identifier\"]>(api: HttpApi.HttpApi<ApiId, Groups, ApiError, ApiR>, groupId: GroupName, options?: { readonly transformClient?: ((client: HttpClient.HttpClient) => HttpClient.HttpClient) | undefined; readonly transformResponse?: ((effect: Effect.Effect<unknown, unknown>) => Effect.Effect<unknown, unknown>) | undefined; readonly baseUrl?: URL | string | undefined; }) => Effect.Effect<Client.Group<Groups, GroupName, ApiError>, never, HttpApiMiddleware.HttpApiMiddleware.Without<ApiR | HttpApiGroup.ClientContext<HttpApiGroup.WithName<Groups, GroupName>>> | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L279"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "endpoint",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const endpoint: <ApiId extends string, Groups extends HttpApiGroup.Any, ApiError, ApiR, const GroupName extends HttpApiGroup.Name<Groups>, const EndpointName extends HttpApiEndpoint.Name<HttpApiGroup.EndpointsWithName<Groups, GroupName>>>(api: HttpApi.HttpApi<ApiId, Groups, ApiError, ApiR>, groupName: GroupName, endpointName: EndpointName, options?: { readonly transformClient?: ((client: HttpClient.HttpClient) => HttpClient.HttpClient) | undefined; readonly transformResponse?: ((effect: Effect.Effect<unknown, unknown>) => Effect.Effect<unknown, unknown>) | undefined; readonly baseUrl?: URL | string | undefined; }) => Effect.Effect<Client.Method<HttpApiEndpoint.WithName<HttpApiGroup.Endpoints<HttpApiGroup.WithName<Groups, GroupName>>, EndpointName>, HttpApiGroup.Error<HttpApiGroup.WithName<Groups, GroupName>>, ApiError>, never, HttpApiMiddleware.HttpApiMiddleware.Without<ApiR | HttpApiGroup.Context<HttpApiGroup.WithName<Groups, GroupName>> | HttpApiEndpoint.ContextWithName<HttpApiGroup.EndpointsWithName<Groups, GroupName>, EndpointName> | HttpApiEndpoint.ErrorContextWithName<HttpApiGroup.EndpointsWithName<Groups, GroupName>, EndpointName>> | HttpClient.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L319"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "Client",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Client<Groups, ApiError> = Simplify<\n  & {\n    readonly [Group in Extract<Groups, { readonly topLevel: false }> as HttpApiGroup.Name<Group>]: Client.Group<\n      Group,\n      Group[\"identifier\"],\n      ApiError\n    >\n  }\n  & {\n    readonly [Method in Client.TopLevelMethods<Groups, ApiError> as Method[0]]: Method[1]\n  }\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L31"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "Client.Group",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Group<Groups, GroupName, ApiError> = [HttpApiGroup.WithName<Groups, GroupName>] extends\n      [HttpApiGroup<infer _GroupName, infer _Endpoints, infer _GroupError, infer _GroupErrorR>] ? {\n        readonly [Endpoint in _Endpoints as HttpApiEndpoint.Name<Endpoint>]: Method<\n          Endpoint,\n          ApiError,\n          _GroupError\n        >\n      } :\n      never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L53"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "Client.Method",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Method<Endpoint, ApiError, GroupError> = [Endpoint] extends [\n    HttpApiEndpoint<\n      infer _Name,\n      infer _Method,\n      infer _Path,\n      infer _UrlParams,\n      infer _Payload,\n      infer _Headers,\n      infer _Success,\n      infer _Error,\n      infer _R,\n      infer _RE\n    >\n  ] ? <WithResponse extends boolean = false>(\n      request: Simplify<HttpApiEndpoint.ClientRequest<_Path, _UrlParams, _Payload, _Headers, WithResponse>>\n    ) => Effect.Effect<\n      WithResponse extends true ? [_Success, HttpClientResponse.HttpClientResponse] : _Success,\n      _Error | GroupError | ApiError | HttpClientError.HttpClientError | ParseResult.ParseError\n    > :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L68"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiClient.ts",
      "path": "src/HttpApiClient.ts"
    },
    "project": "@effect/platform",
    "name": "Client.TopLevelMethods",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type TopLevelMethods<Groups, ApiError> = Extract<Groups, { readonly topLevel: true }> extends\n      HttpApiGroup<infer _Id, infer _Endpoints, infer _Error, infer _ErrorR, infer _TopLevel> ?\n      _Endpoints extends infer Endpoint ? [HttpApiEndpoint.Name<Endpoint>, Method<Endpoint, ApiError, _Error>]\n      : never :\n      never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiClient.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L25"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const get: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"GET\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"GET\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L918"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "post",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const post: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"POST\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"POST\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L930"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "put",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const put: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"PUT\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"PUT\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L942"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "patch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const patch: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"PATCH\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"PATCH\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L954"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "del",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const del: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"DELETE\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"DELETE\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L966"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "head",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const head: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"HEAD\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"HEAD\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L978"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const options: { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, \"OPTIONS\">; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, \"OPTIONS\">; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L990"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpApiEndpoint",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isHttpApiEndpoint: (u: unknown) => u is HttpApiEndpoint<any, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <Method extends HttpMethod>(method: Method) => { <const Name extends string>(name: Name): HttpApiEndpoint.Constructor<Name, Method>; <const Name extends string>(name: Name, path: PathSegment): HttpApiEndpoint<Name, Method>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L860"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint",
    "description": "Represents an API endpoint. An API endpoint is mapped to a single route on\nthe underlying `HttpRouter`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiEndpoint<\n  out Name extends string,\n  out Method extends HttpMethod,\n  in out Path = never,\n  in out UrlParams = never,\n  in out Payload = never,\n  in out Headers = never,\n  in out Success = void,\n  in out Error = never,\n  out R = never,\n  out RE = never\n> extends Pipeable {\n  readonly [TypeId]: TypeId\n  readonly name: Name\n  readonly path: PathSegment\n  readonly method: Method\n  readonly pathSchema: Option.Option<Schema.Schema<Path, unknown, R>>\n  readonly urlParamsSchema: Option.Option<Schema.Schema<UrlParams, unknown, R>>\n  readonly payloadSchema: Option.Option<Schema.Schema<Payload, unknown, R>>\n  readonly headersSchema: Option.Option<Schema.Schema<Headers, unknown, R>>\n  readonly successSchema: Schema.Schema<Success, unknown, R>\n  readonly errorSchema: Schema.Schema<Error, unknown, RE>\n  readonly annotations: Context.Context<never>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add a schema for the success response of the endpoint. The status code\n   * will be inferred from the schema, otherwise it will default to 200.\n   */\n  addSuccess<S extends Schema.Schema.Any>(\n    schema: S,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Exclude<Success, void> | Schema.Schema.Type<S>,\n    Error,\n    R | Schema.Schema.Context<S>,\n    RE\n  >\n\n  /**\n   * Add an error response schema to the endpoint. The status code\n   * will be inferred from the schema, otherwise it will default to 500.\n   */\n  addError<E extends Schema.Schema.Any>(\n    schema: E,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error | Schema.Schema.Type<E>,\n    R,\n    RE | Schema.Schema.Context<E>\n  >\n\n  /**\n   * Set the schema for the request body of the endpoint. The schema will be\n   * used to validate the request body before the handler is called.\n   *\n   * For endpoints with no request body, the payload will use the url search\n   * parameters.\n   *\n   * You can set a multipart schema to handle file uploads by using the\n   * `HttpApiSchema.Multipart` combinator.\n   */\n  setPayload<P extends Schema.Schema.Any>(\n    schema: P & HttpApiEndpoint.ValidatePayload<Method, P>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Schema.Schema.Type<P>,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<P>,\n    RE\n  >\n\n  /**\n   * Set the schema for the path parameters of the endpoint. The schema will be\n   * used to validate the path parameters before the handler is called.\n   */\n  setPath<Path extends Schema.Schema.Any>(\n    schema: Path & HttpApiEndpoint.ValidatePath<Path>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Schema.Schema.Type<Path>,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<Path>,\n    RE\n  >\n\n  /**\n   * Set the schema for the url search parameters of the endpoint.\n   */\n  setUrlParams<UrlParams extends Schema.Schema.Any>(\n    schema: UrlParams & HttpApiEndpoint.ValidateUrlParams<UrlParams>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    Schema.Schema.Type<UrlParams>,\n    Payload,\n    Headers,\n    Success,\n    Error,\n    R | Schema.Schema.Context<Path>,\n    RE\n  >\n\n  /**\n   * Set the schema for the headers of the endpoint. The schema will be\n   * used to validate the headers before the handler is called.\n   */\n  setHeaders<H extends Schema.Schema.Any>(\n    schema: H & HttpApiEndpoint.ValidateHeaders<H>\n  ): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Schema.Schema.Type<H>,\n    Success,\n    Error,\n    R | Schema.Schema.Context<H>,\n    RE\n  >\n\n  /**\n   * Add a prefix to the path of the endpoint.\n   */\n  prefix(\n    prefix: PathSegment\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n\n  /**\n   * Add an `HttpApiMiddleware` to the endpoint.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(middleware: Context.Tag<I, S>): HttpApiEndpoint<\n    Name,\n    Method,\n    Path,\n    UrlParams,\n    Payload,\n    Headers,\n    Success,\n    Error | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I,\n    RE | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>\n  >\n\n  /**\n   * Add an annotation on the endpoint.\n   */\n  annotate<I, S>(\n    tag: Context.Tag<I, S>,\n    value: S\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n\n  /**\n   * Merge the annotations of the endpoint with the provided context.\n   */\n  annotateContext<I>(\n    context: Context.Context<I>\n  ): HttpApiEndpoint<Name, Method, Path, UrlParams, Payload, Headers, Success, Error, R, RE>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L55"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L31"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "PathSegment",
    "description": "Represents a path segment. A path segment is a string that represents a\nsegment of a URL path.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PathSegment = `/${string}`",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L46"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any extends Pipeable {\n    readonly [TypeId]: TypeId\n    readonly name: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L253"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.AnyWithProps",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface AnyWithProps extends HttpApiEndpoint<string, HttpMethod, any, any, any, any, any, any, any> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L262"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Name",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Name<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Name\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L268"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Success",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Success<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Success\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L286"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Error<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Error\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L304"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.PathParsed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PathParsed<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Path\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L322"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.UrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type UrlParams<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _UrlParams\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L340"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Payload",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Payload<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Payload\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L358"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Headers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Headers<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _Headers\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L376"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Request<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ?\n      & ([_Path] extends [never] ? {} : { readonly path: _Path })\n      & ([_UrlParams] extends [never] ? {} : { readonly urlParams: _UrlParams })\n      & ([_Payload] extends [never] ? {}\n        : _Payload extends Brand<HttpApiSchema.MultipartStreamTypeId> ?\n          { readonly payload: Stream.Stream<Multipart.Part, Multipart.MultipartError> }\n        : { readonly payload: _Payload })\n      & ([_Headers] extends [never] ? {} : { readonly headers: _Headers })\n      & { readonly request: HttpServerRequest }\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L394"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.RequestRaw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type RequestRaw<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ?\n      & ([_Path] extends [never] ? {} : { readonly path: _Path })\n      & ([_UrlParams] extends [never] ? {} : { readonly urlParams: _UrlParams })\n      & ([_Headers] extends [never] ? {} : { readonly headers: _Headers })\n      & { readonly request: HttpServerRequest }\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L420"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ClientRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ClientRequest<Path, UrlParams, Payload, Headers, WithResponse> = (\n    & ([Path] extends [void] ? {} : { readonly path: Path })\n    & ([UrlParams] extends [never] ? {} : { readonly urlParams: UrlParams })\n    & ([Headers] extends [never] ? {} : { readonly headers: Headers })\n    & ([Payload] extends [never] ? {}\n      : Payload extends infer P ?\n        P extends Brand<HttpApiSchema.MultipartTypeId> | Brand<HttpApiSchema.MultipartStreamTypeId>\n          ? { readonly payload: FormData }\n        : { readonly payload: P }\n      : { readonly payload: Payload })\n  ) extends infer Req ? keyof Req extends never ? (void | { readonly withResponse?: WithResponse }) :\n    Req & { readonly withResponse?: WithResponse } :\n    void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L442"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _R\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L460"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ErrorContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorContext<Endpoint> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? _RE\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L478"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Handler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Handler<Endpoint, E, R> = (\n    request: Types.Simplify<Request<Endpoint>>\n  ) => Effect<Success<Endpoint> | HttpServerResponse, Error<Endpoint> | E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L496"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.HandlerRaw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HandlerRaw<Endpoint, E, R> = (\n    request: Types.Simplify<RequestRaw<Endpoint>>\n  ) => Effect<Success<Endpoint> | HttpServerResponse, Error<Endpoint> | E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L504"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.WithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type WithName<Endpoints, Name> = Extract<Endpoints, { readonly name: Name }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L512"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ExcludeName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExcludeName<Endpoints, Name> = Exclude<Endpoints, { readonly name: Name }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L518"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.HandlerWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HandlerWithName<Endpoints, Name, E, R> = Handler<\n    WithName<Endpoints, Name>,\n    E,\n    R\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L524"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.HandlerRawWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HandlerRawWithName<Endpoints, Name, E, R> = HandlerRaw<\n    WithName<Endpoints, Name>,\n    E,\n    R\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L534"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.SuccessWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type SuccessWithName<Endpoints, Name> = Success<WithName<Endpoints, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L544"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ErrorWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorWithName<Endpoints, Name> = Error<WithName<Endpoints, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L550"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ContextWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ContextWithName<Endpoints, Name> = Context<WithName<Endpoints, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L556"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ErrorContextWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorContextWithName<Endpoints, Name> = ErrorContext<WithName<Endpoints, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L562"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ExcludeProvided",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExcludeProvided<Endpoints, Name, R> = Exclude<\n    R,\n    | HttpRouter.HttpRouter.DefaultServices\n    | HttpRouter.HttpRouter.Provided\n    | HttpApiMiddleware.HttpApiMiddleware.ExtractProvides<ContextWithName<Endpoints, Name>>\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L568"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ValidatePath",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ValidatePath<S> = S extends Schema.Schema<infer _A, infer _I, infer _R>\n    ? [_I] extends [Readonly<Record<string, string | undefined>>] ? {}\n    : `Path schema must be encodeable to strings`\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L579"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ValidateUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ValidateUrlParams<S> = S extends Schema.Schema<infer _A, infer _I, infer _R>\n    ? [_I] extends [Readonly<Record<string, string | ReadonlyArray<string> | undefined>>] ? {}\n    : `UrlParams schema must be encodeable to strings`\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L588"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ValidateHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ValidateHeaders<S> = S extends Schema.Schema<infer _A, infer _I, infer _R>\n    ? [_I] extends [Readonly<Record<string, string | undefined>>] ? {}\n    : `Headers schema must be encodeable to strings`\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L597"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ValidatePayload",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ValidatePayload<Method, P> = Method extends\n    HttpMethod.NoBody ?\n    P extends Schema.Schema<infer _A, infer _I, infer _R>\n      ? [_I] extends [Readonly<Record<string, string | ReadonlyArray<string> | undefined>>] ? {}\n      : `'${Method}' payload must be encodeable to strings`\n    : {}\n    : {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L606"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ValidateParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ValidateParams<Schemas, Prev> = Schemas extends [\n    infer Head extends (Schema.Schema.Any | Schema.PropertySignature.Any),\n    ...infer Tail extends ReadonlyArray<Schema.Schema.Any | Schema.PropertySignature.Any>\n  ] ? [\n      Head extends HttpApiSchema.Param<infer _Name, infer _S>\n        ? HttpApiSchema.Param<_Name, any> extends Prev ? `Duplicate param: ${_Name}`\n        : [Schema.Schema.Encoded<Head> & {}] extends [string] ? Head\n        : `Must be encodeable to string: ${_Name}` :\n        Head,\n      ...ValidateParams<Tail, Prev | Head>\n    ]\n    : Schemas",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L618"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.AddError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AddError<Endpoint, E, R> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? HttpApiEndpoint<\n      _Name,\n      _Method,\n      _Path,\n      _UrlParams,\n      _Payload,\n      _Headers,\n      _Success,\n      _Error | E,\n      _R,\n      _RE | R\n    > :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L638"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.AddContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AddContext<Endpoint, R> = Endpoint extends HttpApiEndpoint<\n    infer _Name,\n    infer _Method,\n    infer _Path,\n    infer _UrlParams,\n    infer _Payload,\n    infer _Headers,\n    infer _Success,\n    infer _Error,\n    infer _R,\n    infer _RE\n  > ? HttpApiEndpoint<\n      _Name,\n      _Method,\n      _Path,\n      _UrlParams,\n      _Payload,\n      _Headers,\n      _Success,\n      _Error | HttpApiMiddleware.HttpApiMiddleware.Error<R>,\n      _R | R,\n      _RE | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<R>\n    > :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L667"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.PathEntries",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PathEntries<Schemas> = Extract<keyof Schemas, string> extends infer K ?\n      K extends keyof Schemas ? Schemas[K] extends HttpApiSchema.Param<infer _Name, infer _S> ? [_Name, _S] :\n        Schemas[K] extends (Schema.Schema.Any | Schema.PropertySignature.Any) ? [K, Schemas[K]]\n        : never\n      : never\n      : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L696"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.ExtractPath",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type { [K in keyof ({ readonly [Entry in Extract<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]]?: Schema.Schema.Type<Entry[1]> | undefined; } & { readonly [Entry in Exclude<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]]: Schema.Schema.Type<Entry[1]>; })]: ({ readonly [Entry in Extract<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]]?: Schema.Schema.Type<Entry[1]> | undefined; } & { readonly [Entry in Exclude<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]]: Schema.Schema.Type<Entry[1]>; })[K]; } = Schema.Simplify<\n      & {\n        readonly [\n          Entry in Extract<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]\n        ]?: Schema.Schema.Type<Entry[1]>\n      }\n      & {\n        readonly [\n          Entry in Exclude<PathEntries<Schemas>, [any, OptionalTypePropertySignature]> as Entry[0]\n        ]: Schema.Schema.Type<Entry[1]>\n      }\n    >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L714"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiEndpoint.ts",
      "path": "src/HttpApiEndpoint.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint.Constructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Constructor<Name, Method> = <\n    const Schemas extends ReadonlyArray<Schema.Schema.Any | Schema.PropertySignature.Any>\n  >(\n    segments: TemplateStringsArray,\n    ...schemas: ValidateParams<Schemas>\n  ) => HttpApiEndpoint<\n    Name,\n    Method,\n    Schemas[\"length\"] extends 0 ? never : Types.Simplify<ExtractPath<Schemas>>,\n    never,\n    never,\n    never,\n    void,\n    never,\n    Schema.Schema.Context<Schemas[number]>\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiEndpoint.ts#L732"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "Issue",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare class Issue",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L25"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiDecodeError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class HttpApiDecodeError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L34"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "BadRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class BadRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L66"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "Unauthorized",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class Unauthorized",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L75"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "Forbidden",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class Forbidden",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L84"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "NotFound",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class NotFound",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L93"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "MethodNotAllowed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class MethodNotAllowed",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L102"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "NotAcceptable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class NotAcceptable",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L111"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "RequestTimeout",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class RequestTimeout",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L120"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "Conflict",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class Conflict",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L129"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "Gone",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class Gone",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L138"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "InternalServerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class InternalServerError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L147"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "NotImplemented",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class NotImplemented",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L156"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "ServiceUnavailable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare class ServiceUnavailable",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L165"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L13"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiError.ts",
      "path": "src/HttpApiError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiError.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L18"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpApiGroup",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isHttpApiGroup: (u: unknown) => u is HttpApiGroup.Any",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L30"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "description": "An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.group` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <const Id extends string, const TopLevel extends (true | false) = false>(identifier: Id, options?: { readonly topLevel?: TopLevel | undefined; }) => HttpApiGroup<Id, never, never, never, TopLevel>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L420"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup",
    "description": "An `HttpApiGroup` is a collection of `HttpApiEndpoint`s. You can use an `HttpApiGroup` to\nrepresent a portion of your domain.\n\nThe endpoints can be implemented later using the `HttpApiBuilder.group` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiGroup<\n  out Id extends string,\n  out Endpoints extends HttpApiEndpoint.HttpApiEndpoint.Any = never,\n  in out Error = HttpApiDecodeError,\n  out R = never,\n  out TopLevel extends (true | false) = false\n> extends Pipeable {\n  new(_: never): {}\n  readonly [TypeId]: TypeId\n  readonly identifier: Id\n  readonly topLevel: TopLevel\n  readonly endpoints: Record.ReadonlyRecord<string, Endpoints>\n  readonly errorSchema: Schema.Schema<Error, unknown, R>\n  readonly annotations: Context.Context<never>\n  readonly middlewares: ReadonlySet<HttpApiMiddleware.TagClassAny>\n\n  /**\n   * Add an `HttpApiEndpoint` to an `HttpApiGroup`.\n   */\n  add<A extends HttpApiEndpoint.HttpApiEndpoint.Any>(\n    endpoint: A\n  ): HttpApiGroup<Id, Endpoints | A, Error, R, TopLevel>\n\n  /**\n   * Add an error schema to an `HttpApiGroup`, which is shared by all endpoints in the\n   * group.\n   */\n  addError<A, I, RX>(\n    schema: Schema.Schema<A, I, RX>,\n    annotations?: {\n      readonly status?: number | undefined\n    }\n  ): HttpApiGroup<Id, Endpoints, Error | A, R | RX, TopLevel>\n\n  /**\n   * Add a path prefix to all endpoints in an `HttpApiGroup`. Note that this will only\n   * add the prefix to the endpoints before this api is called.\n   */\n  prefix(prefix: HttpApiEndpoint.PathSegment): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * Add an `HttpApiMiddleware` to the `HttpApiGroup`.\n   *\n   * It will be applied to all endpoints in the group.\n   */\n  middleware<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(middleware: Context.Tag<I, S>): HttpApiGroup<\n    Id,\n    Endpoints,\n    Error | HttpApiMiddleware.HttpApiMiddleware.Error<I>,\n    R | I | HttpApiMiddleware.HttpApiMiddleware.ErrorContext<I>,\n    TopLevel\n  >\n\n  /**\n   * Add an `HttpApiMiddleware` to each endpoint in the `HttpApiGroup`.\n   *\n   * Endpoints added after this api is called will not have the middleware\n   * applied.\n   */\n  middlewareEndpoints<I extends HttpApiMiddleware.HttpApiMiddleware.AnyId, S>(\n    middleware: Context.Tag<I, S>\n  ): HttpApiGroup<\n    Id,\n    HttpApiEndpoint.HttpApiEndpoint.AddContext<Endpoints, I>,\n    Error,\n    R,\n    TopLevel\n  >\n\n  /**\n   * Merge the annotations of an `HttpApiGroup` with a new context.\n   */\n  annotateContext<I>(context: Context.Context<I>): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * Add an annotation to an `HttpApiGroup`.\n   */\n  annotate<I, S>(tag: Context.Tag<I, S>, value: S): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * For each endpoint in an `HttpApiGroup`, update the annotations with a new\n   * context.\n   *\n   * Note that this will only update the annotations before this api is called.\n   */\n  annotateEndpointsContext<I>(context: Context.Context<I>): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n\n  /**\n   * For each endpoint in an `HttpApiGroup`, add an annotation.\n   *\n   * Note that this will only add the annotation to the endpoints before this api\n   * is called.\n   */\n  annotateEndpoints<I, S>(tag: Context.Tag<I, S>, value: S): HttpApiGroup<Id, Endpoints, Error, R, TopLevel>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L41"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "ApiGroup",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ApiGroup<ApiId extends string, Name extends string> {\n  readonly _: unique symbol\n  readonly apiId: ApiId\n  readonly name: Name\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L141"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L24"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any {\n    readonly [TypeId]: TypeId\n    readonly identifier: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L156"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.AnyWithProps",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AnyWithProps = HttpApiGroup<string, HttpApiEndpoint.HttpApiEndpoint.AnyWithProps, any, any, boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L165"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.ToService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ToService<ApiId, A> = A extends\n    HttpApiGroup<infer Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ? ApiGroup<ApiId, Name>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L171"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.WithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type WithName<Group, Name> = Extract<Group, { readonly identifier: Name }>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L179"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Name",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Name<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ? _Name\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L185"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Endpoints",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Endpoints<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ? _Endpoints\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L193"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.EndpointsWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type EndpointsWithName<Group, Name> = Endpoints<WithName<Group, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L201"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Error<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ? _Error\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L207"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.AddContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AddContext<Group, R> = [R] extends [never] ? Group :\n    Group extends HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ?\n      HttpApiGroup<_Name, _Endpoints, _Error, _R | R, _TopLevel>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L215"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Provides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Provides<Group> = HttpApiMiddleware.HttpApiMiddleware.ExtractProvides<Middleware<Group>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L224"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.ErrorWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorWithName<Group, Name> = Error<WithName<Group, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L230"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ?\n    HttpApiMiddleware.HttpApiMiddleware.Without<_R> :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L236"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.Middleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Middleware<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ?\n    HttpApiMiddleware.HttpApiMiddleware.Only<_R> :\n    never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L245"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.ClientContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ClientContext<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel> ?\n      | _R\n      | HttpApiEndpoint.HttpApiEndpoint.Context<_Endpoints>\n      | HttpApiEndpoint.HttpApiEndpoint.ErrorContext<_Endpoints>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L254"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.ErrorContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorContext<Group> = Group extends\n    HttpApiGroup<infer _Name, infer _Endpoints, infer _Error, infer _R, infer _TopLevel>\n    ? HttpApiMiddleware.HttpApiMiddleware.Without<_R> | HttpApiEndpoint.HttpApiEndpoint.ErrorContext<_Endpoints>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L265"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.ContextWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ContextWithName<Group, Name> = Context<WithName<Group, Name>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L274"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiGroup.ts",
      "path": "src/HttpApiGroup.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup.MiddlewareWithName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type MiddlewareWithName<Group, Name> = Middleware<\n    WithName<Group, Name>\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiGroup.ts#L280"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L16"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "SecurityTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const SecurityTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L28"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "isSecurity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isSecurity: (u: TagClassAny) => u is TagClassSecurityAny",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L40"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "Tag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Tag: <Self>() => <const Name extends string, const Options extends { readonly optional?: boolean; readonly failure?: Schema.Schema.All; readonly provides?: Context.Tag<any, any>; readonly security?: Record<string, HttpApiSecurity.HttpApiSecurity>; }>(id: Name, options?: Options | undefined) => TagClass<Self, Name, Options>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L267"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpApiMiddleware<Provides, E> extends Effect.Effect<Provides, E, HttpRouter.HttpRouter.Provided> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L46"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClassAny",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassAny extends Context.Tag<any, HttpApiMiddleware.Any> {\n  readonly [TypeId]: TypeId\n  readonly optional: boolean\n  readonly provides?: Context.Tag<any, any>\n  readonly failure: Schema.Schema.All\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L247"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClassSecurityAny",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TagClassSecurityAny extends TagClassAny {\n  readonly [SecurityTypeId]: SecurityTypeId\n  readonly security: Record<string, HttpApiSecurity.HttpApiSecurity>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L258"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L22"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "SecurityTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type SecurityTypeId = typeof SecurityTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L34"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddlewareSecurity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HttpApiMiddlewareSecurity<Security, Provides, E> = {\n  readonly [K in keyof Security]: (\n    _: HttpApiSecurity.HttpApiSecurity.Type<Security[K]>\n  ) => Effect.Effect<Provides, E, HttpRouter.HttpRouter.Provided>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L52"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type TagClass<Self, Name, Options> = Options extends { readonly security: Record<string, HttpApiSecurity.HttpApiSecurity> } ? TagClass.BaseSecurity<\n    Self,\n    Name,\n    Options,\n    Simplify<\n      HttpApiMiddlewareSecurity<\n        Options[\"security\"],\n        TagClass.Service<Options>,\n        TagClass.FailureService<Options>\n      >\n    >,\n    Options[\"security\"]\n  >\n  : TagClass.Base<\n    Self,\n    Name,\n    Options,\n    HttpApiMiddleware<\n      TagClass.Service<Options>,\n      TagClass.FailureService<Options>\n    >\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L122"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Any {\n    readonly [TypeId]: TypeId\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L67"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.AnyId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface AnyId {\n    readonly [TypeId]: {\n      readonly provides: any\n    }\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L75"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.Provides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Provides<A> = A extends { readonly [TypeId]: { readonly provides: infer P } } ? P : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L85"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.ExtractProvides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ExtractProvides<A> = Provides<Only<A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L91"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Error<A> = A extends { readonly [TypeId]: { readonly failure: infer E } } ? E : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L97"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.ErrorContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type ErrorContext<A> = A extends { readonly [TypeId]: { readonly failureContext: infer R } } ? R : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L103"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.Only",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Only<R> = Extract<R, AnyId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L109"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware.Without",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Without<R> = Exclude<R, AnyId>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L115"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.Base",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Base<Self, Name extends string, Options, Service> extends Context.Tag<Self, Service> {\n    new(_: never):\n      & Context.TagClassShape<Name, Service>\n      & {\n        readonly [TypeId]: {\n          readonly provides: Provides<Options>\n          readonly failure: Failure<Options>\n          readonly failureContext: FailureContext<Options>\n        }\n      }\n    readonly [TypeId]: TypeId\n    readonly optional: Optional<Options>\n    readonly failure: FailureSchema<Options>\n    readonly provides: Options extends { readonly provides: Context.Tag<any, any> } ? Options[\"provides\"]\n      : undefined\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L210"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.BaseSecurity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface BaseSecurity<\n    Self,\n    Name extends string,\n    Options,\n    Service,\n    Security extends Record<string, HttpApiSecurity.HttpApiSecurity>\n  > extends Base<Self, Name, Options, Service> {\n    readonly [SecurityTypeId]: SecurityTypeId\n    readonly security: Security\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L231"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.Provides",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Provides<Options> = Options extends {\n    readonly provides: Context.Tag<any, any>\n    readonly optional?: false\n  } ? Context.Tag.Identifier<Options[\"provides\"]>\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L158"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Service<Options> = Options extends { readonly provides: Context.Tag<any, any> }\n    ? Context.Tag.Service<Options[\"provides\"]>\n    : void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L168"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.FailureSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureSchema<Options> = Options extends\n    { readonly failure: Schema.Schema.All; readonly optional?: false } ? Options[\"failure\"]\n    : typeof Schema.Never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L176"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.Failure",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Failure<Options> = Options extends\n    { readonly failure: Schema.Schema<infer _A, infer _I, infer _R>; readonly optional?: false } ? _A\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L184"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.FailureContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureContext<Options> = Schema.Schema.Context<FailureSchema<Options>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L192"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.FailureService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type FailureService<Options> = Optional<Options> extends true ? unknown : Failure<Options>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L198"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiMiddleware.ts",
      "path": "src/HttpApiMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "TagClass.Optional",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Optional<Options> = Options extends { readonly optional: true } ? true : false",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiMiddleware.ts#L204"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiScalar.ts",
      "path": "src/HttpApiScalar.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (options?: { readonly path?: `/${string}` | undefined; readonly source?: ScalarScriptSource; readonly scalar?: ScalarConfig; }) => Layer<never, never, Api>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiScalar.ts#L127"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar.ts",
      "path": "src/HttpApiScalar.ts"
    },
    "project": "@effect/platform",
    "name": "ScalarThemeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type ScalarThemeId = | \"alternate\"\n  | \"default\"\n  | \"moon\"\n  | \"purple\"\n  | \"solarized\"\n  | \"bluePlanet\"\n  | \"deepSpace\"\n  | \"saturn\"\n  | \"kepler\"\n  | \"mars\"\n  | \"none\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiScalar.ts#L17"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar.ts",
      "path": "src/HttpApiScalar.ts"
    },
    "project": "@effect/platform",
    "name": "ScalarScriptSource",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model\n\ncdn: `https://cdn.jsdelivr.net/npm/@scalar/api-reference@${source.version}/dist/browser/standalone.min.js`",
    "signature": "type ScalarScriptSource = | string\n  | { type: \"default\" }\n  | {\n    type: \"cdn\"\n    version?: \"latest\" | (string & {})\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiScalar.ts#L36"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiScalar.ts",
      "path": "src/HttpApiScalar.ts"
    },
    "project": "@effect/platform",
    "name": "ScalarConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type ScalarConfig = {\n  /** A string to use one of the color presets */\n  theme?: ScalarThemeId\n  /** The layout to use for the references */\n  layout?: \"modern\" | \"classic\"\n  /** URL to a request proxy for the API client */\n  proxy?: string\n  /** Whether the spec input should show */\n  isEditable?: boolean\n  /** Whether to show the sidebar */\n  showSidebar?: boolean\n  /**\n   * Whether to show models in the sidebar, search, and content.\n   *\n   * Default: `false`\n   */\n  hideModels?: boolean\n  /**\n   * Whether to show the “Download OpenAPI Document” button\n   *\n   * Default: `false`\n   */\n  hideDownloadButton?: boolean\n  /**\n   * Whether to show the “Test Request” button\n   *\n   * Default: `false`\n   */\n  hideTestRequestButton?: boolean\n  /**\n   * Whether to show the sidebar search bar\n   *\n   * Default: `false`\n   */\n  hideSearch?: boolean\n  /** Whether dark mode is on or off initially (light mode) */\n  darkMode?: boolean\n  /** forceDarkModeState makes it always this state no matter what*/\n  forceDarkModeState?: \"dark\" | \"light\"\n  /** Whether to show the dark mode toggle */\n  hideDarkModeToggle?: boolean\n  /**\n   * Path to a favicon image\n   *\n   * Default: `undefined`\n   * Example: '/favicon.svg'\n   */\n  favicon?: string\n  /** Custom CSS to be added to the page */\n  customCss?: string\n  /**\n   * The baseServerURL is used when the spec servers are relative paths and we are using SSR.\n   * On the client we can grab the window.location.origin but on the server we need\n   * to use this prop.\n   *\n   * Default: `undefined`\n   * Example: 'http://localhost:3000'\n   */\n  baseServerURL?: string\n  /**\n   * We’re using Inter and JetBrains Mono as the default fonts. If you want to use your own fonts, set this to false.\n   *\n   * Default: `true`\n   */\n  withDefaultFonts?: boolean\n  /**\n   * By default we only open the relevant tag based on the url, however if you want all the tags open by default then set this configuration option :)\n   *\n   * Default: `false`\n   */\n  defaultOpenAllTags?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiScalar.ts#L50"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationMultipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationMultipart: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationMultipartStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationMultipartStream: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationStatus: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L35"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationEmptyDecodeable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationEmptyDecodeable: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L41"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationEncoding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationEncoding: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L49"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnnotationParam",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const AnnotationParam: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L55"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "param",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "path params",
    "signature": "declare const param: { <Name extends string>(name: Name): <S extends Schema.Schema.Any | Schema.PropertySignature.Any>(schema: S & ([Schema.Schema.Encoded<S> & {}] extends [string] ? unknown : \"Schema must be encodable to a string\")) => Param<Name, S>; <Name extends string, S extends Schema.Schema.Any | Schema.PropertySignature.Any>(name: Name, schema: S & ([Schema.Schema.Encoded<S> & {}] extends [string] ? unknown : \"Schema must be encodable to a string\")): Param<Name, S>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L267"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "asEmpty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "declare const asEmpty: { <S extends Schema.Schema.Any>(options: { readonly status: number; readonly decode: LazyArg<Schema.Schema.Type<S>>; }): (self: S) => asEmpty<S>; <S extends Schema.Schema.Any>(self: S, options: { readonly status: number; readonly decode: LazyArg<Schema.Schema.Type<S>>; }): asEmpty<S>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L310"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Created",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "declare const Created: Created",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L356"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Accepted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "declare const Accepted: Accepted",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L370"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "NoContent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "declare const NoContent: NoContent",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L384"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "declare const MultipartTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L390"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartStreamTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "declare const MultipartStreamTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L420"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "withEncoding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const withEncoding: { <A extends Schema.Schema.Any, Kind extends Encoding[\"kind\"]>(options: { readonly kind: Kind; readonly contentType?: string | undefined; } & Encoding.Validate<A, Kind>): (self: A) => A; <A extends Schema.Schema.Any, Kind extends Encoding[\"kind\"]>(self: A, options: { readonly kind: Kind; readonly contentType?: string | undefined; } & Encoding.Validate<A, Kind>): A; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L497"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "extractAnnotations",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const extractAnnotations: (ast: AST.Annotations) => AST.Annotations",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L63"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getStatus: (ast: AST.AST, defaultStatus: number) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L100"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getEmptyDecodeable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getEmptyDecodeable: (ast: AST.AST) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L107"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getMultipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getMultipart: (ast: AST.AST) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L114"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getMultipartStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getMultipartStream: (ast: AST.AST) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L120"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getEncoding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getEncoding: (ast: AST.AST, fallback?: Encoding) => Encoding",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L132"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getParam",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const getParam: (ast: AST.AST | Schema.PropertySignature.AST) => string | undefined",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L139"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "annotations",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const annotations: <A>(annotations: Schema.Annotations.Schema<NoInfer<A>> & { readonly status?: number | undefined; }) => Schema.Annotations.Schema<A>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L150"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "isVoid",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const isVoid: (ast: AST.AST) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L166"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getStatusSuccessAST",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const getStatusSuccessAST: (ast: AST.AST) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L187"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getStatusSuccess",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const getStatusSuccess: <A extends Schema.Schema.Any>(self: A) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L193"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getStatusErrorAST",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const getStatusErrorAST: (ast: AST.AST) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L199"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "getStatusError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "reflection",
    "signature": "declare const getStatusError: <A extends Schema.Schema.All>(self: A) => number",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L205"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "UnionUnify",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const UnionUnify: <A extends Schema.Schema.All, B extends Schema.Schema.All>(self: A, that: B) => Schema.Schema<A[\"Type\"] | B[\"Type\"], A[\"Encoded\"] | B[\"Encoded\"], A[\"Context\"] | B[\"Context\"]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L242"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "declare const Empty: (status: number) => typeof Schema.Void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L296"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Multipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "declare const Multipart: <S extends Schema.Schema.Any>(self: S) => Multipart<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L411"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "declare const MultipartStream: <S extends Schema.Schema.Any>(self: S) => MultipartStream<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L444"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Text",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const Text: (options?: { readonly contentType?: string; }) => typeof Schema.String",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L534"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const Uint8Array: (options?: { readonly contentType?: string; }) => typeof Schema.Uint8ArrayFromSelf",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L542"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "deunionize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const deunionize: (schemas: Set<Schema.Schema.Any>, schema: Schema.Schema.Any) => void",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L554"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "EmptyError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "declare const EmptyError: <Self>() => <const Tag extends string>(options: { readonly tag: Tag; readonly status: number; }) => EmptyErrorClass<Self, Tag>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L594"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Param",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "path params",
    "signature": "export interface Param<Name extends string, S extends Schema.Schema.Any | Schema.PropertySignature.Any>\n  extends Schema.Schema<Schema.Schema.Type<S>, Schema.Schema.Encoded<S>, Schema.Schema.Context<S>>\n{\n  readonly [AnnotationParam]: {\n    readonly name: Name\n    readonly schema: S\n  }\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L254"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "asEmpty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface asEmpty<\n  S extends Schema.Schema.Any\n> extends Schema.transform<typeof Schema.Void, S> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L302"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Created",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface Created extends Void$ {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L348"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Accepted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface Accepted extends Void$ {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L362"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "NoContent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty response",
    "signature": "export interface NoContent extends Void$ {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L376"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Multipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "export interface Multipart<S extends Schema.Schema.Any>\n  extends\n    Schema.Schema<Schema.Schema.Type<S> & Brand<MultipartTypeId>, Schema.Schema.Encoded<S>, Schema.Schema.Context<S>>\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L402"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "export interface MultipartStream<S extends Schema.Schema.Any> extends\n  Schema.Schema<\n    Schema.Schema.Type<S> & Brand<MultipartStreamTypeId>,\n    Schema.Schema.Encoded<S>,\n    Schema.Schema.Context<S>\n  >\n{}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L432"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Encoding",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "export interface Encoding {\n  readonly kind: \"Json\" | \"UrlParams\" | \"Uint8Array\" | \"Text\"\n  readonly contentType: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L470"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "EmptyErrorClass",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "empty errors",
    "signature": "export interface EmptyErrorClass<Self, Tag> extends Schema.Schema<Self, void> {\n  new(_: void): { readonly _tag: Tag } & Effect.Effect<never, Self>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L586"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "type MultipartTypeId = typeof MultipartTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L396"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartStreamTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "multipart",
    "signature": "type MultipartStreamTypeId = typeof MultipartStreamTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L426"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSchema.ts",
      "path": "src/HttpApiSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Encoding.Validate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "type Validate<A, Kind> = Kind extends \"Json\" ? {}\n    : Kind extends \"UrlParams\" ? [A[\"Encoded\"]] extends [Readonly<Record<string, string | undefined>>] ? {}\n      : `'UrlParams' kind can only be encoded to 'Record<string, string | undefined>'`\n    : Kind extends \"Uint8Array\" ?\n      [A[\"Encoded\"]] extends [Uint8Array] ? {} : `'Uint8Array' kind can only be encoded to 'Uint8Array'`\n    : Kind extends \"Text\" ? [A[\"Encoded\"]] extends [string] ? {} : `'Text' kind can only be encoded to 'string'`\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSchema.ts#L484"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L14"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "bearer",
    "description": "Create an Bearer token security scheme.\n\nYou can implement some api middleware for this security scheme using\n`HttpApiBuilder.middlewareSecurity`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const bearer: Bearer",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L102"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "basic",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const basic: Basic",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L136"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "annotateContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const annotateContext: { <I>(context: Context.Context<I>): <A extends HttpApiSecurity>(self: A) => A; <A extends HttpApiSecurity, I>(self: A, context: Context.Context<I>): A; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L145"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "annotate",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const annotate: { <I, S>(tag: Context.Tag<I, S>, value: S): <A extends HttpApiSecurity>(self: A) => A; <A extends HttpApiSecurity, I, S>(self: A, tag: Context.Tag<I, S>, value: S): A; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L161"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "apiKey",
    "description": "Create an API key security scheme.\n\nYou can implement some api middleware for this security scheme using\n`HttpApiBuilder.middlewareSecurity`.\n\nTo set the correct cookie in a handler, you can use\n`HttpApiBuilder.securitySetCookie`.\n\nThe default value for `in` is \"header\".",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const apiKey: (options: { readonly key: string; readonly in?: \"header\" | \"query\" | \"cookie\" | undefined; }) => ApiKey",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L121"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "Bearer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Bearer extends HttpApiSecurity.Proto<Redacted> {\n  readonly _tag: \"Bearer\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L55"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "ApiKey",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ApiKey extends HttpApiSecurity.Proto<Redacted> {\n  readonly _tag: \"ApiKey\"\n  readonly in: \"header\" | \"query\" | \"cookie\"\n  readonly key: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L63"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "Basic",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Basic extends HttpApiSecurity.Proto<Credentials> {\n  readonly _tag: \"Basic\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L73"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "Credentials",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Credentials {\n  readonly username: string\n  readonly password: Redacted\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L81"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSecurity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HttpApiSecurity = Bearer | ApiKey | Basic",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L26"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSecurity.Proto",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Proto<out A> extends Pipeable {\n    readonly [TypeId]: {\n      readonly _A: Covariant<A>\n    }\n    readonly annotations: Context.Context<never>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L37"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApiSecurity.ts",
      "path": "src/HttpApiSecurity.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSecurity.Type",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Type<A> = A extends Proto<infer Out> ? Out : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSecurity.ts#L48"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApiSwagger.ts",
      "path": "src/HttpApiSwagger.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": "Exported layer mounting Swagger/OpenAPI documentation UI.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (options?: { readonly path?: `/${string}` | undefined; }) => Layer<never, never, Api>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApiSwagger.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "currentPreResponseHandlers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const currentPreResponseHandlers: FiberRef.FiberRef<Option.Option<PreResponseHandler>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L134"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "appendPreResponseHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const appendPreResponseHandler: (handler: PreResponseHandler) => Effect.Effect<void>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L141"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "withPreResponseHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withPreResponseHandler: ((handler: PreResponseHandler) => <A, E, R>(self: HttpApp<A, E, R>) => HttpApp<A, E, R>) & (<A, E, R>(self: HttpApp<A, E, R>, handler: PreResponseHandler) => HttpApp<A, E, R>)",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L148"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "toWebHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toWebHandler: <E>(self: Default<E, Scope.Scope>, middleware?: HttpMiddleware | undefined) => (request: Request, context?: Context.Context<never> | undefined) => Promise<Response>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L187"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "toHandled",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toHandled: <E, R, _, EH, RH>(self: Default<E, R>, handleResponse: (request: ServerRequest.HttpServerRequest, response: ServerResponse.HttpServerResponse) => Effect.Effect<_, EH, RH>, middleware?: HttpMiddleware | undefined) => Effect.Effect<void, never, Exclude<R | RH | ServerRequest.HttpServerRequest, Scope.Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L42"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "toWebHandlerRuntime",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toWebHandlerRuntime: <R>(runtime: Runtime.Runtime<R>) => <E>(self: Default<E, R | Scope.Scope>, middleware?: HttpMiddleware | undefined) => (request: Request, context?: Context.Context<never> | undefined) => Promise<Response>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L154"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "toWebHandlerLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toWebHandlerLayer: <E, R, RE>(self: Default<E, R | Scope.Scope>, layer: Layer.Layer<R, RE>, middleware?: HttpMiddleware | undefined) => { readonly close: () => Promise<void>; readonly handler: (request: Request, context?: Context.Context<never> | undefined) => Promise<Response>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L198"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HttpApp<A, E, R> = Effect.Effect<\n  A,\n  E,\n  R | ServerRequest.HttpServerRequest\n>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L24"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "Default",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Default<E, R> = HttpApp<ServerResponse.HttpServerResponse, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L34"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpApp.ts",
      "path": "src/HttpApp.ts"
    },
    "project": "@effect/platform",
    "name": "PreResponseHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PreResponseHandler = (\n  request: ServerRequest.HttpServerRequest,\n  response: ServerResponse.HttpServerResponse\n) => Effect.Effect<ServerResponse.HttpServerResponse, ServerError.ResponseError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpApp.ts#L125"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L71"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBodyError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare const HttpBodyError: (reason: ErrorReason) => HttpBodyError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: Empty",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L118"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "raw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const raw: (body: unknown, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined) => Raw",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L133"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "uint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const uint8Array: (body: globalThis.Uint8Array, contentType?: string) => Uint8Array",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L156"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "text",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const text: (body: string, contentType?: string) => Uint8Array",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L162"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unsafeJson: (body: unknown) => Uint8Array",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L168"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "json",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const json: (body: unknown) => Effect.Effect<Uint8Array, HttpBodyError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L174"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "jsonSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const jsonSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => (body: A) => Effect.Effect<Uint8Array, HttpBodyError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L180"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "urlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const urlParams: (urlParams: UrlParams.UrlParams) => Uint8Array",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L188"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "formData",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "FormData",
    "signature": "declare const formData: (body: globalThis.FormData) => FormData",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L203"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "formDataRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "FormData",
    "signature": "declare const formDataRecord: (entries: FormDataInput) => FormData",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L221"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const stream: (body: Stream_.Stream<globalThis.Uint8Array, unknown>, contentType?: string, contentLength?: number, etag?: string) => Stream",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L238"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "file",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const file: (path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }) => Effect.Effect<Stream, PlatformError.PlatformError, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L249"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "fileInfo",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fileInfo: (path: string, info: FileSystem.File.Info, options?: FileSystem.StreamOptions & { readonly contentType?: string; }) => Effect.Effect<Stream, PlatformError.PlatformError, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L258"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "fileWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fileWeb: (file: HttpBody.FileLike) => Stream",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L268"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isHttpBody: (u: unknown) => u is HttpBody",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L31"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBodyError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface HttpBodyError {\n  readonly [ErrorTypeId]: ErrorTypeId\n  readonly _tag: \"HttpBodyError\"\n  readonly reason: ErrorReason\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L83"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "Empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Empty extends HttpBody.Proto {\n  readonly _tag: \"Empty\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L110"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "Raw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Raw extends HttpBody.Proto {\n  readonly _tag: \"Raw\"\n  readonly body: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L124"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Uint8Array extends HttpBody.Proto {\n  readonly _tag: \"Uint8Array\"\n  readonly body: globalThis.Uint8Array\n  readonly contentType: string\n  readonly contentLength: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L145"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "FormData",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface FormData extends HttpBody.Proto {\n  readonly _tag: \"FormData\"\n  readonly formData: globalThis.FormData\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L194"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "Stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Stream extends HttpBody.Proto {\n  readonly _tag: \"Stream\"\n  readonly stream: Stream_.Stream<globalThis.Uint8Array, unknown>\n  readonly contentType: string\n  readonly contentLength?: number | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L227"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HttpBody = Empty | Raw | Uint8Array | FormData | Stream",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L37"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type ErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L77"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorReason",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "type ErrorReason = {\n  readonly _tag: \"JsonError\"\n  readonly error: unknown\n} | {\n  readonly _tag: \"SchemaError\"\n  readonly error: ParseResult.ParseError\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L99"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "FormDataInput",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "FormData",
    "signature": "type FormDataInput = Record<string, FormDataCoercible | ReadonlyArray<FormDataCoercible>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L209"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "FormDataCoercible",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "FormData",
    "signature": "type FormDataCoercible = string | number | boolean | File | Blob | null | undefined",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L215"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBody.Proto",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Proto extends Inspectable {\n    readonly [TypeId]: TypeId\n    readonly _tag: string\n    readonly contentType?: string | undefined\n    readonly contentLength?: number | undefined\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L47"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpBody.ts",
      "path": "src/HttpBody.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBody.FileLike",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface FileLike {\n    readonly name: string\n    readonly lastModified: number\n    readonly size: number\n    readonly stream: () => unknown\n    readonly type: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpBody.ts#L58"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L26"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const HttpClient: Context.Tag<HttpClient, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L105"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "execute",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const execute: (request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const get: (url: string | URL, options?: ClientRequest.Options.NoBody | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L119"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "head",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const head: (url: string | URL, options?: ClientRequest.Options.NoBody | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L132"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "post",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const post: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L145"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "patch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const patch: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L158"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "put",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const put: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L171"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "del",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const del: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L184"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const options: (url: string | URL, options?: ClientRequest.Options.NoUrl | undefined) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError, HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L197"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "catchAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "declare const catchAll: { <E, E2, R2>(f: (e: E) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E2, R2 | R>; <E, R, A2, E2, R2>(self: HttpClient.With<E, R>, f: (e: E) => Effect.Effect<A2, E2, R2>): HttpClient.With<E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L210"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "catchTag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "declare const catchTag: { <K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E, E1, R1>(tag: K, f: (e: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E1 | Exclude<E, { _tag: K; }>, R1 | R>; <R, E, K extends E extends { _tag: string; } ? E[\"_tag\"] : never, R1, E1>(self: HttpClient.With<E, R>, tag: K, f: (e: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E1 | Exclude<E, { _tag: K; }>, R1 | R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L224"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "catchTags",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "declare const catchTags: { <E, Cases extends { [K in Extract<E, { _tag: string; }>[\"_tag\"]]+?: (error: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, any, any>; } & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string; }>[\"_tag\"]>]: never; })>(cases: Cases): <R>(self: HttpClient.With<E, R>) => HttpClient.With<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>; <E extends { _tag: string; }, R, Cases extends { [K in Extract<E, { _tag: string; }>[\"_tag\"]]+?: (error: Extract<E, { _tag: K; }>) => Effect.Effect<ClientResponse.HttpClientResponse, any, any>; } & (unknown extends E ? {} : { [K in Exclude<keyof Cases, Extract<E, { _tag: string; }>[\"_tag\"]>]: never; })>(self: HttpClient.With<E, R>, cases: Cases): HttpClient.With<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L240"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "filterOrElse",
    "description": "Filters the result of a response, or runs an alternative effect if the predicate fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterOrElse: { <E2, R2>(predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orElse: (response: ClientResponse.HttpClientResponse) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpClient.With<E, R>, predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orElse: (response: ClientResponse.HttpClientResponse) => Effect.Effect<ClientResponse.HttpClientResponse, E2, R2>): HttpClient.With<E2 | E, R2 | R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L295"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "filterOrFail",
    "description": "Filters the result of a response, or throws an error if the predicate fails.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterOrFail: { <E2>(predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orFailWith: (response: ClientResponse.HttpClientResponse) => E2): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E2 | E, R>; <E, R, E2>(self: HttpClient.With<E, R>, predicate: Predicate.Predicate<ClientResponse.HttpClientResponse>, orFailWith: (response: ClientResponse.HttpClientResponse) => E2): HttpClient.With<E2 | E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L313"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "filterStatus",
    "description": "Filters responses by HTTP status code.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterStatus: { (f: (status: number) => boolean): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | Error.ResponseError, R>; <E, R>(self: HttpClient.With<E, R>, f: (status: number) => boolean): HttpClient.With<E | Error.ResponseError, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L331"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "filterStatusOk",
    "description": "Filters responses that return a 2xx status code.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterStatusOk: <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | Error.ResponseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L342"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "makeWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeWith: <E2, R2, E, R>(postprocess: (request: Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>, preprocess: HttpClient.Preprocess<E2, R2>) => HttpClient.With<E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L349"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (f: (request: ClientRequest.HttpClientRequest, url: URL, signal: AbortSignal, fiber: RuntimeFiber<ClientResponse.HttpClientResponse, Error.HttpClientError>) => Effect.Effect<ClientResponse.HttpClientResponse, Error.HttpClientError>) => HttpClient",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L360"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "transform",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const transform: { <E, R, E1, R1>(f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>, request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): (self: HttpClient.With<E, R>) => HttpClient.With<E | E1, R | R1>; <E, R, E1, R1>(self: HttpClient.With<E, R>, f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>, request: ClientRequest.HttpClientRequest) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E | E1, R | R1>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L373"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "transformResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const transformResponse: { <E, R, E1, R1>(f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): (self: HttpClient.With<E, R>) => HttpClient.With<E1, R1>; <E, R, E1, R1>(self: HttpClient.With<E, R>, f: (effect: Effect.Effect<ClientResponse.HttpClientResponse, E, R>) => Effect.Effect<ClientResponse.HttpClientResponse, E1, R1>): HttpClient.With<E1, R1>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L393"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "mapRequest",
    "description": "Appends a transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const mapRequest: { (f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L413"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "mapRequestEffect",
    "description": "Appends an effectful transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const mapRequestEffect: { <E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): HttpClient.With<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L429"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "mapRequestInput",
    "description": "Prepends a transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const mapRequestInput: { (f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => ClientRequest.HttpClientRequest): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L445"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "mapRequestInputEffect",
    "description": "Prepends an effectful transformation of the request object before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const mapRequestInputEffect: { <E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<ClientRequest.HttpClientRequest, E2, R2>): HttpClient.With<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L461"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "retry",
    "description": "Retries the request based on a provided schedule or policy.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "declare const retry: { <E, O extends NoExcessProperties<Effect.Retry.Options<E>, O>>(options: O): <R>(self: HttpClient.With<E, R>) => Retry.Return<R, E, O>; <B, E, R1>(policy: Schedule.Schedule<B, NoInfer<E>, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R1 | R>; <E, R, O extends NoExcessProperties<Effect.Retry.Options<E>, O>>(self: HttpClient.With<E, R>, options: O): Retry.Return<R, E, O>; <E, R, B, R1>(self: HttpClient.With<E, R>, policy: Schedule.Schedule<B, E, R1>): HttpClient.With<E, R1 | R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L499"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "retryTransient",
    "description": "Retries common transient errors, such as rate limiting, timeouts or network issues.\n\nSpecifying a `while` predicate allows you to consider other errors as\ntransient.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "declare const retryTransient: { <B, E, R1 = never>(options: { readonly while?: Predicate.Predicate<NoInfer<E>>; readonly schedule?: Schedule.Schedule<B, NoInfer<E>, R1>; readonly times?: number; } | Schedule.Schedule<B, NoInfer<E>, R1>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R1 | R>; <E, R, B, R1 = never>(self: HttpClient.With<E, R>, options: { readonly while?: Predicate.Predicate<NoInfer<E>>; readonly schedule?: Schedule.Schedule<B, NoInfer<E>, R1>; readonly times?: number; } | Schedule.Schedule<B, NoInfer<E>, R1>): HttpClient.With<E, R1 | R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L525"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "tap",
    "description": "Performs an additional effect after a successful request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const tap: { <_, E2, R2>(f: (response: ClientResponse.HttpClientResponse) => Effect.Effect<_, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, _, E2, R2>(self: HttpClient.With<E, R>, f: (response: ClientResponse.HttpClientResponse) => Effect.Effect<_, E2, R2>): HttpClient.With<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L549"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "tapError",
    "description": "Performs an additional effect after an unsuccessful request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const tapError: { <_, E, E2, R2>(f: (e: NoInfer<E>) => Effect.Effect<_, E2, R2>): <R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, _, E2, R2>(self: HttpClient.With<E, R>, f: (e: NoInfer<E>) => Effect.Effect<_, E2, R2>): HttpClient.With<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L565"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "tapRequest",
    "description": "Performs an additional effect on the request before sending it.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "mapping & sequencing",
    "signature": "declare const tapRequest: { <_, E2, R2>(f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<_, E2, R2>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E | E2, R | R2>; <E, R, _, E2, R2>(self: HttpClient.With<E, R>, f: (a: ClientRequest.HttpClientRequest) => Effect.Effect<_, E2, R2>): HttpClient.With<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L581"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "withCookiesRef",
    "description": "Associates a `Ref` of cookies with the client for handling cookies across requests.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "cookies",
    "signature": "declare const withCookiesRef: { (ref: Ref<Cookies>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, ref: Ref<Cookies>): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L597"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "followRedirects",
    "description": "Follows HTTP redirects up to a specified number of times.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "redirects",
    "signature": "declare const followRedirects: { (maxRedirects?: number | undefined): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, maxRedirects?: number | undefined): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L608"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "currentTracerDisabledWhen",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const currentTracerDisabledWhen: FiberRef.FiberRef<Predicate.Predicate<ClientRequest.HttpClientRequest>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L617"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhen",
    "description": "Disables tracing for specific requests based on a provided predicate.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const withTracerDisabledWhen: { (predicate: Predicate.Predicate<ClientRequest.HttpClientRequest>): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, predicate: Predicate.Predicate<ClientRequest.HttpClientRequest>): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L626"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "currentTracerPropagation",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const currentTracerPropagation: FiberRef.FiberRef<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L640"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "withTracerPropagation",
    "description": "Enables or disables tracing propagation for the request.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const withTracerPropagation: { (enabled: boolean): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, enabled: boolean): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L648"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "layerMergedContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const layerMergedContext: <E, R>(effect: Effect.Effect<HttpClient, E, R>) => Layer<HttpClient, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L656"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "SpanNameGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const SpanNameGenerator: Context.Reference<SpanNameGenerator, (request: ClientRequest.HttpClientRequest) => string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L672"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "withSpanNameGenerator",
    "description": "Customizes the span names for tracing.\n\n```ts\nimport { FetchHttpClient, HttpClient } from \"@effect/platform\"\nimport { NodeRuntime } from \"@effect/platform-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function* () {\n  const client = (yield* HttpClient.HttpClient).pipe(\n    // Customize the span names for this HttpClient\n    HttpClient.withSpanNameGenerator(\n      (request) => `http.client ${request.method} ${request.url}`\n    )\n  )\n\n  yield* client.get(\"https://jsonplaceholder.typicode.com/posts/1\")\n}).pipe(Effect.provide(FetchHttpClient.layer), NodeRuntime.runMain)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const withSpanNameGenerator: { (f: (request: ClientRequest.HttpClientRequest) => string): <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R>; <E, R>(self: HttpClient.With<E, R>, f: (request: ClientRequest.HttpClientRequest) => string): HttpClient.With<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L700"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "withScope",
    "description": "Ties the lifetime of the `HttpClientRequest` to a `Scope`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Scope",
    "signature": "declare const withScope: <E, R>(self: HttpClient.With<E, R>) => HttpClient.With<E, R | Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L713"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClient extends HttpClient.With<Error.HttpClientError> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L38"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "SpanNameGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "export interface SpanNameGenerator {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L664"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L32"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient.With",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface With<E, R = never> extends Pipeable, Inspectable {\n    readonly [TypeId]: TypeId\n    readonly execute: (\n      request: ClientRequest.HttpClientRequest\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n\n    readonly get: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoBody\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly head: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoBody\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly post: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoUrl\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly patch: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoUrl\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly put: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoUrl\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly del: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoUrl\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n    readonly options: (\n      url: string | URL,\n      options?: ClientRequest.Options.NoUrl\n    ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L48"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient.Preprocess",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Preprocess<E, R> = (\n    request: ClientRequest.HttpClientRequest\n  ) => Effect.Effect<ClientRequest.HttpClientRequest, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L88"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient.Postprocess",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Postprocess<E, R> = (\n    request: Effect.Effect<ClientRequest.HttpClientRequest, E, R>\n  ) => Effect.Effect<ClientResponse.HttpClientResponse, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L96"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClient.ts",
      "path": "src/HttpClient.ts"
    },
    "project": "@effect/platform",
    "name": "Retry.Return",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error handling",
    "signature": "type HttpClient.With<(O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R>; } ? E : O extends { until: Predicate.Refinement<E, infer E2>; } ? E2 : E) | (O extends { while: (...args: Array<any>) => Effect.Effect<infer _A, infer E, infer _R>; } ? E : never) | (O extends { until: (...args: Array<any>) => Effect.Effect<infer _A, infer E, infer _R>; } ? E : never), R | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R>; } ? R : never) | (O extends { while: (...args: Array<any>) => Effect.Effect<infer _A, infer _E, infer R>; } ? R : never) | (O extends { until: (...args: Array<any>) => Effect.Effect<infer _A, infer _E, infer R>; } ? R : never)> = HttpClient.With<\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer _R> } ? E\n      : O extends { until: Predicate.Refinement<E, infer E2> } ? E2\n      : E)\n    | (O extends { while: (...args: Array<any>) => Effect.Effect<infer _A, infer E, infer _R> } ? E : never)\n    | (O extends { until: (...args: Array<any>) => Effect.Effect<infer _A, infer E, infer _R> } ? E : never),\n    | R\n    | (O extends { schedule: Schedule.Schedule<infer _O, infer _I, infer R> } ? R : never)\n    | (O extends { while: (...args: Array<any>) => Effect.Effect<infer _A, infer _E, infer R> } ? R : never)\n    | (O extends { until: (...args: Array<any>) => Effect.Effect<infer _A, infer _E, infer R> } ? R : never)\n  > extends infer Z ? Z : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClient.ts#L480"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "RequestError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class RequestError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L38"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "ResponseError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class ResponseError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L59"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L14"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpClientError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isHttpClientError: (u: unknown) => u is HttpClientError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L20"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientError.ts",
      "path": "src/HttpClientError.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "type HttpClientError = RequestError | ResponseError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientError.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L24"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <M extends HttpMethod>(method: M) => (url: string | URL, options?: (M extends \"GET\" | \"HEAD\" ? Options.NoBody : Options.NoUrl) | undefined) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L82"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const get: (url: string | URL, options?: Options.NoBody) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "post",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const post: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L99"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "patch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const patch: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L105"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "put",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const put: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "del",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const del: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "head",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const head: (url: string | URL, options?: Options.NoBody) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const options: (url: string | URL, options?: Options.NoUrl) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L129"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "modify",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const modify: { (options: Options): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, options: Options): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L135"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setMethod",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setMethod: { (method: HttpMethod): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, method: HttpMethod): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L144"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setHeader",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setHeader: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L153"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setHeaders: { (input: Headers.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: Headers.Input): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L162"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "basicAuth",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const basicAuth: { (username: string | Redacted, password: string | Redacted): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, username: string | Redacted, password: string | Redacted): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L171"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bearerToken",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bearerToken: { (token: string | Redacted): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, token: string | Redacted): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L180"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "accept",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const accept: { (mediaType: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, mediaType: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L189"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "acceptJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const acceptJson: (self: HttpClientRequest) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L198"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setUrl: { (url: string | URL): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, url: string | URL): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L204"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "prependUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const prependUrl: { (path: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, path: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L213"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "appendUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const appendUrl: { (path: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, path: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L222"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "updateUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const updateUrl: { (f: (url: string) => string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, f: (url: string) => string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L231"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setUrlParam",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setUrlParam: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L240"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L249"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "appendUrlParam",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const appendUrlParam: { (key: string, value: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, key: string, value: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L258"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "appendUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const appendUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L267"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setHash",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setHash: { (hash: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, hash: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L276"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "removeHash",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const removeHash: (self: HttpClientRequest) => HttpClientRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L285"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "toUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toUrl: (self: HttpClientRequest) => Option.Option<URL>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L291"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "setBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setBody: { (body: Body.HttpBody): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Body.HttpBody): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L297"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyUint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyUint8Array: { (body: Uint8Array, contentType?: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Uint8Array, contentType?: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L306"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyText",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyText: { (body: string, contentType?: string): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: string, contentType?: string): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L315"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyJson: { (body: unknown): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, Body.HttpBodyError>; (self: HttpClientRequest, body: unknown): Effect.Effect<HttpClientRequest, Body.HttpBodyError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L324"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyUnsafeJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyUnsafeJson: { (body: unknown): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: unknown): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L333"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => { (body: A): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, Body.HttpBodyError, R>; (self: HttpClientRequest, body: A): Effect.Effect<HttpClientRequest, Body.HttpBodyError, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L342"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyUrlParams: { (input: UrlParams.Input): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, input: UrlParams.Input): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L354"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyFormData",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyFormData: { (body: FormData): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: FormData): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L363"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyFormDataRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyFormDataRecord: { (entries: Body.FormDataInput): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, entries: Body.FormDataInput): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L372"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyStream: { (body: Stream.Stream<Uint8Array, unknown>, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, body: Stream.Stream<Uint8Array, unknown>, options?: { readonly contentType?: string | undefined; readonly contentLength?: number | undefined; } | undefined): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L381"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyFile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyFile: { (path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }): (self: HttpClientRequest) => Effect.Effect<HttpClientRequest, PlatformError.PlatformError, FileSystem.FileSystem>; (self: HttpClientRequest, path: string, options?: FileSystem.StreamOptions & { readonly contentType?: string; }): Effect.Effect<HttpClientRequest, PlatformError.PlatformError, FileSystem.FileSystem>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L397"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "bodyFileWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const bodyFileWeb: { (file: Body.HttpBody.FileLike): (self: HttpClientRequest) => HttpClientRequest; (self: HttpClientRequest, file: Body.HttpBody.FileLike): HttpClientRequest; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L413"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClientRequest extends Inspectable, Pipeable {\n  readonly [TypeId]: TypeId\n  readonly method: HttpMethod\n  readonly url: string\n  readonly urlParams: UrlParams.UrlParams\n  readonly hash: Option.Option<string>\n  readonly headers: Headers.Headers\n  readonly body: Body.HttpBody\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L36"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options {\n  readonly method?: HttpMethod | undefined\n  readonly url?: string | URL | undefined\n  readonly urlParams?: UrlParams.Input | undefined\n  readonly hash?: string | undefined\n  readonly headers?: Headers.Input | undefined\n  readonly body?: Body.HttpBody | undefined\n  readonly accept?: string | undefined\n  readonly acceptJson?: boolean | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L50"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L30"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "Options.NoBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface NoBody extends Omit<Options, \"method\" | \"url\" | \"body\"> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L69"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientRequest.ts",
      "path": "src/HttpClientRequest.ts"
    },
    "project": "@effect/platform",
    "name": "Options.NoUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface NoUrl extends Omit<Options, \"method\" | \"url\"> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientRequest.ts#L75"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L38"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "fromWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromWeb: (request: ClientRequest.HttpClientRequest, source: Response) => HttpClientResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L62"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaJson: <R, I extends { readonly status?: number | undefined; readonly headers?: Readonly<Record<string, string>> | undefined; readonly body?: unknown; }, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (self: HttpClientResponse) => Effect.Effect<A, Error.ResponseError | ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L69"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaNoBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaNoBody: <R, I extends { readonly status?: number | undefined; readonly headers?: Readonly<Record<string, string>> | undefined; }, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (self: HttpClientResponse) => Effect.Effect<A, ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L87"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const stream: <E, R>(effect: Effect.Effect<HttpClientResponse, E, R>) => Stream.Stream<Uint8Array, Error.ResponseError | E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L103"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "matchStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "pattern matching",
    "signature": "declare const matchStatus: { <const Cases extends { readonly [status: number]: (_: HttpClientResponse) => any; readonly \"2xx\"?: (_: HttpClientResponse) => any; readonly \"3xx\"?: (_: HttpClientResponse) => any; readonly \"4xx\"?: (_: HttpClientResponse) => any; readonly \"5xx\"?: (_: HttpClientResponse) => any; readonly orElse: (_: HttpClientResponse) => any; }>(cases: Cases): (self: HttpClientResponse) => Cases[keyof Cases] extends (_: any) => infer R ? Unify<R> : never; <const Cases extends { readonly [status: number]: (_: HttpClientResponse) => any; readonly \"2xx\"?: (_: HttpClientResponse) => any; readonly \"3xx\"?: (_: HttpClientResponse) => any; readonly \"4xx\"?: (_: HttpClientResponse) => any; readonly \"5xx\"?: (_: HttpClientResponse) => any; readonly orElse: (_: HttpClientResponse) => any; }>(self: HttpClientResponse, cases: Cases): Cases[keyof Cases] extends (_: any) => infer R ? Unify<R> : never; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "filterStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterStatus: { (f: (status: number) => boolean): (self: HttpClientResponse) => Effect.Effect<HttpClientResponse, Error.ResponseError>; (self: HttpClientResponse, f: (status: number) => boolean): Effect.Effect<HttpClientResponse, Error.ResponseError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L138"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "filterStatusOk",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "filters",
    "signature": "declare const filterStatusOk: (self: HttpClientResponse) => Effect.Effect<HttpClientResponse, Error.ResponseError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L147"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpClientResponse extends IncomingMessage.HttpIncomingMessage<Error.ResponseError> {\n  readonly [TypeId]: TypeId\n  readonly request: ClientRequest.HttpClientRequest\n  readonly status: number\n  readonly cookies: Cookies.Cookies\n  readonly formData: Effect.Effect<FormData, Error.ResponseError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L50"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L44"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L21"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyUrlParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L26"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpClientResponse.ts",
      "path": "src/HttpClientResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaHeaders: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: IncomingMessage.HttpIncomingMessage<E>) => Effect.Effect<A, ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpClientResponse.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "maxBodySize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const maxBodySize: FiberRef.FiberRef<Option.Option<FileSystem.Size>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L88"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "withMaxBodySize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withMaxBodySize: ((size: Option.Option<FileSystem.SizeInput>) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>) & (<A, E, R>(effect: Effect.Effect<A, E, R>, size: Option.Option<FileSystem.SizeInput>) => Effect.Effect<A, E, R>)",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L97"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L49"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyUrlParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: HttpIncomingMessage<E>) => Effect.Effect<A, E | ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L59"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaHeaders: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => <E>(self: HttpIncomingMessage<E>) => Effect.Effect<A, ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L76"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "inspect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const inspect: <E>(self: HttpIncomingMessage<E>, that: object) => object",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L105"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "HttpIncomingMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpIncomingMessage<E> extends Inspectable.Inspectable {\n  readonly [TypeId]: TypeId\n  readonly headers: Headers.Headers\n  readonly remoteAddress: Option.Option<string>\n  readonly json: Effect.Effect<unknown, E>\n  readonly text: Effect.Effect<string, E>\n  readonly urlParamsBody: Effect.Effect<UrlParams.UrlParams, E>\n  readonly arrayBuffer: Effect.Effect<ArrayBuffer, E>\n  readonly stream: Stream.Stream<Uint8Array, E>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L34"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpIncomingMessage.ts",
      "path": "src/HttpIncomingMessage.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpIncomingMessage.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "all",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const all: ReadonlySet<HttpMethod>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L40"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "hasBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const hasBody: (method: HttpMethod) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L35"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "isHttpMethod",
    "description": "Tests if a value is a `HttpMethod`.\n\n**Example**\n\n```ts\nimport { HttpMethod } from \"@effect/platform\"\n\nconsole.log(HttpMethod.isHttpMethod(\"GET\"))\n// true\nconsole.log(HttpMethod.isHttpMethod(\"get\"))\n// false\nconsole.log(HttpMethod.isHttpMethod(1))\n// false\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isHttpMethod: (u: unknown) => u is HttpMethod",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L61"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMethod",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type HttpMethod = | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"PATCH\"\n  | \"HEAD\"\n  | \"OPTIONS\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L5"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMethod.NoBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type NoBody = \"GET\" | \"HEAD\" | \"OPTIONS\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L23"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMethod.ts",
      "path": "src/HttpMethod.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMethod.WithBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type WithBody = Exclude<HttpMethod, NoBody>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMethod.ts#L29"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <M extends HttpMiddleware>(middleware: M) => M",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L37"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "logger",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const logger: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L43"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "loggerDisabled",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const loggerDisabled: FiberRef.FiberRef<boolean>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L49"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "withLoggerDisabled",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withLoggerDisabled: <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L55"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "currentTracerDisabledWhen",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const currentTracerDisabledWhen: FiberRef.FiberRef<Predicate.Predicate<ServerRequest.HttpServerRequest>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L62"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhen",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withTracerDisabledWhen: { (predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>; <A, E, R>(layer: Layer.Layer<A, E, R>, predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): Layer.Layer<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L69"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledWhenEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withTracerDisabledWhenEffect: { (predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, predicate: Predicate.Predicate<ServerRequest.HttpServerRequest>): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L83"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "withTracerDisabledForUrls",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withTracerDisabledForUrls: { (urls: ReadonlyArray<string>): <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>; <A, E, R>(layer: Layer.Layer<A, E, R>, urls: ReadonlyArray<string>): Layer.Layer<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L97"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "xForwardedHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const xForwardedHeaders: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L106"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "searchParamsParser",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const searchParamsParser: <E, R>(httpApp: App.Default<E, R>) => App.Default<E, Exclude<R, ServerRequest.ParsedSearchParams>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L112"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "cors",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const cors: (options?: { readonly allowedOrigins?: ReadonlyArray<string> | undefined; readonly allowedMethods?: ReadonlyArray<string> | undefined; readonly allowedHeaders?: ReadonlyArray<string> | undefined; readonly exposedHeaders?: ReadonlyArray<string> | undefined; readonly maxAge?: number | undefined; readonly credentials?: boolean | undefined; } | undefined) => <E, R>(httpApp: App.Default<E, R>) => App.Default<E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "SpanNameGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const SpanNameGenerator: Context.Reference<SpanNameGenerator, (request: ServerRequest.HttpServerRequest) => string>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L146"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "withSpanNameGenerator",
    "description": "Customizes the span name for the http app.\n\n```ts\nimport {\n  HttpMiddleware,\n  HttpRouter,\n  HttpServer,\n  HttpServerResponse\n} from \"@effect/platform\"\nimport { NodeHttpServer, NodeRuntime } from \"@effect/platform-node\"\nimport { Layer } from \"effect\"\nimport { createServer } from \"http\"\n\nHttpRouter.empty.pipe(\n  HttpRouter.get(\"/\", HttpServerResponse.empty()),\n  HttpServer.serve(),\n  // Customize the span names for this HttpApp\n  HttpMiddleware.withSpanNameGenerator((request) => `GET ${request.url}`),\n  Layer.provide(NodeHttpServer.layer(createServer, { port: 3000 })),\n  Layer.launch,\n  NodeRuntime.runMain\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "declare const withSpanNameGenerator: { (f: (request: ServerRequest.HttpServerRequest) => string): <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R>; <A, E, R>(layer: Layer.Layer<A, E, R>, f: (request: ServerRequest.HttpServerRequest) => string): Layer.Layer<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L179"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMiddleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpMiddleware {\n  <E, R>(self: App.Default<E, R>): App.Default<any, any>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L17"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "SpanNameGenerator",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Tracing",
    "signature": "export interface SpanNameGenerator {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L138"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMiddleware.ts",
      "path": "src/HttpMiddleware.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMiddleware.Applied",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Applied<A extends App.Default<any, any>, E, R> {\n    (self: App.Default<E, R>): A\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMiddleware.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L15"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: HttpMultiplex<never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L41"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <E, R>(apps: Iterable<readonly [predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E, R>, app: App.Default<E, R>]>) => HttpMultiplex<E, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L47"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "add",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const add: { <E2, R2, E3, R3>(predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E2, R2>, app: App.Default<E3, R3>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E3 | E, R2 | R3 | R>; <E, R, E2, R2, E3, R3>(self: HttpMultiplex<E, R>, predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E2, R2>, app: App.Default<E3, R3>): HttpMultiplex<E | E2 | E3, R | R2 | R3>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L60"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "headerExact",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const headerExact: { <E2, R2>(header: string, value: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, value: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L76"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "headerRegex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const headerRegex: { <E2, R2>(header: string, regex: RegExp, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, regex: RegExp, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L94"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "headerStartsWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const headerStartsWith: { <E2, R2>(header: string, prefix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, prefix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L112"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "headerEndsWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const headerEndsWith: { <E2, R2>(header: string, suffix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, header: string, suffix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L130"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "hostExact",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const hostExact: { <E2, R2>(host: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, host: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L148"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "hostRegex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const hostRegex: { <E2, R2>(regex: RegExp, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, regex: RegExp, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L157"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "hostStartsWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const hostStartsWith: { <E2, R2>(prefix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, prefix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L166"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "hostEndsWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const hostEndsWith: { <E2, R2>(suffix: string, app: App.Default<E2, R2>): <E, R>(self: HttpMultiplex<E, R>) => HttpMultiplex<E2 | E, R2 | R>; <E, R, E2, R2>(self: HttpMultiplex<E, R>, suffix: string, app: App.Default<E2, R2>): HttpMultiplex<E | E2, R | R2>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L175"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMultiplex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpMultiplex<E = never, R = never> extends App.Default<E | Error.RouteNotFound, R>, Inspectable {\n  readonly [TypeId]: TypeId\n  readonly apps: ReadonlyArray<\n    readonly [\n      predicate: (request: ServerRequest.HttpServerRequest) => Effect.Effect<boolean, E, R>,\n      app: App.Default<E, R>\n    ]\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpMultiplex.ts",
      "path": "src/HttpMultiplex.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpMultiplex.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "HttpPlatform",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const HttpPlatform: Context.Tag<HttpPlatform, HttpPlatform>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (impl: { readonly fileResponse: (path: string, status: number, statusText: string | undefined, headers: Headers.Headers, start: number, end: number | undefined, contentLength: number) => ServerResponse.HttpServerResponse; readonly fileWebResponse: (file: Body.HttpBody.FileLike, status: number, statusText: string | undefined, headers: Headers.Headers, options?: FileSystem.StreamOptions | undefined) => ServerResponse.HttpServerResponse; }) => Effect.Effect<HttpPlatform, never, FileSystem.FileSystem | Etag.Generator>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L53"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer<HttpPlatform, never, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L78"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "HttpPlatform",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpPlatform {\n  readonly [TypeId]: TypeId\n  readonly fileResponse: (\n    path: string,\n    options?: ServerResponse.Options.WithContent & FileSystem.StreamOptions\n  ) => Effect.Effect<ServerResponse.HttpServerResponse, Error.PlatformError>\n  readonly fileWebResponse: (\n    file: Body.HttpBody.FileLike,\n    options?: ServerResponse.Options.WithContent & FileSystem.StreamOptions\n  ) => Effect.Effect<ServerResponse.HttpServerResponse>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L37"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpPlatform.ts",
      "path": "src/HttpPlatform.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpPlatform.ts#L25"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "Default",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class Default",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L833"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L35"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const RouteTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L163"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const RouteContextTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L217"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const RouteContext: Context.Tag<RouteContext, RouteContext>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L239"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "params",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const params: Effect.Effect<Readonly<Record<string, string | undefined>>, never, RouteContext>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L245"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const schemaJson: <R, I extends Partial<{ readonly method: Method.HttpMethod; readonly url: string; readonly cookies: Readonly<Record<string, string | undefined>>; readonly headers: Readonly<Record<string, string | undefined>>; readonly pathParams: Readonly<Record<string, string | undefined>>; readonly searchParams: Readonly<Record<string, string | ReadonlyArray<string> | undefined>>; readonly body: any; }>, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Error.RequestError | ParseResult.ParseError, RouteContext | R | ServerRequest.HttpServerRequest | ServerRequest.ParsedSearchParams>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L255"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "schemaNoBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const schemaNoBody: <R, I extends Partial<{ readonly method: Method.HttpMethod; readonly url: string; readonly cookies: Readonly<Record<string, string | undefined>>; readonly headers: Readonly<Record<string, string | undefined>>; readonly pathParams: Readonly<Record<string, string | undefined>>; readonly searchParams: Readonly<Record<string, string | ReadonlyArray<string> | undefined>>; }>, A>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext | ServerRequest.HttpServerRequest | ServerRequest.ParsedSearchParams>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L280"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "schemaParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const schemaParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext | ServerRequest.ParsedSearchParams>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L306"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "schemaPathParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "route context",
    "signature": "declare const schemaPathParams: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, R | RouteContext>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L316"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "currentRouterConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "declare const currentRouterConfig: FiberRef<Partial<RouterConfig>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L325"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "withRouterConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "declare const withRouterConfig: { (config: Partial<RouterConfig>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, config: Partial<RouterConfig>): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L331"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "setRouterConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "router config",
    "signature": "declare const setRouterConfig: (config: Partial<RouterConfig>) => Layer.Layer<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L340"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: HttpRouter<never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L346"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "fromIterable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromIterable: <R extends Route<any, any>>(routes: Iterable<R>) => HttpRouter<R extends Route<infer E, infer _> ? E : never, R extends Route<infer _, infer Env> ? Env : never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L352"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "makeRoute",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeRoute: <E, R>(method: Method.HttpMethod | \"*\", path: PathInput, handler: Route.Handler<E, R>, options?: { readonly prefix?: string | undefined; readonly uninterruptible?: boolean | undefined; } | undefined) => Route<E, HttpRouter.ExcludeProvided<R>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L361"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "prefixPath",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "utils",
    "signature": "declare const prefixPath: { (prefix: string): (self: string) => string; (self: string, prefix: string): string; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L372"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "prefixAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const prefixAll: { (prefix: PathInput): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E, R>; <E, R>(self: HttpRouter<E, R>, prefix: PathInput): HttpRouter<E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L381"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "append",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const append: { <R1, E1>(route: Route<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, route: Route<E1, R1>): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L390"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "concat",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const concat: { <R1, E1>(that: HttpRouter<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R1 | R>; <E, R, R1, E1>(self: HttpRouter<E, R>, that: HttpRouter<E1, R1>): HttpRouter<E | E1, R | R1>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L412"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "concatAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const concatAll: <Routers extends ReadonlyArray<HttpRouter<unknown, unknown>>>(...routers: Routers) => [Routers[number]] extends [HttpRouter<infer E, infer R>] ? HttpRouter<E, R> : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L426"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "mount",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const mount: { <R1, E1>(path: `/${string}`, that: HttpRouter<E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R1 | R>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: `/${string}`, that: HttpRouter<E1, R1>): HttpRouter<E | E1, R | R1>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L434"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "mountApp",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const mountApp: { <R1, E1>(path: `/${string}`, that: App.Default<E1, R1>, options?: { readonly includePrefix?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, HttpRouter.ExcludeProvided<R1> | HttpRouter.ExcludeProvided<R>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: `/${string}`, that: App.Default<E1, R1>, options?: { readonly includePrefix?: boolean | undefined; } | undefined): HttpRouter<E | E1, HttpRouter.ExcludeProvided<R> | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L443"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "route",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const route: (method: Method.HttpMethod | \"*\") => { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | Exclude<R1, ServerRequest.HttpServerRequest | RouteContext | Scope.Scope>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | Exclude<R1, ServerRequest.HttpServerRequest | RouteContext | Scope.Scope>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L471"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "all",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const all: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L493"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "get",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const get: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L519"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "post",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const post: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L539"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "patch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const patch: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L559"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "put",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const put: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L579"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "del",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const del: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L599"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "head",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const head: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L619"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "routing",
    "signature": "declare const options: { <R1, E1>(path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, R | HttpRouter.ExcludeProvided<R1>>; <E, R, E1, R1>(self: HttpRouter<E, R>, path: PathInput, handler: Route.Handler<E1, R1>, options?: { readonly uninterruptible?: boolean | undefined; } | undefined): HttpRouter<E | E1, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L639"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "use",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const use: { <E, R, R1, E1>(f: (self: Route.Middleware<E, R>) => App.Default<E1, R1>): (self: HttpRouter<E, R>) => HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; <E, R, R1, E1>(self: HttpRouter<E, R>, f: (self: Route.Middleware<E, R>) => App.Default<E1, R1>): HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L659"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "transform",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const transform: { <E, R, R1, E1>(f: (self: Route.Handler<E, R>) => App.HttpApp<Respondable.Respondable, E1, R1>): (self: HttpRouter<E, R>) => HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; <E, R, R1, E1>(self: HttpRouter<E, R>, f: (self: Route.Handler<E, R>) => App.HttpApp<Respondable.Respondable, E1, R1>): HttpRouter<E1, HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L673"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "catchAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const catchAll: { <E, E2, R2>(f: (e: E) => Route.Handler<E2, R2>): <R>(self: HttpRouter<E, R>) => HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; <E, R, E2, R2>(self: HttpRouter<E, R>, f: (e: E) => Route.Handler<E2, R2>): HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L687"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "catchAllCause",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const catchAllCause: { <E, E2, R2>(f: (e: Cause.Cause<E>) => Route.Handler<E2, R2>): <R>(self: HttpRouter<E, R>) => HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; <E, R, E2, R2>(self: HttpRouter<E, R>, f: (e: Cause.Cause<E>) => Route.Handler<E2, R2>): HttpRouter<E2, R | HttpRouter.ExcludeProvided<R2>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L701"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "catchTag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const catchTag: { <K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E, E1, R1>(k: K, f: (e: Extract<E, { _tag: K; }>) => Route.Handler<E1, R1>): <R>(self: HttpRouter<E, R>) => HttpRouter<E1 | Exclude<E, { _tag: K; }>, R | HttpRouter.ExcludeProvided<R1>>; <E, R, K extends E extends { _tag: string; } ? E[\"_tag\"] : never, E1, R1>(self: HttpRouter<E, R>, k: K, f: (e: Extract<E, { _tag: K; }>) => Route.Handler<E1, R1>): HttpRouter<E1 | Exclude<E, { _tag: K; }>, R | HttpRouter.ExcludeProvided<R1>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L715"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "catchTags",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const catchTags: { <E, Cases extends E extends { _tag: string; } ? { [K in E[\"_tag\"]]+?: ((error: Extract<E, { _tag: K; }>) => Route.Handler<any, any>) | undefined; } : {}>(cases: Cases): <R>(self: HttpRouter<E, R>) => HttpRouter<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | HttpRouter.ExcludeProvided<{ [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>>; <R, E, Cases extends E extends { _tag: string; } ? { [K in E[\"_tag\"]]+?: ((error: Extract<E, { _tag: K; }>) => Route.Handler<any, any>) | undefined; } : {}>(self: HttpRouter<E, R>, cases: Cases): HttpRouter<Exclude<E, { _tag: keyof Cases; }> | { [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, infer E, any> ? E : never; }[keyof Cases], R | HttpRouter.ExcludeProvided<{ [K in keyof Cases]: Cases[K] extends (...args: Array<any>) => Effect.Effect<any, any, infer R> ? R : never; }[keyof Cases]>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L733"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "provideService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const provideService: { <T extends Context.Tag<any, any>>(tag: T, service: Context.Tag.Service<T>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E, Exclude<R, Context.Tag.Identifier<T>>>; <E, R, T extends Context.Tag<any, any>>(self: HttpRouter<E, R>, tag: T, service: Context.Tag.Service<T>): HttpRouter<E, Exclude<R, Context.Tag.Identifier<T>>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L782"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "provideServiceEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const provideServiceEffect: { <T extends Context.Tag<any, any>, R1, E1>(tag: T, effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>): <E, R>(self: HttpRouter<E, R>) => HttpRouter<E1 | E, Exclude<R, Context.Tag.Identifier<T>> | Exclude<HttpRouter.ExcludeProvided<R1>, Context.Tag.Identifier<T>>>; <E, R, T extends Context.Tag<any, any>, R1, E1>(self: HttpRouter<E, R>, tag: T, effect: Effect.Effect<Context.Tag.Service<T>, E1, R1>): HttpRouter<E | E1, Exclude<R, Context.Tag.Identifier<T>> | Exclude<HttpRouter.ExcludeProvided<R1>, Context.Tag.Identifier<T>>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L798"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "Tag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Tag: <const Name extends string>(id: Name) => <Self, R = never, E = unknown>() => HttpRouter.TagClass<Self, Name, E, R | HttpRouter.DefaultServices>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L824"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpRouter<E = never, R = never>\n  extends App.Default<E | Error.RouteNotFound, Exclude<R, RouteContext>>, Inspectable\n{\n  readonly [TypeId]: TypeId\n  readonly routes: Chunk.Chunk<Route<E, R>>\n  readonly mounts: Chunk.Chunk<\n    readonly [\n      prefix: string,\n      httpApp: App.Default<E, R>,\n      options?: { readonly includePrefix?: boolean | undefined } | undefined\n    ]\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L47"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "Route",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Route<E = never, R = never> extends Inspectable {\n  readonly [RouteTypeId]: RouteTypeId\n  readonly method: Method.HttpMethod | \"*\"\n  readonly path: PathInput\n  readonly handler: Route.Handler<E, R>\n  readonly prefix: Option.Option<string>\n  readonly uninterruptible: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L181"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface RouteContext {\n  readonly [RouteContextTypeId]: RouteContextTypeId\n  readonly params: Readonly<Record<string, string | undefined>>\n  readonly route: Route<unknown, unknown>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L229"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L41"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type RouteTypeId = typeof RouteTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L169"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "PathInput",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PathInput = `/${string}` | \"*\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L175"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "RouteContextTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type RouteContextTypeId = typeof RouteContextTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L223"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter.Service",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface Service<E, R> {\n    readonly router: Effect.Effect<HttpRouter<E, R>>\n    readonly addRoute: (route: Route<E, R>) => Effect.Effect<void>\n    readonly all: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly get: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly post: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly put: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly patch: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly del: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly head: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly options: (\n      path: PathInput,\n      handler: Route.Handler<E, R | Provided>,\n      options?: { readonly uninterruptible?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly mount: (\n      path: `/${string}`,\n      router: HttpRouter<E, R>\n    ) => Effect.Effect<void>\n    readonly mountApp: (\n      path: `/${string}`,\n      router: App.Default<E, R>,\n      options?: { readonly includePrefix?: boolean | undefined } | undefined\n    ) => Effect.Effect<void>\n    readonly concat: (router: HttpRouter<E, R>) => Effect.Effect<void>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L78"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter.TagClass",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export interface TagClass<Self, Name extends string, E, R> extends Context.Tag<Self, Service<E, R>> {\n    new(_: never): Context.TagClassShape<Name, Service<E, R>>\n    readonly Live: Layer.Layer<Self>\n    readonly router: Effect.Effect<HttpRouter<E, R>, never, Self>\n    readonly use: <XA, XE, XR>(\n      f: (router: Service<E, R>) => Effect.Effect<XA, XE, XR>\n    ) => Layer.Layer<never, XE, Exclude<XR, Scope.Scope>>\n    readonly unwrap: <XA, XE, XR>(f: (router: HttpRouter<E, R>) => Layer.Layer<XA, XE, XR>) => Layer.Layer<XA, XE, XR>\n    readonly serve: <E = never, R = never>(\n      middleware?: Middleware.HttpMiddleware.Applied<App.Default, E, R>\n    ) => Layer.Layer<\n      never,\n      never,\n      HttpServer.HttpServer | Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>\n    >\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L141"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter.Provided",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Provided = RouteContext | ServerRequest.HttpServerRequest | ServerRequest.ParsedSearchParams | Scope.Scope",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L68"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter.ExcludeProvided",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type ExcludeProvided<A> = Exclude<A, Provided>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L73"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter.DefaultServices",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type DefaultServices = Platform.HttpPlatform | Etag.Generator | FileSystem | Path",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L136"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "Route.Handler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Handler<E, R> = App.HttpApp<\n    Respondable.Respondable,\n    E,\n    R | RouteContext | ServerRequest.ParsedSearchParams\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L197"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpRouter.ts",
      "path": "src/HttpRouter.ts"
    },
    "project": "@effect/platform",
    "name": "Route.Middleware",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Middleware<E, R> = App.HttpApp<\n    ServerResponse.HttpServerResponse,\n    E,\n    R | RouteContext | ServerRequest.ParsedSearchParams\n  >",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpRouter.ts#L206"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const HttpServer: Context.Tag<HttpServer, HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L91"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (options: { readonly serve: (httpApp: App.Default<unknown>, middleware?: Middleware.HttpMiddleware) => Effect.Effect<void, never, Scope.Scope>; readonly address: Address; }) => HttpServer",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L97"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "serve",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const serve: { (): <E, R>(httpApp: App.Default<E, R>) => Layer.Layer<never, never, HttpServer | Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R, App extends App.Default<any, any>>(middleware: Middleware.HttpMiddleware.Applied<App, E, R>): (httpApp: App.Default<E, R>) => Layer.Layer<never, never, HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R>(httpApp: App.Default<E, R>): Layer.Layer<never, never, HttpServer | Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>>; <E, R, App extends App.Default<any, any>>(httpApp: App.Default<E, R>, middleware: Middleware.HttpMiddleware.Applied<App, E, R>): Layer.Layer<never, never, HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest | Scope.Scope>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "serveEffect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const serveEffect: { (): <E, R>(httpApp: App.Default<E, R>) => Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<R, ServerRequest.HttpServerRequest>>; <E, R, App extends App.Default<any, any>>(middleware: Middleware.HttpMiddleware.Applied<App, E, R>): (httpApp: App.Default<E, R>) => Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest>>; <E, R>(httpApp: App.Default<E, R>): Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<R, ServerRequest.HttpServerRequest>>; <E, R, App extends App.Default<any, any>>(httpApp: App.Default<E, R>, middleware: Middleware.HttpMiddleware.Applied<App, E, R>): Effect.Effect<void, never, Scope.Scope | HttpServer | Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest>>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L141"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "formatAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "declare const formatAddress: (address: Address) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L171"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "addressWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "declare const addressWith: <A, E, R>(effect: (address: Address) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, HttpServer | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L177"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "addressFormattedWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "declare const addressFormattedWith: <A, E, R>(effect: (address: string) => Effect.Effect<A, E, R>) => Effect.Effect<A, E, HttpServer | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L185"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "logAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "declare const logAddress: Effect.Effect<void, never, HttpServer>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L193"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "withLogAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "declare const withLogAddress: <A, E, R>(layer: Layer.Layer<A, E, R>) => Layer.Layer<A, E, R | Exclude<HttpServer, A>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L199"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "layerTestClient",
    "description": "Layer producing an `HttpClient` with prepended url of the running http server.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerTestClient: Layer.Layer<Client.HttpClient, never, HttpServer | Client.HttpClient>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L208"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "layerContext",
    "description": "A Layer providing the `HttpPlatform`, `FileSystem`, `Etag.Generator`, and `Path`\nservices.\n\nThe `FileSystem` service is a no-op implementation, so this layer is only\nuseful for platforms that have no file system.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerContext: Layer.Layer<FileSystem | Path | HttpPlatform | Generator, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L221"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServer {\n  readonly [TypeId]: TypeId\n  readonly serve: {\n    <E, R>(httpApp: App.Default<E, R>): Effect.Effect<\n      void,\n      never,\n      Exclude<R, ServerRequest.HttpServerRequest> | Scope.Scope\n    >\n    <E, R, App extends App.Default<any, any>>(\n      httpApp: App.Default<E, R>,\n      middleware: Middleware.HttpMiddleware.Applied<App, E, R>\n    ): Effect.Effect<\n      void,\n      never,\n      Exclude<R, ServerRequest.HttpServerRequest> | Scope.Scope\n    >\n  }\n  readonly address: Address\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L34"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "ServeOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface ServeOptions {\n  readonly respond: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L58"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "TcpAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export interface TcpAddress {\n  readonly _tag: \"TcpAddress\"\n  readonly hostname: string\n  readonly port: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L72"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "UnixAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "export interface UnixAddress {\n  readonly _tag: \"UnixAddress\"\n  readonly path: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L82"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L28"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServer.ts",
      "path": "src/HttpServer.ts"
    },
    "project": "@effect/platform",
    "name": "Address",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "address",
    "signature": "type Address = UnixAddress | TcpAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServer.ts#L66"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "RequestError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class RequestError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L37"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "RouteNotFound",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class RouteNotFound { constructor(options: { request: ServerRequest.HttpServerRequest }) }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L71"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "ResponseError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class ResponseError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L93"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "ServeError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "declare class ServeError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "isServerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "predicates",
    "signature": "declare const isServerError: (u: unknown) => u is HttpServerError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L65"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "clientAbortFiberId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const clientAbortFiberId: FiberId.FiberId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L130"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "causeResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const causeResponse: <E>(cause: Cause.Cause<E>) => Effect.Effect<readonly [ServerResponse.HttpServerResponse, Cause.Cause<E>]>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L135"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "causeResponseStripped",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const causeResponseStripped: <E>(cause: Cause.Cause<E>) => readonly [response: ServerResponse.HttpServerResponse, cause: Option.Option<Cause.Cause<E>>]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L142"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "exitResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const exitResponse: <E>(exit: Exit.Exit<ServerResponse.HttpServerResponse, E>) => ServerResponse.HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L150"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerError.ts",
      "path": "src/HttpServerError.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "error",
    "signature": "type HttpServerError = RequestError | ResponseError | RouteNotFound | ServeError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerError.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L37"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "context",
    "signature": "declare const HttpServerRequest: Context.Tag<HttpServerRequest, HttpServerRequest>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L79"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "ParsedSearchParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "declare const ParsedSearchParams: Context.Tag<ParsedSearchParams, ReadonlyRecord<string, string | Array<string>>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "searchParamsFromURL",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "declare const searchParamsFromURL: (url: URL) => ReadonlyRecord<string, string | Array<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L100"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "persistedMultipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const persistedMultipart: Effect.Effect<unknown, Multipart.MultipartError, Scope.Scope | FileSystem.FileSystem | Path.Path | HttpServerRequest>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L107"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "upgrade",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const upgrade: Effect.Effect<Socket.Socket, Error.RequestError, HttpServerRequest>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "upgradeChannel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const upgradeChannel: <IE = never>() => Channel<Chunk<Uint8Array>, Chunk<Uint8Array | string | Socket.CloseEvent>, Error.RequestError | IE | Socket.SocketError, IE, void, unknown, HttpServerRequest>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaCookies: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, HttpServerRequest | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L137"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaHeaders: <A, I extends Readonly<Record<string, string | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, HttpServerRequest | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L146"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaSearchParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaSearchParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError, ParsedSearchParams | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L155"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Error.RequestError | ParseResult.ParseError, HttpServerRequest | R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L164"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyForm",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyForm: <A, I extends Partial<Multipart.Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Multipart.MultipartError | ParseResult.ParseError | Error.RequestError, R | HttpServerRequest | Scope.Scope | FileSystem.FileSystem | Path.Path>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L173"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyUrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyUrlParams: <A, I extends Readonly<Record<string, string | ReadonlyArray<string> | undefined>>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, ParseResult.ParseError | Error.RequestError, R | HttpServerRequest>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L186"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyMultipart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyMultipart: <A, I extends Partial<Multipart.Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => Effect.Effect<A, Multipart.MultipartError | ParseResult.ParseError, R | HttpServerRequest | Scope.Scope | FileSystem.FileSystem | Path.Path>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L199"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "schemaBodyFormJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaBodyFormJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (field: string) => Effect.Effect<A, ParseResult.ParseError | Error.RequestError, R | HttpServerRequest | FileSystem.FileSystem | Path.Path | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L212"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "fromWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const fromWeb: (request: Request) => HttpServerRequest",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L227"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "toURL",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toURL: (self: HttpServerRequest) => Option<URL>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L233"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerRequest",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServerRequest extends IncomingMessage.HttpIncomingMessage<Error.RequestError> {\n  readonly [TypeId]: TypeId\n  readonly source: unknown\n  readonly url: string\n  readonly originalUrl: string\n  readonly method: HttpMethod\n  readonly cookies: ReadonlyRecord<string, string>\n\n  readonly multipart: Effect.Effect<\n    Multipart.Persisted,\n    Multipart.MultipartError,\n    Scope.Scope | FileSystem.FileSystem | Path.Path\n  >\n  readonly multipartStream: Stream.Stream<Multipart.Part, Multipart.MultipartError>\n\n  readonly upgrade: Effect.Effect<Socket.Socket, Error.RequestError>\n\n  readonly modify: (\n    options: {\n      readonly url?: string\n      readonly headers?: Headers.Headers\n      readonly remoteAddress?: string\n    }\n  ) => HttpServerRequest\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L49"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "ParsedSearchParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "search params",
    "signature": "export interface ParsedSearchParams {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L85"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L43"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "HttpServerRequest.ts",
      "path": "src/HttpServerRequest.ts"
    },
    "project": "@effect/platform",
    "name": "maxBodySize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const maxBodySize: FiberRef<Option<FileSystem.Size>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRequest.ts#L30"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "symbol",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "symbols",
    "signature": "declare const symbol: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L15"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "isRespondable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isRespondable: (u: unknown) => u is Respondable",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L29"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "toResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const toResponse: (self: Respondable) => Effect.Effect<HttpServerResponse>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L38"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "toResponseOrElse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const toResponseOrElse: (u: unknown, orElse: HttpServerResponse) => Effect.Effect<HttpServerResponse>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L49"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "toResponseOrElseDefect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const toResponseOrElseDefect: (u: unknown, orElse: HttpServerResponse) => Effect.Effect<HttpServerResponse>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L67"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerRespondable.ts",
      "path": "src/HttpServerRespondable.ts"
    },
    "project": "@effect/platform",
    "name": "Respondable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Respondable {\n  readonly [symbol]: () => Effect.Effect<HttpServerResponse, unknown>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerRespondable.ts#L21"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L25"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "isServerResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const isServerResponse: (u: unknown) => u is HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L79"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: (options?: Options.WithContent | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L85"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "redirect",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const redirect: (location: string | URL, options?: Options.WithContentType | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L91"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "uint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const uint8Array: (body: Uint8Array, options?: Options.WithContentType | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L98"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "text",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const text: (body: string, options?: Options.WithContentType | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L105"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "html",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const html: { <A extends ReadonlyArray<Template.Interpolated>>(strings: TemplateStringsArray, ...args: A): Effect.Effect<HttpServerResponse, Template.Interpolated.Error<A[number]>, Template.Interpolated.Context<A[number]>>; (html: string): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "htmlStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const htmlStream: <A extends ReadonlyArray<Template.InterpolatedWithStream>>(strings: TemplateStringsArray, ...args: A) => Effect.Effect<HttpServerResponse, never, Template.Interpolated.Context<A[number]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L123"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "json",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const json: (body: unknown, options?: Options.WithContentType | undefined) => Effect.Effect<HttpServerResponse, Body.HttpBodyError>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L132"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const schemaJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (body: A, options?: Options.WithContent | undefined) => Effect.Effect<HttpServerResponse, Body.HttpBodyError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L141"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unsafeJson: (body: unknown, options?: Options.WithContentType | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L151"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "urlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const urlParams: (body: UrlParams.Input, options?: Options.WithContentType | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L158"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "raw",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const raw: (body: unknown, options?: Options | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L165"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "formData",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const formData: (body: FormData, options?: Options.WithContent | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L171"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const stream: <E>(body: Stream.Stream<Uint8Array, E, never>, options?: Options | undefined) => HttpServerResponse",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L178"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "file",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const file: (path: string, options?: (Options & FileSystem.StreamOptions) | undefined) => Effect.Effect<HttpServerResponse, PlatformError.PlatformError, Platform.HttpPlatform>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L187"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "fileWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fileWeb: (file: Body.HttpBody.FileLike, options?: (Options.WithContent & FileSystem.StreamOptions) | undefined) => Effect.Effect<HttpServerResponse, never, Platform.HttpPlatform>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L196"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setHeader",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setHeader: { (key: string, value: string): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, key: string, value: string): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L205"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setHeaders: { (input: Headers.Input): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, input: Headers.Input): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L214"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "removeCookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const removeCookie: { (name: string): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, name: string): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L223"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "replaceCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const replaceCookies: { (cookies: Cookies): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, cookies: Cookies): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L232"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setCookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setCookie: { (name: string, value: string, options?: Cookie[\"options\"]): (self: HttpServerResponse) => Effect.Effect<HttpServerResponse, CookiesError>; (self: HttpServerResponse, name: string, value: string, options?: Cookie[\"options\"]): Effect.Effect<HttpServerResponse, CookiesError>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L241"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeSetCookie",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const unsafeSetCookie: { (name: string, value: string, options?: Cookie[\"options\"]): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, name: string, value: string, options?: Cookie[\"options\"]): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L267"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "updateCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const updateCookies: { (f: (cookies: Cookies) => Cookies): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, f: (cookies: Cookies) => Cookies): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L285"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "mergeCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const mergeCookies: { (cookies: Cookies): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, cookies: Cookies): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L294"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setCookies: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: HttpServerResponse) => Effect.Effect<HttpServerResponse, CookiesError, never>; (self: HttpServerResponse, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): Effect.Effect<HttpServerResponse, CookiesError, never>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L303"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeSetCookies",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const unsafeSetCookies: { (cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, cookies: Iterable<readonly [name: string, value: string, options?: Cookie[\"options\"]]>): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L329"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setBody: { (body: Body.HttpBody): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, body: Body.HttpBody): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L355"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "setStatus",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setStatus: { (status: number, statusText?: string | undefined): (self: HttpServerResponse) => HttpServerResponse; (self: HttpServerResponse, status: number, statusText?: string | undefined): HttpServerResponse; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L364"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "toWeb",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toWeb: (response: HttpServerResponse, options?: { readonly withoutBody?: boolean | undefined; readonly runtime?: Runtime.Runtime<never> | undefined; }) => Response",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L373"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface HttpServerResponse extends Effect.Effect<HttpServerResponse>, Inspectable, Respondable {\n  readonly [TypeId]: TypeId\n  readonly status: number\n  readonly statusText?: string | undefined\n  readonly headers: Headers.Headers\n  readonly cookies: Cookies\n  readonly body: Body.HttpBody\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L37"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options {\n  readonly status?: number | undefined\n  readonly statusText?: string | undefined\n  readonly headers?: Headers.Input | undefined\n  readonly cookies?: Cookies | undefined\n  readonly contentType?: string | undefined\n  readonly contentLength?: number | undefined\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L50"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L31"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "Options.WithContent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WithContent extends Omit<Options, \"contentType\" | \"contentLength\"> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L67"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpServerResponse.ts",
      "path": "src/HttpServerResponse.ts"
    },
    "project": "@effect/platform",
    "name": "Options.WithContentType",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WithContentType extends Omit<Options, \"contentLength\"> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpServerResponse.ts#L73"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "toHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const toHeaders: (span: Tracer.Span) => Headers.Headers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L20"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "fromHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": "declare const fromHeaders: (headers: Headers.Headers) => Option.Option<Tracer.ExternalSpan>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L32"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "b3",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": "declare const b3: FromHeaders",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L48"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "xb3",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": "declare const xb3: FromHeaders",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L67"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "w3c",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "decoding",
    "signature": "declare const w3c: FromHeaders",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L85"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "HttpTraceContext.ts",
      "path": "src/HttpTraceContext.ts"
    },
    "project": "@effect/platform",
    "name": "FromHeaders",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface FromHeaders {\n  (headers: Headers.Headers): Option.Option<Tracer.ExternalSpan>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/HttpTraceContext.ts#L12"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "ChannelSchema",
    "description": "Re-exports all named exports from the \"./ChannelSchema.js\" module as `ChannelSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as ChannelSchema from \"./ChannelSchema.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L4"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Command",
    "description": "Re-exports all named exports from the \"./Command.js\" module as `Command`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Command from \"./Command.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L9"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "CommandExecutor",
    "description": "Re-exports all named exports from the \"./CommandExecutor.js\" module as `CommandExecutor`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as CommandExecutor from \"./CommandExecutor.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L14"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Cookies",
    "description": "Re-exports all named exports from the \"./Cookies.js\" module as `Cookies`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Cookies from \"./Cookies.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L19"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Effectify",
    "description": "Re-exports all named exports from the \"./Effectify.js\" module as `Effectify`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Effectify from \"./Effectify.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L24"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Error",
    "description": "Re-exports all named exports from the \"./Error.js\" module as `Error`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Error from \"./Error.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L29"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Etag",
    "description": "Re-exports all named exports from the \"./Etag.js\" module as `Etag`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Etag from \"./Etag.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L34"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "FetchHttpClient",
    "description": "Re-exports all named exports from the \"./FetchHttpClient.js\" module as `FetchHttpClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as FetchHttpClient from \"./FetchHttpClient.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L39"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "FileSystem",
    "description": "Re-exports all named exports from the \"./FileSystem.js\" module as `FileSystem`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as FileSystem from \"./FileSystem.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L44"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Headers",
    "description": "Re-exports all named exports from the \"./Headers.js\" module as `Headers`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Headers from \"./Headers.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L49"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApi",
    "description": "Re-exports all named exports from the \"./HttpApi.js\" module as `HttpApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApi from \"./HttpApi.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L54"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiBuilder",
    "description": "Re-exports all named exports from the \"./HttpApiBuilder.js\" module as `HttpApiBuilder`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiBuilder from \"./HttpApiBuilder.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L59"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiClient",
    "description": "Re-exports all named exports from the \"./HttpApiClient.js\" module as `HttpApiClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiClient from \"./HttpApiClient.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L64"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiEndpoint",
    "description": "Re-exports all named exports from the \"./HttpApiEndpoint.js\" module as `HttpApiEndpoint`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiEndpoint from \"./HttpApiEndpoint.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L69"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiError",
    "description": "Re-exports all named exports from the \"./HttpApiError.js\" module as `HttpApiError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiError from \"./HttpApiError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L74"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiGroup",
    "description": "Re-exports all named exports from the \"./HttpApiGroup.js\" module as `HttpApiGroup`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiGroup from \"./HttpApiGroup.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L79"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiMiddleware",
    "description": "Re-exports all named exports from the \"./HttpApiMiddleware.js\" module as `HttpApiMiddleware`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiMiddleware from \"./HttpApiMiddleware.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L84"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiScalar",
    "description": "Re-exports all named exports from the \"./HttpApiScalar.js\" module as `HttpApiScalar`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiScalar from \"./HttpApiScalar.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L89"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSchema",
    "description": "Re-exports all named exports from the \"./HttpApiSchema.js\" module as `HttpApiSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiSchema from \"./HttpApiSchema.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L94"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSecurity",
    "description": "Re-exports all named exports from the \"./HttpApiSecurity.js\" module as `HttpApiSecurity`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiSecurity from \"./HttpApiSecurity.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L99"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApiSwagger",
    "description": "Re-exports all named exports from the \"./HttpApiSwagger.js\" module as `HttpApiSwagger`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApiSwagger from \"./HttpApiSwagger.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L104"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpApp",
    "description": "Re-exports all named exports from the \"./HttpApp.js\" module as `HttpApp`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpApp from \"./HttpApp.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L109"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpBody",
    "description": "Re-exports all named exports from the \"./HttpBody.js\" module as `HttpBody`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpBody from \"./HttpBody.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L114"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClient",
    "description": "Re-exports all named exports from the \"./HttpClient.js\" module as `HttpClient`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpClient from \"./HttpClient.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L119"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientError",
    "description": "Re-exports all named exports from the \"./HttpClientError.js\" module as `HttpClientError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpClientError from \"./HttpClientError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L124"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientRequest",
    "description": "Re-exports all named exports from the \"./HttpClientRequest.js\" module as `HttpClientRequest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpClientRequest from \"./HttpClientRequest.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L129"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpClientResponse",
    "description": "Re-exports all named exports from the \"./HttpClientResponse.js\" module as `HttpClientResponse`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpClientResponse from \"./HttpClientResponse.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L134"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpIncomingMessage",
    "description": "Re-exports all named exports from the \"./HttpIncomingMessage.js\" module as `HttpIncomingMessage`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpIncomingMessage from \"./HttpIncomingMessage.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L139"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMethod",
    "description": "Re-exports all named exports from the \"./HttpMethod.js\" module as `HttpMethod`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export * as HttpMethod from \"./HttpMethod.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L145"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMiddleware",
    "description": "Re-exports all named exports from the \"./HttpMiddleware.js\" module as `HttpMiddleware`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpMiddleware from \"./HttpMiddleware.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L150"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpMultiplex",
    "description": "Re-exports all named exports from the \"./HttpMultiplex.js\" module as `HttpMultiplex`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpMultiplex from \"./HttpMultiplex.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L155"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpPlatform",
    "description": "Re-exports all named exports from the \"./HttpPlatform.js\" module as `HttpPlatform`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpPlatform from \"./HttpPlatform.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L160"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpRouter",
    "description": "Re-exports all named exports from the \"./HttpRouter.js\" module as `HttpRouter`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpRouter from \"./HttpRouter.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L165"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServer",
    "description": "Re-exports all named exports from the \"./HttpServer.js\" module as `HttpServer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpServer from \"./HttpServer.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L170"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerError",
    "description": "Re-exports all named exports from the \"./HttpServerError.js\" module as `HttpServerError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpServerError from \"./HttpServerError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L175"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerRequest",
    "description": "Re-exports all named exports from the \"./HttpServerRequest.js\" module as `HttpServerRequest`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpServerRequest from \"./HttpServerRequest.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L180"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerRespondable",
    "description": "Re-exports all named exports from the \"./HttpServerRespondable.js\" module as `HttpServerRespondable`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpServerRespondable from \"./HttpServerRespondable.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L185"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpServerResponse",
    "description": "Re-exports all named exports from the \"./HttpServerResponse.js\" module as `HttpServerResponse`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpServerResponse from \"./HttpServerResponse.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L190"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "HttpTraceContext",
    "description": "Re-exports all named exports from the \"./HttpTraceContext.js\" module as `HttpTraceContext`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as HttpTraceContext from \"./HttpTraceContext.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L195"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "KeyValueStore",
    "description": "Re-exports all named exports from the \"./KeyValueStore.js\" module as `KeyValueStore`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as KeyValueStore from \"./KeyValueStore.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L200"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "MsgPack",
    "description": "Re-exports all named exports from the \"./MsgPack.js\" module as `MsgPack`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as MsgPack from \"./MsgPack.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L205"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Multipart",
    "description": "Re-exports all named exports from the \"./Multipart.js\" module as `Multipart`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Multipart from \"./Multipart.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L210"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Ndjson",
    "description": "Re-exports all named exports from the \"./Ndjson.js\" module as `Ndjson`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Ndjson from \"./Ndjson.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L215"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApi",
    "description": "Re-exports all named exports from the \"./OpenApi.js\" module as `OpenApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as OpenApi from \"./OpenApi.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L220"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApiJsonSchema",
    "description": "Re-exports all named exports from the \"./OpenApiJsonSchema.js\" module as `OpenApiJsonSchema`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as OpenApiJsonSchema from \"./OpenApiJsonSchema.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L225"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Path",
    "description": "Re-exports all named exports from the \"./Path.js\" module as `Path`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Path from \"./Path.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L230"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformConfigProvider",
    "description": "Re-exports all named exports from the \"./PlatformConfigProvider.js\" module as `PlatformConfigProvider`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as PlatformConfigProvider from \"./PlatformConfigProvider.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L235"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformLogger",
    "description": "Re-exports all named exports from the \"./PlatformLogger.js\" module as `PlatformLogger`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as PlatformLogger from \"./PlatformLogger.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L240"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Runtime",
    "description": "Re-exports all named exports from the \"./Runtime.js\" module as `Runtime`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Runtime from \"./Runtime.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L245"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Socket",
    "description": "Re-exports all named exports from the \"./Socket.js\" module as `Socket`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Socket from \"./Socket.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L250"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "SocketServer",
    "description": "Re-exports all named exports from the \"./SocketServer.js\" module as `SocketServer`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as SocketServer from \"./SocketServer.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L255"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Template",
    "description": "Re-exports all named exports from the \"./Template.js\" module as `Template`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Template from \"./Template.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L260"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Terminal",
    "description": "Re-exports all named exports from the \"./Terminal.js\" module as `Terminal`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Terminal from \"./Terminal.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L265"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Transferable",
    "description": "Re-exports all named exports from the \"./Transferable.js\" module as `Transferable`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Transferable from \"./Transferable.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L270"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Url",
    "description": "Re-exports all named exports from the \"./Url.js\" module as `Url`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Url from \"./Url.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L275"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "UrlParams",
    "description": "Re-exports all named exports from the \"./UrlParams.js\" module as `UrlParams`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as UrlParams from \"./UrlParams.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L280"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "Worker",
    "description": "Re-exports all named exports from the \"./Worker.js\" module as `Worker`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as Worker from \"./Worker.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L285"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerError",
    "description": "Re-exports all named exports from the \"./WorkerError.js\" module as `WorkerError`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as WorkerError from \"./WorkerError.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L290"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "index.ts",
      "path": "src/index.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerRunner",
    "description": "Re-exports all named exports from the \"./WorkerRunner.js\" module as `WorkerRunner`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "export * as WorkerRunner from \"./WorkerRunner.js\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/index.ts#L295"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L20"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "KeyValueStore",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const KeyValueStore: Context.Tag<KeyValueStore, KeyValueStore>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L110"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (impl: Omit<KeyValueStore, typeof TypeId | \"has\" | \"modify\" | \"isEmpty\" | \"forSchema\"> & Partial<KeyValueStore>) => KeyValueStore",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L116"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "makeStringOnly",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeStringOnly: (impl: Pick<KeyValueStore, \"get\" | \"remove\" | \"clear\" | \"size\"> & Partial<Omit<KeyValueStore, \"set\">> & { readonly set: (key: string, value: string) => Effect.Effect<void, PlatformError.PlatformError>; }) => KeyValueStore",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L124"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "prefix",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const prefix: { (prefix: string): <S extends KeyValueStore.AnyStore>(self: S) => S; <S extends KeyValueStore.AnyStore>(self: S, prefix: string): S; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L134"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "layerMemory",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerMemory: Layer.Layer<KeyValueStore, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L143"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "layerFileSystem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerFileSystem: (directory: string) => Layer.Layer<KeyValueStore, PlatformError.PlatformError, FileSystem.FileSystem | Path.Path>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L149"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "SchemaStoreTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "declare const SchemaStoreTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L158"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "layerSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerSchema: <A, I, R>(schema: Schema.Schema<A, I, R>, tagIdentifier: string) => { readonly tag: Context.Tag<SchemaStore<A, R>, SchemaStore<A, R>>; readonly layer: Layer.Layer<SchemaStore<A, R>, never, KeyValueStore>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L225"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "layerStorage",
    "description": "Creates an KeyValueStorage from an instance of the `Storage` api.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerStorage: (evaluate: LazyArg<Storage>) => Layer.Layer<KeyValueStore>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L241"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "KeyValueStore",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface KeyValueStore {\n  readonly [TypeId]: TypeId\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly get: (key: string) => Effect.Effect<Option.Option<string>, PlatformError.PlatformError>\n\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly getUint8Array: (key: string) => Effect.Effect<Option.Option<Uint8Array>, PlatformError.PlatformError>\n\n  /**\n   * Sets the value of the specified key.\n   */\n  readonly set: (key: string, value: string | Uint8Array) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes the specified key.\n   */\n  readonly remove: (key: string) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes all entries.\n   */\n  readonly clear: Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Returns the number of entries.\n   */\n  readonly size: Effect.Effect<number, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modify: (\n    key: string,\n    f: (value: string) => string\n  ) => Effect.Effect<Option.Option<string>, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modifyUint8Array: (\n    key: string,\n    f: (value: Uint8Array) => Uint8Array\n  ) => Effect.Effect<Option.Option<Uint8Array>, PlatformError.PlatformError>\n\n  /**\n   * Returns true if the KeyValueStore contains the specified key.\n   */\n  readonly has: (key: string) => Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Checks if the KeyValueStore contains any entries.\n   */\n  readonly isEmpty: Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Create a SchemaStore for the specified schema.\n   */\n  readonly forSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => SchemaStore<A, R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L32"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "SchemaStore",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SchemaStore<A, R> {\n  readonly [SchemaStoreTypeId]: SchemaStoreTypeId\n  /**\n   * Returns the value of the specified key if it exists.\n   */\n  readonly get: (\n    key: string\n  ) => Effect.Effect<Option.Option<A>, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Sets the value of the specified key.\n   */\n  readonly set: (\n    key: string,\n    value: A\n  ) => Effect.Effect<void, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Removes the specified key.\n   */\n  readonly remove: (key: string) => Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Removes all entries.\n   */\n  readonly clear: Effect.Effect<void, PlatformError.PlatformError>\n\n  /**\n   * Returns the number of entries.\n   */\n  readonly size: Effect.Effect<number, PlatformError.PlatformError>\n\n  /**\n   * Updates the value of the specified key if it exists.\n   */\n  readonly modify: (\n    key: string,\n    f: (value: A) => A\n  ) => Effect.Effect<Option.Option<A>, PlatformError.PlatformError | ParseResult.ParseError, R>\n\n  /**\n   * Returns true if the KeyValueStore contains the specified key.\n   */\n  readonly has: (key: string) => Effect.Effect<boolean, PlatformError.PlatformError>\n\n  /**\n   * Checks if the KeyValueStore contains any entries.\n   */\n  readonly isEmpty: Effect.Effect<boolean, PlatformError.PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L170"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L26"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "SchemaStoreTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type id",
    "signature": "type SchemaStoreTypeId = typeof SchemaStoreTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L164"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "KeyValueStore.ts",
      "path": "src/KeyValueStore.ts"
    },
    "project": "@effect/platform",
    "name": "KeyValueStore.AnyStore",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type AnyStore = KeyValueStore | SchemaStore<any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/KeyValueStore.ts#L103"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "MsgPackError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class MsgPackError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L41"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L29"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "duplexSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplexSchema: { <IA, II, IR, OA, OI, OR>(options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): <R, InErr, OutErr, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OutErr, MsgPackError | ParseError | InErr, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, MsgPackError | ParseError | OutErr, InErr, OutDone, InDone, IR | OR | R>; <R, InErr, OutErr, OutDone, InDone, IA, II, IR, OA, OI, OR>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OutErr, MsgPackError | ParseError | InErr, OutDone, InDone, R>, options: { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, MsgPackError | ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L198"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "pack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const pack: <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<unknown>, IE | MsgPackError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L62"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "packSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const packSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<A>, IE | MsgPackError | ParseError, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L96"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "unpack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpack: <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<Uint8Array>, IE | MsgPackError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L113"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "unpackSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpackSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Uint8Array>, MsgPackError | ParseError | IE, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L169"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "duplex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplex: <R, IE, OE, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OE, IE | MsgPackError, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<unknown>, MsgPackError | OE, IE, OutDone, InDone, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L186"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "schema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const schema: <S extends Schema.Schema.Any>(schema: S) => schema<S>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L328"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "schema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "export interface schema<S extends Schema.Schema.Any> extends Schema.transformOrFail<Schema.Schema<Uint8Array>, S> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L322"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "type ErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L35"
  },
  {
    "_tag": "Export",
    "module": {
      "name": "MsgPack.ts",
      "path": "src/MsgPack.ts"
    },
    "project": "@effect/platform",
    "name": "Msgpackr",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "re-exports",
    "signature": "declare const Msgpackr: typeof Msgpackr",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/MsgPack.ts#L22"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L25"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "isPart",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isPart: (u: unknown) => u is Part",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L43"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "isField",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isField: (u: unknown) => u is Field",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L74"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "isFile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isFile: (u: unknown) => u is File",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L93"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "isPersistedFile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isPersistedFile: (u: unknown) => u is PersistedFile",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L111"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L125"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare const MultipartError: new (options: { readonly reason: MultipartError[\"reason\"]; readonly cause: unknown; }) => MultipartError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L149"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "maxParts",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const maxParts: FiberRef.FiberRef<Option.Option<number>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L160"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "withMaxParts",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withMaxParts: { (count: Option.Option<number>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, count: Option.Option<number>): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L166"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "maxFieldSize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const maxFieldSize: FiberRef.FiberRef<FileSystem.Size>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L175"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "withMaxFieldSize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withMaxFieldSize: { (size: FileSystem.SizeInput): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, size: FileSystem.SizeInput): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L181"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "maxFileSize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const maxFileSize: FiberRef.FiberRef<Option.Option<FileSystem.Size>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L190"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "withMaxFileSize",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withMaxFileSize: { (size: Option.Option<FileSystem.SizeInput>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, size: Option.Option<FileSystem.SizeInput>): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L196"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "fieldMimeTypes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const fieldMimeTypes: FiberRef.FiberRef<Chunk.Chunk<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L205"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "withFieldMimeTypes",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const withFieldMimeTypes: { (mimeTypes: ReadonlyArray<string>): <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>; <A, E, R>(effect: Effect.Effect<A, E, R>, mimeTypes: ReadonlyArray<string>): Effect.Effect<A, E, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L211"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "FileSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const FileSchema: Schema.Schema<PersistedFile, PersistedFile, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L220"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "FilesSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const FilesSchema: Schema.Schema<ReadonlyArray<PersistedFile>, ReadonlyArray<PersistedFile>, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L226"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "SingleFileSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const SingleFileSchema: Schema.transform<Schema.Schema<ReadonlyArray<PersistedFile>, ReadonlyArray<PersistedFile>, never>, Schema.Schema<PersistedFile, PersistedFile, never>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L232"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => { (field: string): (persisted: Persisted) => Effect.Effect<A, ParseResult.ParseError, R>; (persisted: Persisted, field: string): Effect.Effect<A, ParseResult.ParseError, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L241"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "schemaPersisted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaPersisted: <A, I extends Partial<Persisted>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (persisted: Persisted) => Effect.Effect<A, ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L253"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "makeChannel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeChannel: <IE>(headers: Record<string, string>, bufferSize?: number) => Channel.Channel<Chunk.Chunk<Part>, Chunk.Chunk<Uint8Array>, MultipartError | IE, IE, unknown, unknown>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L262"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "makeConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeConfig: (headers: Record<string, string>) => Effect.Effect<Multipasta.BaseConfig>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L272"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "toPersisted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const toPersisted: (stream: Stream.Stream<Part, MultipartError>, writeFile?: (path: string, file: File) => Effect.Effect<void, MultipartError, FileSystem.FileSystem>) => Effect.Effect<Persisted, MultipartError, FileSystem.FileSystem | Path.Path | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L278"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "collectUint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const collectUint8Array: Channel.Channel<never, Chunk.Chunk<Uint8Array<ArrayBufferLike>>, unknown, unknown, Uint8Array<ArrayBufferLike>, unknown, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L286"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "Field",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Field extends Part.Proto {\n  readonly _tag: \"Field\"\n  readonly key: string\n  readonly contentType: string\n  readonly value: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L63"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "File",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface File extends Part.Proto {\n  readonly _tag: \"File\"\n  readonly key: string\n  readonly name: string\n  readonly contentType: string\n  readonly content: Stream.Stream<Uint8Array, MultipartError>\n  readonly contentEffect: Effect.Effect<Uint8Array, MultipartError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L80"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "PersistedFile",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PersistedFile extends Part.Proto {\n  readonly _tag: \"PersistedFile\"\n  readonly key: string\n  readonly name: string\n  readonly contentType: string\n  readonly path: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L99"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "Persisted",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Persisted {\n  readonly [key: string]: ReadonlyArray<PersistedFile> | ReadonlyArray<string> | string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L117"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "MultipartError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface MultipartError extends YieldableError {\n  readonly [ErrorTypeId]: ErrorTypeId\n  readonly _tag: \"MultipartError\"\n  readonly reason: \"FileTooLarge\" | \"FieldTooLarge\" | \"BodyTooLarge\" | \"TooManyParts\" | \"InternalError\" | \"Parse\"\n  readonly message: string\n  readonly cause: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L137"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L31"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "Part",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Part = Field | File",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L37"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type ErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L131"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Multipart.ts",
      "path": "src/Multipart.ts"
    },
    "project": "@effect/platform",
    "name": "Part.Proto",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Proto extends Inspectable {\n    readonly [TypeId]: TypeId\n    readonly _tag: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Multipart.ts#L53"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "NdjsonError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class NdjsonError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L18"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "duplex",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplex: { (options?: NdjsonOptions): <R, IE, OE, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OE, IE | NdjsonError, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<unknown>, NdjsonError | OE, IE, OutDone, InDone, R>; <R, IE, OE, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OE, IE | NdjsonError, OutDone, InDone, R>, options?: NdjsonOptions): Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<unknown>, NdjsonError | OE, IE, OutDone, InDone, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L273"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "duplexString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplexString: { (options?: NdjsonOptions): <R, IE, OE, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<string>, OE, IE | NdjsonError, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<unknown>, NdjsonError | OE, IE, OutDone, InDone, R>; <R, IE, OE, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<string>, OE, IE | NdjsonError, OutDone, InDone, R>, options?: NdjsonOptions): Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<unknown>, NdjsonError | OE, IE, OutDone, InDone, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L294"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "duplexSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplexSchema: { <IA, II, IR, OA, OI, OR>(options: Partial<NdjsonOptions> & { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): <R, InErr, OutErr, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OutErr, NdjsonError | ParseError | InErr, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, NdjsonError | ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; <R, InErr, OutErr, OutDone, InDone, IA, II, IR, OA, OI, OR>(self: Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array>, OutErr, NdjsonError | ParseError | InErr, OutDone, InDone, R>, options: Partial<NdjsonOptions> & { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, NdjsonError | ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L315"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "duplexSchemaString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const duplexSchemaString: { <IA, II, IR, OA, OI, OR>(options: Partial<NdjsonOptions> & { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): <R, InErr, OutErr, OutDone, InDone>(self: Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<string>, OutErr, NdjsonError | ParseError | InErr, OutDone, InDone, R>) => Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, NdjsonError | ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; <R, InErr, OutErr, OutDone, InDone, IA, II, IR, OA, OI, OR>(self: Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<string>, OutErr, NdjsonError | ParseError | InErr, OutDone, InDone, R>, options: Partial<NdjsonOptions> & { readonly inputSchema: Schema.Schema<IA, II, IR>; readonly outputSchema: Schema.Schema<OA, OI, OR>; }): Channel.Channel<Chunk.Chunk<OA>, Chunk.Chunk<IA>, NdjsonError | ParseError | OutErr, InErr, OutDone, InDone, R | IR | OR>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L391"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "packString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const packString: <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<unknown>, IE | NdjsonError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L69"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "pack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const pack: <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<unknown>, IE | NdjsonError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L106"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "packSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const packSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<A>, IE | NdjsonError | ParseError, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L119"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "packSchemaString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const packSchemaString: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>() => Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<A>, IE | NdjsonError | ParseError, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L136"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "unpackString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpackString: <IE = never, Done = unknown>(options?: NdjsonOptions) => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<string>, IE | NdjsonError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L178"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "unpack",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpack: <IE = never, Done = unknown>(options?: NdjsonOptions) => Channel.Channel<Chunk.Chunk<unknown>, Chunk.Chunk<Uint8Array>, IE | NdjsonError, IE, Done, Done>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L224"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "unpackSchema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpackSchema: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>(options?: NdjsonOptions) => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Uint8Array>, NdjsonError | ParseError | IE, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L239"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "unpackSchemaString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unpackSchemaString: <A, I, R>(schema: Schema.Schema<A, I, R>) => <IE = never, Done = unknown>(options?: NdjsonOptions) => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<string>, NdjsonError | ParseError | IE, IE, Done, Done, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L256"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "NdjsonOptions",
    "description": "Represents a set of options which can be used to control how the newline\ndelimited JSON is handled.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface NdjsonOptions {\n  /**\n   * Whether or not the newline delimited JSON parser should ignore empty lines.\n   *\n   * Defaults to `false`.\n   *\n   * From the [newline delimited JSON spec](https://github.com/ndjson/ndjson-spec):\n   * ```text\n   * The parser MAY silently ignore empty lines, e.g. \\n\\n. This behavior MUST\n   * be documented and SHOULD be configurable by the user of the parser.\n   * ```\n   *\n   * @since 1.0.0\n   */\n  readonly ignoreEmptyLines?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L48"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Ndjson.ts",
      "path": "src/Ndjson.ts"
    },
    "project": "@effect/platform",
    "name": "NdjsonErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type NdjsonErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Ndjson.ts#L24"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Identifier",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Identifier",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L23"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Title",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Title",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L29"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Version",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Version",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L35"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Description",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Description",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L41"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "License",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class License",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L47"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "ExternalDocs",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class ExternalDocs",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L53"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Servers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Servers",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L61"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Format",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Format",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L69"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Summary",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Summary",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L75"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Deprecated",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Deprecated",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L81"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Override",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Override",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L87"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Exclude",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Exclude",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L93"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "Transform",
    "description": "Transforms the generated OpenAPI specification",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare class Transform",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L102"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "annotations",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "annotations",
    "signature": "declare const annotations: (options: { readonly identifier?: string | undefined; readonly title?: string | undefined; readonly version?: string | undefined; readonly description?: string | undefined; readonly license?: OpenAPISpecLicense | undefined; readonly summary?: string | undefined; readonly deprecated?: boolean | undefined; readonly externalDocs?: OpenAPISpecExternalDocs | undefined; readonly servers?: ReadonlyArray<OpenAPISpecServer> | undefined; readonly format?: string | undefined; readonly override?: Record<string, unknown> | undefined; readonly exclude?: boolean | undefined; readonly transform?: ((openApiSpec: Record<string, any>) => Record<string, any>) | undefined; }) => Context.Context<never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L128"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "fromApi",
    "description": "Converts an `HttpApi` instance into an OpenAPI Specification object.\n\n**Details**\n\nThis function takes an `HttpApi` instance, which defines a structured API,\nand generates an OpenAPI Specification (`OpenAPISpec`). The resulting spec\nadheres to the OpenAPI 3.1.0 standard and includes detailed metadata such as\npaths, operations, security schemes, and components. The function processes\nthe API's annotations, middleware, groups, and endpoints to build a complete\nand accurate representation of the API in OpenAPI format.\n\nThe function also deduplicates schemas, applies transformations, and\nintegrates annotations like descriptions, summaries, external documentation,\nand overrides. Cached results are used for better performance when the same\n`HttpApi` instance is processed multiple times.\n\n**Options**\n\n- `additionalPropertiesStrategy`: Controls the handling of additional properties. Possible values are:\n  - `\"strict\"`: Disallow additional properties (default behavior).\n  - `\"allow\"`: Allow additional properties.\n\n**Example**\n\n```ts\nimport { HttpApi, HttpApiEndpoint, HttpApiGroup, OpenApi } from \"@effect/platform\"\nimport { Schema } from \"effect\"\n\nconst api = HttpApi.make(\"api\").add(\n  HttpApiGroup.make(\"group\").add(\n    HttpApiEndpoint.get(\"get\", \"/items\")\n      .addSuccess(Schema.Array(Schema.String))\n  )\n)\n\nconst spec = OpenApi.fromApi(api)\n\nconsole.log(JSON.stringify(spec, null, 2))\n// Output: OpenAPI specification in JSON format\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromApi: <Id extends string, Groups extends HttpApiGroup.Any, E, R>(api: HttpApi.HttpApi<Id, Groups, E, R>, options?: { readonly additionalPropertiesStrategy?: AdditionalPropertiesStrategy | undefined; } | undefined) => OpenAPISpec",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L229"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpec",
    "description": "This model describes the OpenAPI specification (version 3.1.0) returned by\n{@link fromApi}. It is not intended to describe the entire OpenAPI\nspecification, only the output of `fromApi`.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpec {\n  openapi: \"3.1.0\"\n  info: OpenAPISpecInfo\n  paths: OpenAPISpecPaths\n  components: OpenAPIComponents\n  security: Array<OpenAPISecurityRequirement>\n  tags: Array<OpenAPISpecTag>\n  servers?: Array<OpenAPISpecServer>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L496"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecInfo",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecInfo {\n  title: string\n  version: string\n  description?: string\n  license?: OpenAPISpecLicense\n  summary?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L510"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecTag",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecTag {\n  name: string\n  description?: string\n  externalDocs?: OpenAPISpecExternalDocs\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L522"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecExternalDocs",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecExternalDocs {\n  url: string\n  description?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L532"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecLicense",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecLicense {\n  name: string\n  url?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L541"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecServer {\n  url: string\n  description?: string\n  variables?: Record<string, OpenAPISpecServerVariable>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L550"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecServerVariable",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecServerVariable {\n  default: string\n  enum?: NonEmptyArray<string>\n  description?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L560"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecParameter",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecParameter {\n  name: string\n  in: \"query\" | \"header\" | \"path\" | \"cookie\"\n  schema: JsonSchema.JsonSchema\n  required: boolean\n  description?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L598"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenApiSpecResponse {\n  description: string\n  content?: OpenApiSpecContent\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L635"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecMediaType",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenApiSpecMediaType {\n  schema: JsonSchema.JsonSchema\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L644"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecRequestBody",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecRequestBody {\n  content: OpenApiSpecContent\n  required: true\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L652"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPIComponents",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIComponents {\n  schemas: Record<string, JsonSchema.JsonSchema>\n  securitySchemes: Record<string, OpenAPISecurityScheme>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L661"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPIHTTPSecurityScheme",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIHTTPSecurityScheme {\n  readonly type: \"http\"\n  scheme: \"bearer\" | \"basic\" | string\n  description?: string\n  /* only for scheme: 'bearer' */\n  bearerFormat?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L670"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPIApiKeySecurityScheme",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPIApiKeySecurityScheme {\n  readonly type: \"apiKey\"\n  name: string\n  in: \"query\" | \"header\" | \"cookie\"\n  description?: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L682"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecOperation",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface OpenAPISpecOperation {\n  operationId: string\n  parameters: Array<OpenAPISpecParameter>\n  responses: OpenAPISpecResponses\n  /** Always contains at least the title annotation or the group identifier */\n  tags: NonEmptyArray<string>\n  security: Array<OpenAPISecurityRequirement>\n  requestBody?: OpenAPISpecRequestBody\n  description?: string\n  summary?: string\n  deprecated?: boolean\n  externalDocs?: OpenAPISpecExternalDocs\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L707"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "AdditionalPropertiesStrategy",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type AdditionalPropertiesStrategy = \"allow\" | \"strict\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L182"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecPaths",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISpecPaths = Record<string, OpenAPISpecPathItem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L570"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecMethodName",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISpecMethodName = | \"get\"\n  | \"put\"\n  | \"post\"\n  | \"delete\"\n  | \"options\"\n  | \"head\"\n  | \"patch\"\n  | \"trace\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L576"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecPathItem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISpecPathItem = {\n  [K in OpenAPISpecMethodName]?: OpenAPISpecOperation\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L590"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISpecResponses",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISpecResponses = Record<number, OpenApiSpecResponse>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L610"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecContentType",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenApiSpecContentType = | \"application/json\"\n  | \"application/xml\"\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"text/plain\"",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L616"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenApiSpecContent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenApiSpecContent = {\n  [K in OpenApiSpecContentType]?: OpenApiSpecMediaType\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L627"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISecurityScheme",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISecurityScheme = | OpenAPIHTTPSecurityScheme\n  | OpenAPIApiKeySecurityScheme",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L693"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApi.ts",
      "path": "src/OpenApi.ts"
    },
    "project": "@effect/platform",
    "name": "OpenAPISecurityRequirement",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type OpenAPISecurityRequirement = Record<string, Array<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApi.ts#L701"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const make: <A, I, R>(schema: Schema.Schema<A, I, R>) => Root",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L249"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "makeWithDefs",
    "description": "Creates a schema with additional options and definitions.\n\n**Options**\n\n- `defs`: A record of definitions that are included in the schema.\n- `defsPath`: The path to the definitions within the schema (defaults to \"#/$defs/\").\n- `topLevelReferenceStrategy`: Controls the handling of the top-level reference. Possible values are:\n  - `\"keep\"`: Keep the top-level reference (default behavior).\n  - `\"skip\"`: Skip the top-level reference.\n- `additionalPropertiesStrategy`: Controls the handling of additional properties. Possible values are:\n  - `\"strict\"`: Disallow additional properties (default behavior).\n  - `\"allow\"`: Allow additional properties.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "encoding",
    "signature": "declare const makeWithDefs: <A, I, R>(schema: Schema.Schema<A, I, R>, options: { readonly defs: Record<string, any>; readonly defsPath?: string | undefined; readonly topLevelReferenceStrategy?: TopLevelReferenceStrategy | undefined; readonly additionalPropertiesStrategy?: AdditionalPropertiesStrategy | undefined; }) => JsonSchema",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L279"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Annotations",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Annotations {\n  title?: string\n  description?: string\n  default?: unknown\n  examples?: globalThis.Array<unknown>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L13"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Never",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Never extends Annotations {\n  $id: \"/schemas/never\"\n  not: {}\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L24"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Any",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Any extends Annotations {\n  $id: \"/schemas/any\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L34"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Unknown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Unknown extends Annotations {\n  $id: \"/schemas/unknown\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L42"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Void",
    "deprecated": false,
    "examples": [],
    "since": "0.69.0",
    "category": "model",
    "signature": "export interface Void extends Annotations {\n  $id: \"/schemas/void\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L50"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnyObject",
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface AnyObject extends Annotations {\n  $id: \"/schemas/object\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L58"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Empty",
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface Empty extends Annotations {\n  $id: \"/schemas/%7B%7D\"\n  anyOf: [\n    { type: \"object\" },\n    { type: \"array\" }\n  ]\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L71"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Ref",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Ref extends Annotations {\n  $ref: string\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L84"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "String",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface String extends Annotations {\n  type: \"string\"\n  minLength?: number\n  maxLength?: number\n  pattern?: string\n  format?: string\n  contentMediaType?: string\n  contentSchema?: JsonSchema\n  allOf?: globalThis.Array<{\n    minLength?: number\n    maxLength?: number\n    pattern?: string\n  }>\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L93"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Numeric",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Numeric extends Annotations {\n  minimum?: number\n  exclusiveMinimum?: number\n  maximum?: number\n  exclusiveMaximum?: number\n  multipleOf?: number\n  format?: string\n  allOf?: globalThis.Array<{\n    minimum?: number\n    exclusiveMinimum?: number\n    maximum?: number\n    exclusiveMaximum?: number\n    multipleOf?: number\n  }>\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L113"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Number",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Number extends Numeric {\n  type: \"number\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L134"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Integer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Integer extends Numeric {\n  type: \"integer\"\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L142"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Boolean",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Boolean extends Annotations {\n  type: \"boolean\"\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L150"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Array extends Annotations {\n  type: \"array\"\n  items?: JsonSchema | globalThis.Array<JsonSchema>\n  minItems?: number\n  maxItems?: number\n  additionalItems?: JsonSchema | boolean\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L159"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Enum",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Enum extends Annotations {\n  type?: \"string\" | \"number\" | \"boolean\"\n  enum: globalThis.Array<string | number | boolean | null>\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L172"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Enums",
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "export interface Enums extends Annotations {\n  $comment: \"/schemas/enums\"\n  anyOf: globalThis.Array<{\n    type: \"string\" | \"number\"\n    title: string\n    enum: [string | number]\n  }>\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L182"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "AnyOf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface AnyOf extends Annotations {\n  anyOf: globalThis.Array<JsonSchema>\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L196"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Object",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Object extends Annotations {\n  type: \"object\"\n  required: globalThis.Array<string>\n  properties: Record<string, JsonSchema>\n  additionalProperties?: boolean | JsonSchema\n  patternProperties?: Record<string, JsonSchema>\n  propertyNames?: JsonSchema\n  nullable?: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L205"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "JsonSchema",
    "deprecated": false,
    "examples": [],
    "since": "0.71.0",
    "category": "model",
    "signature": "type JsonSchema = | Never\n  | Any\n  | Unknown\n  | Void\n  | AnyObject\n  | Empty\n  | Ref\n  | String\n  | Number\n  | Integer\n  | Boolean\n  | Array\n  | Enum\n  | Enums\n  | AnyOf\n  | Object",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L219"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "OpenApiJsonSchema.ts",
      "path": "src/OpenApiJsonSchema.ts"
    },
    "project": "@effect/platform",
    "name": "Root",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "type Root = JsonSchema & {\n  $defs?: Record<string, JsonSchema>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/OpenApiJsonSchema.ts#L241"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L15"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "Path",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "declare const Path: Tag<Path, Path>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L66"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "description": "An implementation of the Path interface that can be used in all environments\n(including browsers).\n\nIt uses the POSIX standard for paths.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<Path, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L77"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "Path",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Path {\n  readonly [TypeId]: TypeId\n  readonly sep: string\n  readonly basename: (path: string, suffix?: string) => string\n  readonly dirname: (path: string) => string\n  readonly extname: (path: string) => string\n  readonly format: (pathObject: Partial<Path.Parsed>) => string\n  readonly fromFileUrl: (url: URL) => Effect<string, BadArgument>\n  readonly isAbsolute: (path: string) => boolean\n  readonly join: (...paths: ReadonlyArray<string>) => string\n  readonly normalize: (path: string) => string\n  readonly parse: (path: string) => Path.Parsed\n  readonly relative: (from: string, to: string) => string\n  readonly resolve: (...pathSegments: ReadonlyArray<string>) => string\n  readonly toFileUrl: (path: string) => Effect<URL, BadArgument>\n  readonly toNamespacedPath: (path: string) => string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L27"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L21"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Path.ts",
      "path": "src/Path.ts"
    },
    "project": "@effect/platform",
    "name": "Path.Parsed",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Parsed {\n    readonly root: string\n    readonly dir: string\n    readonly base: string\n    readonly ext: string\n    readonly name: string\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Path.ts#L53"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "fromDotEnv",
    "description": "Create a dotenv ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromDotEnv: (paths: string) => Effect.Effect<ConfigProvider.ConfigProvider, PlatformError, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L122"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "layerDotEnvAdd",
    "description": "Add the dotenv ConfigProvider to the environment, as a fallback to the current ConfigProvider.\nIf the file is not found, a debug log is produced and empty layer is returned.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerDotEnvAdd: (path: string) => Layer.Layer<never, never, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L133"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "layerDotEnv",
    "description": "Add the dotenv ConfigProvider to the environment, replacing the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerDotEnv: (path: string) => Layer.Layer<never, PlatformError, FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L142"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "fromFileTree",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromFileTree: (options?: { readonly rootDirectory?: string; }) => Effect.Effect<ConfigProvider.ConfigProvider, never, Path.Path | FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L25"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "layerFileTreeAdd",
    "description": "Add the file tree ConfigProvider to the environment, as a fallback to the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerFileTreeAdd: (options?: { readonly rootDirectory?: string; }) => Layer.Layer<never, never, Path.Path | FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L89"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "PlatformConfigProvider.ts",
      "path": "src/PlatformConfigProvider.ts"
    },
    "project": "@effect/platform",
    "name": "layerFileTree",
    "description": "Add the file tree ConfigProvider to the environment, replacing the current ConfigProvider.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerFileTree: (options?: { readonly rootDirectory?: string; }) => Layer.Layer<never, never, Path.Path | FileSystem.FileSystem>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformConfigProvider.ts#L108"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "PlatformLogger.ts",
      "path": "src/PlatformLogger.ts"
    },
    "project": "@effect/platform",
    "name": "toFile",
    "description": "Create a Logger from another string Logger that writes to the specified file.\n\n**Example**\n\n```ts\nimport { PlatformLogger } from \"@effect/platform\"\nimport { NodeFileSystem, NodeRuntime } from \"@effect/platform-node\"\nimport { Effect, Layer, Logger } from \"effect\"\n\nconst fileLogger = Logger.logfmtLogger.pipe(\n  PlatformLogger.toFile(\"/tmp/log.txt\")\n)\nconst LoggerLive = Logger.replaceScoped(Logger.defaultLogger, fileLogger).pipe(\n  Layer.provide(NodeFileSystem.layer)\n)\n\nEffect.log(\"a\").pipe(\n  Effect.zipRight(Effect.log(\"b\")),\n  Effect.zipRight(Effect.log(\"c\")),\n  Effect.provide(LoggerLive),\n  NodeRuntime.runMain\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const toFile: { (path: string, options?: (OpenFileOptions & { readonly batchWindow?: DurationInput | undefined; }) | undefined): <Message>(self: Logger.Logger<Message, string>) => Effect<Logger.Logger<Message, void>, PlatformError, Scope | FileSystem>; <Message>(self: Logger.Logger<Message, string>, path: string, options?: (OpenFileOptions & { readonly batchWindow?: DurationInput | undefined; }) | undefined): Effect<Logger.Logger<Message, void>, PlatformError, Scope | FileSystem>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/PlatformLogger.ts#L39"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Runtime.ts",
      "path": "src/Runtime.ts"
    },
    "project": "@effect/platform",
    "name": "defaultTeardown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "teardown",
    "signature": "declare const defaultTeardown: Teardown",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Runtime.ts#L27"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Runtime.ts",
      "path": "src/Runtime.ts"
    },
    "project": "@effect/platform",
    "name": "makeRunMain",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeRunMain: (f: <E, A>(options: { readonly fiber: Fiber.RuntimeFiber<A, E>; readonly teardown: Teardown; }) => void) => RunMain",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Runtime.ts#L123"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Runtime.ts",
      "path": "src/Runtime.ts"
    },
    "project": "@effect/platform",
    "name": "Teardown",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Teardown {\n  <E, A>(exit: Exit.Exit<E, A>, onExit: (code: number) => void): void\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Runtime.ts#L19"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Runtime.ts",
      "path": "src/Runtime.ts"
    },
    "project": "@effect/platform",
    "name": "RunMain",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface RunMain {\n  /**\n   * Helps you run a main effect with built-in error handling, logging, and signal management.\n   *\n   * **Details**\n   *\n   * This function launches an Effect as the main entry point, setting exit codes\n   * based on success or failure, handling interrupts (e.g., Ctrl+C), and optionally\n   * logging errors. By default, it logs errors and uses a \"pretty\" format, but both\n   * behaviors can be turned off. You can also provide custom teardown logic to\n   * finalize resources or produce different exit codes.\n   *\n   * **Options**\n   *\n   * An optional object that can include:\n   * - `disableErrorReporting`: Turn off automatic error logging.\n   * - `disablePrettyLogger`: Avoid adding the pretty logger.\n   * - `teardown`: Provide custom finalization logic.\n   *\n   * **When to Use**\n   *\n   * Use this function to run an Effect as your application’s main program, especially\n   * when you need structured error handling, log management, interrupt support,\n   * or advanced teardown capabilities.\n   */\n  (\n    options?: {\n      readonly disableErrorReporting?: boolean | undefined\n      readonly disablePrettyLogger?: boolean | undefined\n      readonly teardown?: Teardown | undefined\n    }\n  ): <E, A>(effect: Effect.Effect<A, E>) => void\n  /**\n   * Helps you run a main effect with built-in error handling, logging, and signal management.\n   *\n   * **Details**\n   *\n   * This function launches an Effect as the main entry point, setting exit codes\n   * based on success or failure, handling interrupts (e.g., Ctrl+C), and optionally\n   * logging errors. By default, it logs errors and uses a \"pretty\" format, but both\n   * behaviors can be turned off. You can also provide custom teardown logic to\n   * finalize resources or produce different exit codes.\n   *\n   * **Options**\n   *\n   * An optional object that can include:\n   * - `disableErrorReporting`: Turn off automatic error logging.\n   * - `disablePrettyLogger`: Avoid adding the pretty logger.\n   * - `teardown`: Provide custom finalization logic.\n   *\n   * **When to Use**\n   *\n   * Use this function to run an Effect as your application’s main program, especially\n   * when you need structured error handling, log management, interrupt support,\n   * or advanced teardown capabilities.\n   */\n  <E, A>(\n    effect: Effect.Effect<A, E>,\n    options?: {\n      readonly disableErrorReporting?: boolean | undefined\n      readonly disablePrettyLogger?: boolean | undefined\n      readonly teardown?: Teardown | undefined\n    }\n  ): void\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Runtime.ts#L38"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "CloseEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "declare class CloseEvent { constructor(readonly code = 1000, readonly reason?: string) }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L84"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "SocketGenericError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class SocketGenericError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L134"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "SocketCloseError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class SocketCloseError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L147"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const TypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L27"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "Socket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Socket: Context.Tag<Socket, Socket>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L45"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "CloseEventTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const CloseEventTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L72"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "SocketErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const SocketErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L110"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "toChannelString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toChannelString: { (encoding?: string | undefined): <IE>(self: Socket) => Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>; <IE>(self: Socket, encoding?: string | undefined): Channel.Channel<Chunk.Chunk<string>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L253"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "WebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const WebSocket: Context.Tag<WebSocket, globalThis.WebSocket>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L335"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "WebSocketConstructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const WebSocketConstructor: Context.Tag<WebSocketConstructor, (url: string, protocols?: string | Array<string> | undefined) => globalThis.WebSocket>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L351"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "layerWebSocketConstructorGlobal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWebSocketConstructorGlobal: Layer.Layer<WebSocketConstructor, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L361"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "currentSendQueueCapacity",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "fiber refs",
    "signature": "declare const currentSendQueueCapacity: FiberRef.FiberRef<number>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L552"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "isSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "guards",
    "signature": "declare const isSocket: (u: unknown) => u is Socket",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L39"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "isCloseEvent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isCloseEvent: (u: unknown) => u is CloseEvent",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L104"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "isSocketError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "refinements",
    "signature": "declare const isSocketError: (u: unknown) => u is SocketError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L122"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "toChannelMap",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toChannelMap: <IE, A>(self: Socket, f: (data: Uint8Array | string) => A) => Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L180"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "toChannel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toChannel: <IE>(self: Socket) => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L235"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "toChannelWith",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const toChannelWith: <IE = never>() => (self: Socket) => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L292"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "makeChannel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeChannel: <IE = never>() => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown, Socket>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L308"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "defaultCloseCodeIsError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const defaultCloseCodeIsError: (code: number) => boolean",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L321"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "makeWebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeWebSocket: (url: string | Effect.Effect<string>, options?: { readonly closeCodeIsError?: ((code: number) => boolean) | undefined; readonly openTimeout?: DurationInput | undefined; readonly protocols?: string | Array<string> | undefined; }) => Effect.Effect<Socket, never, WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L370"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "fromWebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromWebSocket: <RO>(acquire: Effect.Effect<globalThis.WebSocket, SocketError, RO>, options?: { readonly closeCodeIsError?: (code: number) => boolean; readonly openTimeout?: DurationInput; }) => Effect.Effect<Socket, never, Exclude<RO, Scope.Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L389"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "makeWebSocketChannel",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeWebSocketChannel: <IE = never>(url: string, options?: { readonly closeCodeIsError?: (code: number) => boolean; }) => Channel.Channel<Chunk.Chunk<Uint8Array>, Chunk.Chunk<Uint8Array | string | CloseEvent>, SocketError | IE, IE, void, unknown, WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L518"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "layerWebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWebSocket: (url: string, options?: { readonly closeCodeIsError?: (code: number) => boolean; }) => Layer.Layer<Socket, never, WebSocketConstructor>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L540"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "fromTransformStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromTransformStream: <R>(acquire: Effect.Effect<InputTransformStream, SocketError, R>, options?: { readonly closeCodeIsError?: (code: number) => boolean; }) => Effect.Effect<Socket, never, Exclude<R, Scope.Scope>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L570"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "Socket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Socket {\n  readonly [TypeId]: TypeId\n  readonly run: <_, E = never, R = never>(\n    handler: (_: Uint8Array) => Effect.Effect<_, E, R> | void\n  ) => Effect.Effect<void, SocketError | E, R>\n  readonly runRaw: <_, E = never, R = never>(\n    handler: (_: string | Uint8Array) => Effect.Effect<_, E, R> | void\n  ) => Effect.Effect<void, SocketError | E, R>\n  readonly writer: Effect.Effect<\n    (chunk: Uint8Array | string | CloseEvent) => Effect.Effect<void, SocketError>,\n    never,\n    Scope.Scope\n  >\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L53"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "WebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export interface WebSocket {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L327"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "WebSocketConstructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "export interface WebSocketConstructor {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L343"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "InputTransformStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface InputTransformStream {\n  readonly readable: ReadableStream<Uint8Array> | ReadableStream<string> | ReadableStream<Uint8Array | string>\n  readonly writable: WritableStream<Uint8Array>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L561"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "TypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type TypeId = typeof TypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L33"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "CloseEventTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type CloseEventTypeId = typeof CloseEventTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L78"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "SocketErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type SocketErrorTypeId = typeof SocketErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L116"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Socket.ts",
      "path": "src/Socket.ts"
    },
    "project": "@effect/platform",
    "name": "SocketError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "type SocketError = SocketGenericError | SocketCloseError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Socket.ts#L128"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "SocketServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class SocketServer",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L13"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "SocketServerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class SocketServerError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L39"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare const ErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L27"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "TcpAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface TcpAddress {\n  readonly _tag: \"TcpAddress\"\n  readonly hostname: string\n  readonly port: number\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L66"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "UnixAddress",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface UnixAddress {\n  readonly _tag: \"UnixAddress\"\n  readonly path: string\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L76"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "ErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "type ErrorTypeId = typeof ErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L33"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "SocketServer.ts",
      "path": "src/SocketServer.ts"
    },
    "project": "@effect/platform",
    "name": "Address",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Address = UnixAddress | TcpAddress",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/SocketServer.ts#L60"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <A extends ReadonlyArray<Interpolated>>(strings: TemplateStringsArray, ...args: A) => Effect.Effect<string, Interpolated.Error<A[number]>, Interpolated.Context<A[number]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L64"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "stream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const stream: <A extends ReadonlyArray<InterpolatedWithStream>>(strings: TemplateStringsArray, ...args: A) => Stream.Stream<string, Interpolated.Error<A[number]>, Interpolated.Context<A[number]>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L116"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "PrimitiveValue",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type PrimitiveValue = string | number | bigint | boolean | null | undefined",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L13"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "Primitive",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Primitive = PrimitiveValue | ReadonlyArray<PrimitiveValue>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L19"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "Interpolated",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Interpolated = | Primitive\n  | Option.Option<Primitive>\n  | Effect.Effect<Primitive, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L25"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "InterpolatedWithStream",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type InterpolatedWithStream = Interpolated | Stream.Stream<Primitive, any, any>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L34"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "Interpolated.Context",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Context<A> = A extends infer T ? T extends Option.Option<infer _> ? never\n    : T extends Stream.Stream<infer _A, infer _E, infer R> ? R\n    : never\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L45"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Template.ts",
      "path": "src/Template.ts"
    },
    "project": "@effect/platform",
    "name": "Interpolated.Error",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Error<A> = A extends infer T ? T extends Option.Option<infer _> ? never\n    : T extends Stream.Stream<infer _A, infer E, infer _R> ? E\n    : never\n    : never",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Template.ts#L54"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Terminal.ts",
      "path": "src/Terminal.ts"
    },
    "project": "@effect/platform",
    "name": "QuitException",
    "description": "A `QuitException` represents an exception that occurs when a user attempts to\nquit out of a `Terminal` prompt for input (usually by entering `ctrl`+`c`).",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "declare class QuitException",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Terminal.ts#L82"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Terminal.ts",
      "path": "src/Terminal.ts"
    },
    "project": "@effect/platform",
    "name": "Terminal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tag",
    "signature": "declare const Terminal: Tag<Terminal, Terminal>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Terminal.ts#L88"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal.ts",
      "path": "src/Terminal.ts"
    },
    "project": "@effect/platform",
    "name": "Terminal",
    "description": "A `Terminal` represents a command-line interface which can read input from a\nuser and display messages to a user.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Terminal {\n  /**\n   * The number of columns available on the platform's terminal interface.\n   */\n  readonly columns: Effect<number>\n  /**\n   * Reads a single input event from the default standard input.\n   */\n  readonly readInput: Effect<UserInput, QuitException>\n  /**\n   * Reads a single line from the default standard input.\n   */\n  readonly readLine: Effect<string, QuitException>\n  /**\n   * Displays text to the the default standard output.\n   */\n  readonly display: (text: string) => Effect<void, PlatformError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Terminal.ts#L18"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal.ts",
      "path": "src/Terminal.ts"
    },
    "project": "@effect/platform",
    "name": "Key",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface Key {\n  /**\n   * The name of the key being pressed.\n   */\n  readonly name: string\n  /**\n   * If set to `true`, then the user is also holding down the `Ctrl` key.\n   */\n  readonly ctrl: boolean\n  /**\n   * If set to `true`, then the user is also holding down the `Meta` key.\n   */\n  readonly meta: boolean\n  /**\n   * If set to `true`, then the user is also holding down the `Shift` key.\n   */\n  readonly shift: boolean\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Terminal.ts#L41"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Terminal.ts",
      "path": "src/Terminal.ts"
    },
    "project": "@effect/platform",
    "name": "UserInput",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "model",
    "signature": "export interface UserInput {\n  /**\n   * The character read from the user (if any).\n   */\n  readonly input: Option<string>\n  /**\n   * The key that the user pressed.\n   */\n  readonly key: Key\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Terminal.ts#L64"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "Collector",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare class Collector",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L28"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "makeCollector",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeCollector: Effect.Effect<CollectorService, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L63"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "schema",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schema: { <I>(f: (_: I) => Iterable<globalThis.Transferable>): <A, R>(self: Schema.Schema<A, I, R>) => Schema.Schema<A, I, R>; <A, I, R>(self: Schema.Schema<A, I, R>, f: (_: I) => Iterable<globalThis.Transferable>): Schema.Schema<A, I, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L82"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "ImageData",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const ImageData: Schema.Schema<ImageData, ImageData, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L104"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "MessagePort",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const MessagePort: Schema.Schema<MessagePort, MessagePort, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L113"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "Uint8Array",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const Uint8Array: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L122"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "unsafeMakeCollector",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const unsafeMakeCollector: () => CollectorService",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L37"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "addAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "accessors",
    "signature": "declare const addAll: (tranferables: Iterable<globalThis.Transferable>) => Effect.Effect<void>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L69"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Transferable.ts",
      "path": "src/Transferable.ts"
    },
    "project": "@effect/platform",
    "name": "CollectorService",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface CollectorService {\n  readonly addAll: (_: Iterable<globalThis.Transferable>) => Effect.Effect<void>\n  readonly unsafeAddAll: (_: Iterable<globalThis.Transferable>) => void\n  readonly read: Effect.Effect<Array<globalThis.Transferable>>\n  readonly unsafeRead: () => Array<globalThis.Transferable>\n  readonly unsafeClear: () => Array<globalThis.Transferable>\n  readonly clear: Effect.Effect<Array<globalThis.Transferable>>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Transferable.ts#L15"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "mutate",
    "description": "This function clones the original `URL` object and applies a callback to the\nclone, allowing multiple updates at once.\n\n**Example**\n\n```ts\nimport { Url } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com\")\n\nconst mutatedUrl = Url.mutate(myUrl, (url) => {\n  url.username = \"user\"\n  url.password = \"pass\"\n})\n\nconsole.log(\"Mutated:\", mutatedUrl.toString())\n// Output: Mutated: https://user:pass@example.com/\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Modifiers",
    "signature": "declare const mutate: { (f: (url: URL) => void): (self: URL) => URL; (self: URL, f: (url: URL) => void): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L92"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setHash",
    "description": "Updates the hash fragment of the URL.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setHash: { (hash: string): (url: URL) => URL; (url: URL, hash: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L117"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setHost",
    "description": "Updates the host (domain and port) of the URL.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setHost: { (host: string): (url: URL) => URL; (url: URL, host: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L128"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setHostname",
    "description": "Updates the domain of the URL without modifying the port.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setHostname: { (hostname: string): (url: URL) => URL; (url: URL, hostname: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L139"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setHref",
    "description": "Replaces the entire URL string.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setHref: { (href: string): (url: URL) => URL; (url: URL, href: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L150"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setPassword",
    "description": "Updates the password used for authentication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setPassword: { (password: string | Redacted.Redacted): (url: URL) => URL; (url: URL, password: string | Redacted.Redacted): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L161"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setPathname",
    "description": "Updates the path of the URL.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setPathname: { (pathname: string): (url: URL) => URL; (url: URL, pathname: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L177"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setPort",
    "description": "Updates the port of the URL.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setPort: { (port: string | number): (url: URL) => URL; (url: URL, port: string | number): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L188"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setProtocol",
    "description": "Updates the protocol (e.g., `http`, `https`).",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setProtocol: { (protocol: string): (url: URL) => URL; (url: URL, protocol: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L199"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setSearch",
    "description": "Updates the query string of the URL.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setSearch: { (search: string): (url: URL) => URL; (url: URL, search: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L210"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setUsername",
    "description": "Updates the username used for authentication.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setUsername: { (username: string): (url: URL) => URL; (url: URL, username: string): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L221"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "setUrlParams",
    "description": "Updates the query parameters of a URL.\n\n**Details**\n\nThis function allows you to set or replace the query parameters of a `URL`\nobject using the provided `UrlParams`. It creates a new `URL` object with the\nupdated parameters, leaving the original object unchanged.\n\n**Example**\n\n```ts\nimport { Url, UrlParams } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com?foo=bar\")\n\n// Write parameters\nconst updatedUrl = Url.setUrlParams(\n  myUrl,\n  UrlParams.fromInput([[\"key\", \"value\"]])\n)\n\nconsole.log(updatedUrl.toString())\n// Output: https://example.com/?key=value\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Setters",
    "signature": "declare const setUrlParams: { (urlParams: UrlParams.UrlParams): (url: URL) => URL; (url: URL, urlParams: UrlParams.UrlParams): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L255"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "modifyUrlParams",
    "description": "Reads, modifies, and updates the query parameters of a URL.\n\n**Details**\n\nThis function provides a functional way to interact with query parameters by\nreading the current parameters, applying a transformation function, and then\nwriting the updated parameters back to the URL. It returns a new `URL` object\nwith the modified parameters, ensuring immutability.\n\n**Example**\n\n```ts\nimport { Url, UrlParams } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com?foo=bar\")\n\nconst changedUrl = Url.modifyUrlParams(myUrl, UrlParams.append(\"key\", \"value\"))\n\nconsole.log(changedUrl.toString())\n// Output: https://example.com/?foo=bar&key=value\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Modifiers",
    "signature": "declare const modifyUrlParams: { (f: (urlParams: UrlParams.UrlParams) => UrlParams.UrlParams): (url: URL) => URL; (url: URL, f: (urlParams: UrlParams.UrlParams) => UrlParams.UrlParams): URL; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L317"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "fromString",
    "description": "Parses a URL string into a `URL` object, returning an `Either` type for safe\nerror handling.\n\n**Details**\n\nThis function converts a string into a `URL` object, enabling safe URL\nparsing with built-in error handling. If the string is invalid or fails to\nparse, this function does not throw an error; instead, it wraps the error in\na `IllegalArgumentException` and returns it as the `Left` value of an\n`Either`. The `Right` value contains the successfully parsed `URL`.\n\nAn optional `base` parameter can be provided to resolve relative URLs. If\nspecified, the function interprets the input `url` as relative to this\n`base`. This is especially useful when dealing with URLs that might not be\nfully qualified.\n\n**Example**\n\n```ts\nimport { Url } from \"@effect/platform\"\nimport { Either } from \"effect\"\n\n// Parse an absolute URL\n//\n//      ┌─── Either<URL, IllegalArgumentException>\n//      ▼\nconst parsed = Url.fromString(\"https://example.com/path\")\n\nif (Either.isRight(parsed)) {\n  console.log(\"Parsed URL:\", parsed.right.toString())\n} else {\n  console.log(\"Error:\", parsed.left.message)\n}\n// Output: Parsed URL: https://example.com/path\n\n// Parse a relative URL with a base\nconst relativeParsed = Url.fromString(\"/relative-path\", \"https://example.com\")\n\nif (Either.isRight(relativeParsed)) {\n  console.log(\"Parsed relative URL:\", relativeParsed.right.toString())\n} else {\n  console.log(\"Error:\", relativeParsed.left.message)\n}\n// Output: Parsed relative URL: https://example.com/relative-path\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Constructors",
    "signature": "declare const fromString: (url: string, base?: string | URL | undefined) => Either.Either<URL, Cause.IllegalArgumentException>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L60"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "Url.ts",
      "path": "src/Url.ts"
    },
    "project": "@effect/platform",
    "name": "urlParams",
    "description": "Retrieves the query parameters from a URL.\n\n**Details**\n\nThis function extracts the query parameters from a `URL` object and returns\nthem as `UrlParams`. The resulting structure can be easily manipulated or\ninspected.\n\n**Example**\n\n```ts\nimport { Url } from \"@effect/platform\"\n\nconst myUrl = new URL(\"https://example.com?foo=bar\")\n\n// Read parameters\nconst params = Url.urlParams(myUrl)\n\nconsole.log(params)\n// Output: [ [ 'foo', 'bar' ] ]\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Getters",
    "signature": "declare const urlParams: (url: URL) => UrlParams.UrlParams",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Url.ts#L289"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaFromSelf",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schemas",
    "signature": "declare const schemaFromSelf: Schema.Schema<UrlParams, UrlParams, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L86"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "empty",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const empty: UrlParams",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L94"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "getAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const getAll: { (key: string): (self: UrlParams) => ReadonlyArray<string>; (self: UrlParams, key: string): ReadonlyArray<string>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L100"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "getFirst",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const getFirst: { (key: string): (self: UrlParams) => Option.Option<string>; (self: UrlParams, key: string): Option.Option<string>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L118"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "getLast",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const getLast: { (key: string): (self: UrlParams) => Option.Option<string>; (self: UrlParams, key: string): Option.Option<string>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L131"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "set",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const set: { (key: string, value: Coercible): (self: UrlParams) => UrlParams; (self: UrlParams, key: string, value: Coercible): UrlParams; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L144"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "setAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const setAll: { (input: Input): (self: UrlParams) => UrlParams; (self: UrlParams, input: Input): UrlParams; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L157"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "append",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const append: { (key: string, value: Coercible): (self: UrlParams) => UrlParams; (self: UrlParams, key: string, value: Coercible): UrlParams; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L173"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "appendAll",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const appendAll: { (input: Input): (self: UrlParams) => UrlParams; (self: UrlParams, input: Input): UrlParams; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L186"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "remove",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "combinators",
    "signature": "declare const remove: { (key: string): (self: UrlParams) => UrlParams; (self: UrlParams, key: string): UrlParams; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L195"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaFromString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaFromString: Schema.Schema<UrlParams, string, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L338"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "fromInput",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const fromInput: (input: Input) => UrlParams",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L46"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "makeUrl",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const makeUrl: (url: string, params: UrlParams, hash: Option.Option<string>) => Either.Either<URL, Error>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L204"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "toString",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toString: (self: UrlParams) => string",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L226"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "toRecord",
    "description": "Builds a `Record` containing all the key-value pairs in the given `UrlParams`\nas `string` (if only one value for a key) or a `NonEmptyArray<string>`\n(when more than one value for a key)\n\n**Example**\n\n```ts\nimport * as assert from \"node:assert\"\nimport { UrlParams } from \"@effect/platform\"\n\nconst urlParams = UrlParams.fromInput({ a: 1, b: true, c: \"string\", e: [1, 2, 3] })\nconst result = UrlParams.toRecord(urlParams)\n\nassert.deepStrictEqual(\n  result,\n  { \"a\": \"1\", \"b\": \"true\", \"c\": \"string\", \"e\": [\"1\", \"2\", \"3\"] }\n)\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toRecord: (self: UrlParams) => Record<string, string | Arr.NonEmptyArray<string>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L263"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaJson",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaJson: <A, I, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => { (field: string): (self: UrlParams) => Effect.Effect<A, ParseResult.ParseError, R>; (self: UrlParams, field: string): Effect.Effect<A, ParseResult.ParseError, R>; }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L282"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaStruct",
    "description": "Extract schema from all key-value pairs in the given `UrlParams`.\n\n**Example**\n\n```ts\nimport * as assert from \"node:assert\"\nimport { Effect, Schema } from \"effect\"\nimport { UrlParams } from \"@effect/platform\"\n\nEffect.gen(function* () {\n  const urlParams = UrlParams.fromInput({ \"a\": [10, \"string\"], \"b\": false })\n  const result = yield* UrlParams.schemaStruct(Schema.Struct({\n    a: Schema.Tuple(Schema.NumberFromString, Schema.String),\n    b: Schema.BooleanFromString\n  }))(urlParams)\n\n  assert.deepStrictEqual(result, {\n    a: [10, \"string\"],\n    b: false\n  })\n})\n```",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaStruct: <A, I extends Record<string, string | ReadonlyArray<string> | undefined>, R>(schema: Schema.Schema<A, I, R>, options?: ParseOptions | undefined) => (self: UrlParams) => Effect.Effect<A, ParseResult.ParseError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L325"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaRecord: <A, I extends Record<string, string | ReadonlyArray<string> | undefined>, R>(schema: Schema.Schema<A, I, R>) => Schema.Schema<A, UrlParams, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L355"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "schemaParse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "schema",
    "signature": "declare const schemaParse: <A, I extends Record<string, string | ReadonlyArray<string> | undefined>, R>(schema: Schema.Schema<A, I, R>) => Schema.Schema<A, string, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L375"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "UrlParams",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface UrlParams extends ReadonlyArray<readonly [string, string]> {}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L17"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "CoercibleRecord",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface CoercibleRecord {\n  readonly [key: string]: Coercible | ReadonlyArray<Coercible> | CoercibleRecord\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L38"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "Input",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Input = | CoercibleRecord\n  | Iterable<readonly [string, Coercible]>\n  | URLSearchParams",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L23"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "UrlParams.ts",
      "path": "src/UrlParams.ts"
    },
    "project": "@effect/platform",
    "name": "Coercible",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Coercible = string | number | bigint | boolean | null | undefined",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/UrlParams.ts#L32"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformWorkerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const PlatformWorkerTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L45"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makePlatform",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "declare const makePlatform: <W>() => <P extends { readonly postMessage: (message: any, transfers?: any | undefined) => void; }>(options: { readonly setup: (options: { readonly worker: W; readonly scope: Scope.Scope; }) => Effect.Effect<P, WorkerError>; readonly listen: (options: { readonly port: P; readonly emit: (data: any) => void; readonly deferred: Deferred.Deferred<never, WorkerError>; readonly scope: Scope.Scope; }) => Effect.Effect<void>; }) => PlatformWorker",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L65"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const PlatformWorker: Context.Tag<PlatformWorker, PlatformWorker>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L85"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Spawner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const Spawner: Context.Tag<Spawner, SpawnerFn<unknown>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L109"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerManagerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const WorkerManagerTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L200"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const WorkerManager: Context.Tag<WorkerManager, WorkerManager>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L223"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makeManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeManager: Effect.Effect<WorkerManager, never, PlatformWorker>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L229"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "layerManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerManager: Layer.Layer<WorkerManager, never, PlatformWorker>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L235"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makePool",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makePool: <I, O, E>(options: WorkerPool.Options<I>) => Effect.Effect<WorkerPool<I, O, E>, WorkerError, WorkerManager | Spawner | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L241"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makePoolLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makePoolLayer: <Tag, I, O, E>(tag: Context.Tag<Tag, WorkerPool<I, O, E>>, options: WorkerPool.Options<I>) => Layer.Layer<Tag, WorkerError, WorkerManager | Spawner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L249"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makeSerialized",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeSerialized: <I extends Schema.TaggedRequest.All>(options: SerializedWorker.Options<I>) => Effect.Effect<SerializedWorker<I>, WorkerError, WorkerManager | Spawner | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L342"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makePoolSerialized",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makePoolSerialized: <I extends Schema.TaggedRequest.All>(options: SerializedWorkerPool.Options<I>) => Effect.Effect<SerializedWorkerPool<I>, WorkerError, WorkerManager | Spawner | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L350"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "makePoolSerializedLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const makePoolSerializedLayer: <Tag, I extends Schema.TaggedRequest.All>(tag: Context.Tag<Tag, SerializedWorkerPool<I>>, options: SerializedWorkerPool.Options<I>) => Layer.Layer<Tag, WorkerError, WorkerManager | Spawner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L359"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "layerSpawner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerSpawner: <W = unknown>(spawner: SpawnerFn<W>) => Layer.Layer<Spawner, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L368"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "BackingWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface BackingWorker<I, O> {\n  readonly send: (message: I, transfers?: ReadonlyArray<unknown>) => Effect.Effect<void, WorkerError>\n  readonly run: <A, E, R>(\n    handler: (_: BackingWorker.Message<O>) => Effect.Effect<A, E, R>\n  ) => Effect.Effect<never, E | WorkerError, R>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L22"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PlatformWorker {\n  readonly [PlatformWorkerTypeId]: PlatformWorkerTypeId\n  readonly spawn: <I, O>(id: number) => Effect.Effect<BackingWorker<I, O>, WorkerError, Spawner>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L57"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Worker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Worker<I, O, E = never> {\n  readonly id: number\n  readonly execute: (message: I) => Stream.Stream<O, E | WorkerError>\n  readonly executeEffect: (message: I) => Effect.Effect<O, E | WorkerError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L91"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Spawner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Spawner {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L101"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "SpawnerFn",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SpawnerFn<W = unknown> {\n  (id: number): W\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L115"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerPool",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WorkerPool<I, O, E = never> {\n  readonly backing: Pool.Pool<Worker<I, O, E>, WorkerError>\n  readonly broadcast: (message: I) => Effect.Effect<void, E | WorkerError>\n  readonly execute: (message: I) => Stream.Stream<O, E | WorkerError>\n  readonly executeEffect: (message: I) => Effect.Effect<O, E | WorkerError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L163"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface WorkerManager {\n  readonly [WorkerManagerTypeId]: WorkerManagerTypeId\n  readonly spawn: <I, O, E>(\n    options: Worker.Options<I>\n  ) => Effect.Effect<Worker<I, O, E>, WorkerError, Scope.Scope | Spawner>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L212"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SerializedWorker<I extends Schema.TaggedRequest.All> {\n  readonly id: number\n  readonly execute: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Stream.Stream<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly executeEffect: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L258"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedWorkerPool",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface SerializedWorkerPool<I extends Schema.TaggedRequest.All> {\n  readonly backing: Pool.Pool<SerializedWorker<I>, WorkerError>\n  readonly broadcast: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer _A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<void, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly execute: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Stream.Stream<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n  readonly executeEffect: <Req extends I>(\n    message: Req\n  ) => Req extends Schema.WithResult<infer A, infer _I, infer E, infer _EI, infer R>\n    ? Effect.Effect<A, E | WorkerError | ParseResult.ParseError, R>\n    : never\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L293"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformWorkerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type PlatformWorkerTypeId = typeof PlatformWorkerTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L51"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerManagerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type WorkerManagerTypeId = typeof WorkerManagerTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L206"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "BackingWorker.Message",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Message<O> = readonly [ready: 0] | readonly [data: 1, O]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L38"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Worker.Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options<I> {\n    readonly encode?: ((message: I) => Effect.Effect<unknown, WorkerError>) | undefined\n    readonly initialMessage?: LazyArg<I> | undefined\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L128"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Worker.Request",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Request<I> = | readonly [id: number, data: 0, I, trace: Span | undefined]\n    | readonly [id: number, interrupt: 1]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L137"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Worker.Span",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Span = readonly [traceId: string, spanId: string, sampled: boolean]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L145"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "Worker.Response",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Response<E, O> = | readonly [id: number, data: 0, ReadonlyArray<O>]\n    | readonly [id: number, end: 1]\n    | readonly [id: number, end: 1, ReadonlyArray<O>]\n    | readonly [id: number, error: 2, E]\n    | readonly [id: number, defect: 3, Schema.CauseEncoded<WorkerErrorFrom, unknown>]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L151"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerPool.Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Options<I> = & Worker.Options<I>\n    & ({\n      readonly onCreate?: (worker: Worker<I, unknown, unknown>) => Effect.Effect<void, WorkerError>\n      readonly size: number\n      readonly concurrency?: number | undefined\n      readonly targetUtilization?: number | undefined\n    } | {\n      readonly onCreate?: (worker: Worker<I, unknown, unknown>) => Effect.Effect<void, WorkerError>\n      readonly minSize: number\n      readonly maxSize: number\n      readonly concurrency?: number | undefined\n      readonly targetUtilization?: number | undefined\n      readonly timeToLive: Duration.DurationInput\n    })",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L179"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedWorker.Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Options<I> = Extract<I, { readonly _tag: \"InitialMessage\" }> extends never ? {\n      readonly initialMessage?: LazyArg<I>\n    }\n    : {\n      readonly initialMessage: LazyArg<Extract<I, { readonly _tag: \"InitialMessage\" }>>\n    }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L281"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "Worker.ts",
      "path": "src/Worker.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedWorkerPool.Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Options<I> = & SerializedWorker.Options<I>\n    & ({\n      readonly onCreate?: (worker: Worker<I, unknown, unknown>) => Effect.Effect<void, WorkerError>\n      readonly size: number\n      readonly concurrency?: number | undefined\n      readonly targetUtilization?: number | undefined\n    } | {\n      readonly onCreate?: (worker: Worker<I, unknown, unknown>) => Effect.Effect<void, WorkerError>\n      readonly minSize: number\n      readonly maxSize: number\n      readonly concurrency?: number | undefined\n      readonly targetUtilization?: number | undefined\n      readonly timeToLive: Duration.DurationInput\n    })",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/Worker.ts#L321"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "WorkerError.ts",
      "path": "src/WorkerError.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "declare class WorkerError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerError.ts#L31"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerError.ts",
      "path": "src/WorkerError.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const WorkerErrorTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerError.ts#L13"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "WorkerError.ts",
      "path": "src/WorkerError.ts"
    },
    "project": "@effect/platform",
    "name": "isWorkerError",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "predicates",
    "signature": "declare const isWorkerError: (u: unknown) => u is WorkerError",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerError.ts#L25"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerError.ts",
      "path": "src/WorkerError.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerErrorFrom",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "errors",
    "signature": "export interface WorkerErrorFrom {\n  readonly _tag: \"WorkerError\"\n  readonly reason: \"spawn\" | \"decode\" | \"send\" | \"unknown\" | \"encode\"\n  readonly cause: unknown\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerError.ts#L83"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerError.ts",
      "path": "src/WorkerError.ts"
    },
    "project": "@effect/platform",
    "name": "WorkerErrorTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type WorkerErrorTypeId = typeof WorkerErrorTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerError.ts#L19"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformRunnerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "declare const PlatformRunnerTypeId: unique symbol",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L47"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformRunner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "tags",
    "signature": "declare const PlatformRunner: Context.Tag<PlatformRunner, PlatformRunner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L68"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "CloseLatch",
    "description": "The worker close latch is used by platform runners to signal that the worker\nhas been closed.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "CloseLatch",
    "signature": "declare const CloseLatch: Context.Reference<CloseLatch, Deferred.Deferred<void, WorkerError>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L88"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "layerCloseLatch",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "CloseLatch",
    "signature": "declare const layerCloseLatch: Layer.Layer<CloseLatch, never, never>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L94"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: <I, E, R, O>(process: (request: I) => Stream.Stream<O, E, R> | Effect.Effect<O, E, R>, options?: Runner.Options<I, O, E>) => Effect.Effect<void, WorkerError, PlatformRunner | R | Scope.Scope>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L124"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: <I, E, R, O>(process: (request: I) => Stream.Stream<O, E, R> | Effect.Effect<O, E, R>, options?: Runner.Options<I, O, E> | undefined) => Layer.Layer<never, WorkerError, R | PlatformRunner>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L133"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "makeSerialized",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeSerialized: <R, I, A extends Schema.TaggedRequest.All, const Handlers extends SerializedRunner.Handlers<A>>(schema: Schema.Schema<A, I, R>, handlers: Handlers) => Effect.Effect<void, WorkerError, PlatformRunner | Scope.Scope | R | SerializedRunner.HandlersContext<Handlers>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L213"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "layerSerialized",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerSerialized: <R, I, A extends Schema.TaggedRequest.All, const Handlers extends SerializedRunner.Handlers<A>>(schema: Schema.Schema<A, I, R>, handlers: Handlers) => Layer.Layer<never, WorkerError, PlatformRunner | R | SerializedRunner.HandlersContext<Handlers>>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L231"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "launch",
    "description": "Launch the specified layer, interrupting the fiber when the CloseLatch is\ntriggered.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "Execution",
    "signature": "declare const launch: <A, E, R>(layer: Layer.Layer<A, E, R>) => Effect.Effect<void, E | WorkerError, R>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L249"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "BackingRunner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface BackingRunner<I, O> {\n  readonly run: <A, E, R>(\n    handler: (portId: number, message: I) => Effect.Effect<A, E, R> | void\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n  readonly send: (\n    portId: number,\n    message: O,\n    transfers?: ReadonlyArray<unknown>\n  ) => Effect.Effect<void>\n  readonly disconnects?: Mailbox.ReadonlyMailbox<number>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L19"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformRunner",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface PlatformRunner {\n  readonly [PlatformRunnerTypeId]: PlatformRunnerTypeId\n  readonly start: <I, O>(closeLatch: typeof CloseLatch.Service) => Effect.Effect<BackingRunner<I, O>, WorkerError>\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L59"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "CloseLatch",
    "description": "The worker close latch is used by platform runners to signal that the worker\nhas been closed.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "CloseLatch",
    "signature": "export interface CloseLatch {\n  readonly _: unique symbol\n}",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L77"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "PlatformRunnerTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "type ids",
    "signature": "type PlatformRunnerTypeId = typeof PlatformRunnerTypeId",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L53"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "BackingRunner.Message",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type Message<I> = readonly [request: 0, I] | readonly [close: 1]",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L40"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "Runner.Options",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "export interface Options<I, O, E> {\n    readonly decode?: (\n      message: unknown\n    ) => Effect.Effect<I, WorkerError>\n    readonly encodeOutput?: (\n      request: I,\n      message: O\n    ) => Effect.Effect<unknown, WorkerError>\n    readonly encodeError?: (\n      request: I,\n      error: E\n    ) => Effect.Effect<unknown, WorkerError>\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L105"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedRunner.Handlers",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type Handlers<A> = {\n    readonly [K in A[\"_tag\"]]: Extract<\n      A,\n      { readonly _tag: K }\n    > extends Schema.SerializableWithResult<\n      infer S,\n      infer _SI,\n      infer _SR,\n      infer A,\n      infer _AI,\n      infer E,\n      infer _EI,\n      infer _RR\n    > ? (\n        _: S\n      ) =>\n        | Stream.Stream<A, E, any>\n        | Effect.Effect<A, E, any>\n        | Layer.Layer<any, E, any>\n        | Layer.Layer<never, E, any>\n      : never\n  }",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L146"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "WorkerRunner.ts",
      "path": "src/WorkerRunner.ts"
    },
    "project": "@effect/platform",
    "name": "SerializedRunner.HandlersContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": null,
    "signature": "type HandlersContext<Handlers> = | Exclude<\n      {\n        [K in keyof Handlers]: ReturnType<Handlers[K]> extends Stream.Stream<\n          infer _A,\n          infer _E,\n          infer R\n        > ? R\n          : never\n      }[keyof Handlers],\n      InitialContext<Handlers>\n    >\n    | InitialEnv<Handlers>",
    "sourceUrl": "https://github.com/Effect-TS/effect/tree/main/packages/platform/src/WorkerRunner.ts#L172"
  }
]