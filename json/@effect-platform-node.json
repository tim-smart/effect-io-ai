[
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeCommandExecutor.ts",
      "path": "src/NodeCommandExecutor.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<CommandExecutor, never, FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeContext.ts",
      "path": "src/NodeContext.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer.Layer<NodeContext, never, never>"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "NodeContext.ts",
      "path": "src/NodeContext.ts"
    },
    "project": "@effect/platform-node",
    "name": "NodeContext",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "models",
    "signature": "type NodeContext = | CommandExecutor.CommandExecutor\n  | FileSystem.FileSystem\n  | Path.Path\n  | Terminal.Terminal\n  | Worker.WorkerManager"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeFileSystem.ts",
      "path": "src/NodeFileSystem.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<FileSystem, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "ParcelWatcher.ts",
      "path": "src/NodeFileSystem/ParcelWatcher.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<WatchBackend, never, never>"
  },
  {
    "_tag": "Class",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "UndiciRequestOptions",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "declare class UndiciRequestOptions"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "HttpAgentTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "declare const HttpAgentTypeId: unique symbol"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "HttpAgent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "declare const HttpAgent: Context.Tag<HttpAgent, HttpAgent>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "makeAgent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "declare const makeAgent: (options?: Https.AgentOptions) => Effect.Effect<HttpAgent, never, Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "agentLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "declare const agentLayer: Layer.Layer<HttpAgent, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "makeAgentLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "declare const makeAgentLayer: (options?: Https.AgentOptions) => Layer.Layer<HttpAgent>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: Effect.Effect<Client.HttpClient, never, HttpAgent>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<Client.HttpClient, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerWithoutAgent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWithoutAgent: Layer.Layer<Client.HttpClient, never, HttpAgent>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "Dispatcher",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "declare const Dispatcher: Context.Tag<Dispatcher, Undici.Dispatcher>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "makeDispatcher",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "declare const makeDispatcher: Effect.Effect<Undici.Dispatcher, never, Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "dispatcherLayer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "declare const dispatcherLayer: Layer.Layer<Dispatcher, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "dispatcherLayerGlobal",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "declare const dispatcherLayerGlobal: Layer.Layer<Dispatcher, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "makeUndici",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeUndici: (dispatcher: Undici.Dispatcher) => Client.HttpClient"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerUndici",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerUndici: Layer.Layer<Client.HttpClient, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerUndiciWithoutDispatcher",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerUndiciWithoutDispatcher: Layer.Layer<Client.HttpClient, never, Dispatcher>"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "HttpAgent",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "export interface HttpAgent {\n  readonly [HttpAgentTypeId]: typeof HttpAgentTypeId\n  readonly http: Http.Agent\n  readonly https: Https.Agent\n}"
  },
  {
    "_tag": "Interface",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "Dispatcher",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "undici",
    "signature": "export interface Dispatcher {\n  readonly _: unique symbol\n}"
  },
  {
    "_tag": "TypeAlias",
    "module": {
      "name": "NodeHttpClient.ts",
      "path": "src/NodeHttpClient.ts"
    },
    "project": "@effect/platform-node",
    "name": "HttpAgentTypeId",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "agent",
    "signature": "type HttpAgentTypeId = typeof HttpAgentTypeId"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpPlatform.ts",
      "path": "src/NodeHttpPlatform.ts"
    },
    "project": "@effect/platform-node",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: Effect.Effect<Platform.HttpPlatform, never, Etag.Generator | FileSystem.FileSystem>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpPlatform.ts",
      "path": "src/NodeHttpPlatform.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<Platform.HttpPlatform, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (evaluate: LazyArg<Http.Server<typeof Http.IncomingMessage, typeof Http.ServerResponse>>, options: Net.ListenOptions) => Effect.Effect<Server.HttpServer, ServeError, Scope.Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "makeHandler",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const makeHandler: { <R, E>(httpApp: App.Default<E, R>): Effect.Effect<(nodeRequest: Http.IncomingMessage, nodeResponse: Http.ServerResponse) => void, never, Exclude<R, ServerRequest.HttpServerRequest | Scope.Scope>>; <R, E, App extends App.Default<any, any>>(httpApp: App.Default<E, R>, middleware: Middleware.HttpMiddleware.Applied<App, E, R>): Effect.Effect<(nodeRequest: Http.IncomingMessage, nodeResponse: Http.ServerResponse) => void, never, Exclude<Effect.Effect.Context<App>, ServerRequest.HttpServerRequest | Scope.Scope>>; }"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerServer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerServer: (evaluate: LazyArg<Http.Server>, options: Net.ListenOptions) => Layer.Layer<Server.HttpServer, ServeError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (evaluate: LazyArg<Http.Server<typeof Http.IncomingMessage, typeof Http.ServerResponse>>, options: Net.ListenOptions) => Layer.Layer<Platform.HttpPlatform | Etag.Generator | NodeContext.NodeContext | Server.HttpServer, ServeError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerConfig",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerConfig: (evaluate: LazyArg<Http.Server<typeof Http.IncomingMessage, typeof Http.ServerResponse>>, options: Config.Config.Wrap<Net.ListenOptions>) => Layer.Layer<Platform.HttpPlatform | Etag.Generator | NodeContext.NodeContext | Server.HttpServer, ConfigError.ConfigError | ServeError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerTest",
    "description": "Layer starting a server on a random port and producing an `HttpClient`\nwith prepended url of the running http server.",
    "deprecated": false,
    "examples": [
      "```ts\nimport * as assert from \"node:assert\"\nimport { HttpClient, HttpRouter, HttpServer } from \"@effect/platform\"\nimport { NodeHttpServer } from \"@effect/platform-node\"\nimport { Effect } from \"effect\"\n\nEffect.gen(function*() {\n  yield* HttpServer.serveEffect(HttpRouter.empty)\n  const response = yield* HttpClient.get(\"/\")\n  assert.strictEqual(response.status, 404)\n}).pipe(Effect.provide(NodeHttpServer.layerTest))\n```"
    ],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerTest: Layer.Layer<Server.HttpServer | Platform.HttpPlatform | Etag.Generator | NodeContext.NodeContext | HttpClient.HttpClient, ServeError, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServer.ts",
      "path": "src/NodeHttpServer.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerContext",
    "description": "A Layer providing the `HttpPlatform`, `FileSystem`, `Etag.Generator`, and `Path`\nservices.\n\nThe `FileSystem` service is a no-op implementation, so this layer is only\nuseful for platforms that have no file system.",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerContext: Layer.Layer<Platform.HttpPlatform | Etag.Generator | NodeContext.NodeContext, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServerRequest.ts",
      "path": "src/NodeHttpServerRequest.ts"
    },
    "project": "@effect/platform-node",
    "name": "toIncomingMessage",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toIncomingMessage: (self: ServerRequest.HttpServerRequest) => Http.IncomingMessage"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeHttpServerRequest.ts",
      "path": "src/NodeHttpServerRequest.ts"
    },
    "project": "@effect/platform-node",
    "name": "toServerResponse",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "conversions",
    "signature": "declare const toServerResponse: (self: ServerRequest.HttpServerRequest) => Http.ServerResponse"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeKeyValueStore.ts",
      "path": "src/NodeKeyValueStore.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerFileSystem",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerFileSystem: (directory: string) => Layer.Layer<KeyValueStore.KeyValueStore, PlatformError.PlatformError>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodePath.ts",
      "path": "src/NodePath.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<Path, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodePath.ts",
      "path": "src/NodePath.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerPosix",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layerPosix: Layer<Path, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodePath.ts",
      "path": "src/NodePath.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerWin32",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layerWin32: Layer<Path, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeRuntime.ts",
      "path": "src/NodeRuntime.ts"
    },
    "project": "@effect/platform-node",
    "name": "runMain",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "runtime",
    "signature": "declare const runMain: RunMain"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeSocket.ts",
      "path": "src/NodeSocket.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerWebSocketConstructor",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWebSocketConstructor: Layer.Layer<Socket.WebSocketConstructor, never, never>"
  },
  {
    "_tag": "Function",
    "module": {
      "name": "NodeSocket.ts",
      "path": "src/NodeSocket.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerWebSocket",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWebSocket: (url: string, options?: { readonly closeCodeIsError?: (code: number) => boolean; }) => Layer.Layer<Socket.Socket>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeTerminal.ts",
      "path": "src/NodeTerminal.ts"
    },
    "project": "@effect/platform-node",
    "name": "make",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "constructors",
    "signature": "declare const make: (shouldQuit?: (input: UserInput) => boolean) => Effect<Terminal, never, Scope>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeTerminal.ts",
      "path": "src/NodeTerminal.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layer",
    "signature": "declare const layer: Layer<Terminal, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeWorker.ts",
      "path": "src/NodeWorker.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerManager",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerManager: Layer.Layer<Worker.WorkerManager, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeWorker.ts",
      "path": "src/NodeWorker.ts"
    },
    "project": "@effect/platform-node",
    "name": "layerWorker",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layerWorker: Layer.Layer<Worker.PlatformWorker, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeWorker.ts",
      "path": "src/NodeWorker.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: (spawn: (id: number) => WorkerThreads.Worker) => Layer.Layer<Worker.WorkerManager | Worker.Spawner, never, never>"
  },
  {
    "_tag": "Constant",
    "module": {
      "name": "NodeWorkerRunner.ts",
      "path": "src/NodeWorkerRunner.ts"
    },
    "project": "@effect/platform-node",
    "name": "layer",
    "deprecated": false,
    "examples": [],
    "since": "1.0.0",
    "category": "layers",
    "signature": "declare const layer: Layer.Layer<Runner.PlatformRunner, never, never>"
  }
]